[
  {
    "callback": "function (box) {\n    console.log('GOT THE BOX');\n}",
    "receiverBase": "getBox",
    "receiverCallee": "then"
  },
  {
    "callback": "function (err) {\n    this_.debug('error getting box ', err);\n}",
    "receiverBase": "then",
    "receiverCallee": "fail"
  },
  {
    "callback": "function () {\n    that._popupHolder.css('display', 'none');\n}",
    "receiverBase": "delay",
    "receiverCallee": "animate"
  },
  {
    "callback": "function (res) {\n    res.on('data', function (chunk) {\n        received += chunk;\n    });\n    res.on('end', function () {\n        ended++;\n    });\n}",
    "receiverBase": "http",
    "receiverCallee": "request"
  },
  {
    "callback": "function (chunk) {\n    received += chunk;\n}",
    "receiverBase": "res",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    ended++;\n}",
    "receiverBase": "res",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    assert.equal(received, 'hello world');\n    assert.equal(ended, 1);\n}",
    "receiverBase": "process",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    var topic = 'if (a == b) var i = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Statement should be enclosed in braces.');\n    assert.equal(messages[0].node.type, 'VariableDeclaration');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (a != b) {} else var i = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Statement should be enclosed in braces.');\n    assert.equal(messages[0].node.type, 'VariableDeclaration');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'while(true) var i = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Statement should be enclosed in braces.');\n    assert.equal(messages[0].node.type, 'VariableDeclaration');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'for(true;;) var i = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Statement should be enclosed in braces.');\n    assert.equal(messages[0].node.type, 'VariableDeclaration');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var o = {}; for(var p in o) var i = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Statement should be enclosed in braces.');\n    assert.equal(messages[0].node.type, 'VariableDeclaration');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'with(f) var i = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Statement should be enclosed in braces.');\n    assert.equal(messages[0].node.type, 'VariableDeclaration');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'do var i = 1; while(true)';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Statement should be enclosed in braces.');\n    assert.equal(messages[0].node.type, 'VariableDeclaration');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'with(f) {var i = 1;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'do {var i = 1;} while(true)';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (a != null) {var i = 1;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (null != a) {} else {var i = 1;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (a != undefined) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'while(true) {var i = 1;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'for(true;;) {var i = 1;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var o = {}; for(var p in o) {var i = 1;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if(true) {var i = 1;}else if(false) {var t = 8;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (a == b) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Expected \\'===\\' and instead saw \\'==\\'.');\n    assert.equal(messages[0].node.type, 'BinaryExpression');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (a != b) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Expected \\'!==\\' and instead saw \\'!=\\'.');\n    assert.equal(messages[0].node.type, 'BinaryExpression');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (a === b) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (a !== b) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (2 == 1) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].related.type, 'Punctuator');\n    assert.equal(messages[0].related.value, '==');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (a != null) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (null != a) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (a != undefined) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (undefined != a) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var v;\\n/**foo*/function f() {};';\n    var config = flagDecl;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var v;\\n/**foo*/\\n\\n\\nfunction f() {};';\n    var config = flagDecl;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var v;\\n//foo\\nfunction f() {};';\n    var config = flagDecl;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Missing documentation for function \\'f\\'.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var v;\\n//foo\\n\\n\\n\\nfunction f() {};';\n    var config = flagDecl;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Missing documentation for function \\'f\\'.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var v;\\n/***/function o() {/***/function f() {};};';\n    var config = flagDecl;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var v;\\n/***/function o() {/***/\\n\\n\\n\\nfunction f() {};};';\n    var config = flagDecl;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var v;\\n/***/function o() {//foo\\nfunction f() {};};';\n    var config = flagDecl;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Missing documentation for function \\'f\\'.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var v;\\n/***/function o() {//foo\\n\\n\\n\\nfunction f() {};};';\n    var config = flagDecl;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Missing documentation for function \\'f\\'.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var foo;\\nfunction f() {};';\n    var config = flagDecl;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Missing documentation for function \\'f\\'.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var foo;\\n/***/\\nfunction o() {\\nfunction f() {}; };';\n    var config = flagDecl;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Missing documentation for function \\'f\\'.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/***/function f() {};';\n    var config = flagDecl;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var foo;\\nfunction f() {};';\n    var config = flagDecl;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].related.type, 'decl');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var foo; //line comment \\nfunction f() {};';\n    var config = flagDecl;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].related.type, 'decl');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var foo = {/**foo*/f: function() {}};';\n    var config = flagExpr;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var foo = {/**foo*/\\n\\n\\n\\nf: function() {}};';\n    var config = flagExpr;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var foo = {//foo\\nf: function() {}};';\n    var config = flagExpr;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Missing documentation for function \\'f\\'.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var foo = {//foo\\n\\n\\n\\n\\n\\nf: function() {}};';\n    var config = flagExpr;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Missing documentation for function \\'f\\'.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var foo = {/**foo*/o: function() { var bar = { /***/f: function() {}}}};';\n    var config = flagExpr;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var foo = {/**foo*/o: function() { var bar = { /***/\\n\\n\\n\\n\\nf: function() {}}}};';\n    var config = flagExpr;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var foo = {/**foo*/o: function() { var bar = { //foo\\nf: function() {}}}};';\n    var config = flagDecl;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Missing documentation for function \\'f\\'.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var foo = {/**foo*/o: function() { var bar = { //foo\\n\\n\\n\\n\\n\\nf: function() {}}}};';\n    var config = flagDecl;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Missing documentation for function \\'f\\'.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var Foo; /***/Foo.bar = function() {};';\n    var config = flagDecl;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var Foo; /***/Foo[\\'bar\\'] = function() {};';\n    var config = flagDecl;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var Foo; /***/\\n\\n\\n\\n\\nFoo.bar = function() {};';\n    var config = flagDecl;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var Foo; /***/\\n\\n\\n\\n\\nFoo[\\'bar\\'] = function() {};';\n    var config = flagDecl;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var Foo; //comment\\nFoo.bar = function() {};';\n    var config = flagDecl;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Missing documentation for function \\'bar\\'.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var Foo; //comment\\nFoo[\\'bar\\'] = function() {};';\n    var config = flagDecl;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Missing documentation for function \\'bar\\'.');\n    assert.equal(messages[0].node.type, 'Literal');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var Foo; //comment\\n\\n\\n\\n\\n\\nFoo.bar = function() {};';\n    var config = flagDecl;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Missing documentation for function \\'bar\\'.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var Foo; //comment\\n\\n\\n\\n\\n\\nFoo[\\'bar\\'] = function() {};';\n    var config = flagDecl;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Missing documentation for function \\'bar\\'.');\n    assert.equal(messages[0].node.type, 'Literal');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var foo = { f: function() {}};';\n    var config = flagExpr;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Missing documentation for function \\'f\\'.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var Foo; Foo.member = function() {};';\n    var config = flagExpr;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Missing documentation for function \\'member\\'.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var Foo; Foo[\\'member\\'] = function() {};';\n    var config = flagExpr;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Missing documentation for function \\'member\\'.');\n    assert.equal(messages[0].node.type, 'Literal');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var foo = {/**foo*/o: function() { var bar = { f: function() {}}}};';\n    var config = flagExpr;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Missing documentation for function \\'f\\'.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var foo = {//line comment\\n one: function() {}}';\n    var config = flagDecl;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].related.type, 'expr');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'new Object';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Missing parentheses invoking constructor.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'new Object;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Missing parentheses invoking constructor.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'new Object();';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'new Object    ();';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '(function() { arguments.callee; }());';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'arguments.callee\\' is deprecated.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '(function() { arguments.caller; }());';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'arguments.caller\\' is deprecated.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '(function() { arguments.caller; }());';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].node.name, 'caller');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '(function() { arguments[\\'callee\\']; }());';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'arguments.callee\\' is deprecated.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '(function() { arguments[\\'caller\\']; }());';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'arguments.caller\\' is deprecated.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '(function() { arguments[\\'caller\\']; }());';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].node.value, 'caller');\n    assert.equal(messages[0].node.type, 'Literal');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '(function() { arguments.fizz; }());';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '(function() { arguments[0]; }());';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var arguments = {callee: 1}; arguments.callee();';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var arguments = {caller: 1}; arguments.caller();';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var o = {one:1, two:2,}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Trailing commas in object expressions are discouraged.');\n    assert.equal(messages[0].node.type, 'ObjectExpression');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'f({one:1, two:2,});';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Trailing commas in object expressions are discouraged.');\n    assert.equal(messages[0].node.type, 'ObjectExpression');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a = [{one:1, two:2,}];';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Trailing commas in object expressions are discouraged.');\n    assert.equal(messages[0].node.type, 'ObjectExpression');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var o = {one:1, two:2}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'f({one:1, two:2});';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a = [{one:1, two:2}];';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (a = b) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Expected a conditional expression and instead saw an assignment.');\n    assert.equal(messages[0].node.type, 'AssignmentExpression');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (a = b && (c = 10)) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Expected a conditional expression and instead saw an assignment.');\n    assert.equal(messages[0].node.type, 'AssignmentExpression');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if ((a = b = 10)) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Expected a conditional expression and instead saw an assignment.');\n    assert.equal(messages[0].node.type, 'AssignmentExpression');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'while (a = b) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Expected a conditional expression and instead saw an assignment.');\n    assert.equal(messages[0].node.type, 'AssignmentExpression');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'while (a = b && (c = 10)) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Expected a conditional expression and instead saw an assignment.');\n    assert.equal(messages[0].node.type, 'AssignmentExpression');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'while ((a = b = 10)) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Expected a conditional expression and instead saw an assignment.');\n    assert.equal(messages[0].node.type, 'AssignmentExpression');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'do {} while (a = b) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Expected a conditional expression and instead saw an assignment.');\n    assert.equal(messages[0].node.type, 'AssignmentExpression');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'do {} while (a = b && (c = 10)) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Expected a conditional expression and instead saw an assignment.');\n    assert.equal(messages[0].node.type, 'AssignmentExpression');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'do {} while ((a = b = 10)) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Expected a conditional expression and instead saw an assignment.');\n    assert.equal(messages[0].node.type, 'AssignmentExpression');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'for(var q = 0; a = b; q++) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Expected a conditional expression and instead saw an assignment.');\n    assert.equal(messages[0].node.type, 'AssignmentExpression');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'for(var q = 0; a = b && (c = 10); q++) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Expected a conditional expression and instead saw an assignment.');\n    assert.equal(messages[0].node.type, 'AssignmentExpression');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'for(var q = 0; (a = b = 10); q++) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Expected a conditional expression and instead saw an assignment.');\n    assert.equal(messages[0].node.type, 'AssignmentExpression');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if ((a = b)) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if ((a = b) && (c = 10)) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if ((a = (b = 10))) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'while ((a = b)) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'while ((a = b) && (c = 10)) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'while ((a = (b = 10))) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'do{}while ((a = b)) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'do{}while ((a = b) && (c = 10)) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'do{}while ((a = (b = 10))) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'for(var q = 0; (a = b); q++) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'for(var q = 0; (a = b) && (c = 10); q++) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'for(var q = 0; (a = (b = 10)); q++) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if(function(a) {f = 10;}) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'for(;;) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/*eslint-env browser */ console.log(\\'flag me\\')';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of console in browser-based code.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/*eslint-env node */ console.log(\\'flag me\\')';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'console.log(\\'flag me\\')';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a = (0 ? 1 : 2);';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a = (\\'hello\\' ? 1 : 2);';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a = ({} ? 1 : 2);';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a = (!true ? 1 : 2);';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a = (false ? 1 : 2);';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a = (true || false ? 1 : 2);';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a = (function(){} ? 1 : 2);';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'while (true) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'while(10) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'while(!true) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'while(true || false) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'while(\\'hello\\') {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'while(function(){}) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'while({}) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'while((a = (0 ? 1 : 2))) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'do{}while (true)';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'do{}while(10)';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'do{}while(!true) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'do{}while(true || false)';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'do{}while(\\'hello\\')';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'do{}while(function(){})';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'do{}while({})';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'for(;true;) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'for(;10;) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'for(;!true;) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'for(;true || false;) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'for(;\\'hello\\';) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'for(;function() {};) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'for(;{};) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (true) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if(10) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if(!true) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if(true || false) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if(\\'hello\\') {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if(function(){}) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if({}) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged use of constant as a conditional expression.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'do{}while(x) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if(x) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a = (x ? 1: 0);';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'for(;x;){}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'while(x){}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (a == b) {debugger;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'debugger\\' statement use is discouraged.');\n    assert.equal(messages[0].node.type, 'DebuggerStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f() {debugger;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'debugger\\' statement use is discouraged.');\n    assert.equal(messages[0].node.type, 'DebuggerStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var f = function() {debugger;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'debugger\\' statement use is discouraged.');\n    assert.equal(messages[0].node.type, 'DebuggerStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'debugger;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'debugger\\' statement use is discouraged.');\n    assert.equal(messages[0].node.type, 'DebuggerStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var v = 0; switch(v) {case 0: debugger; break;};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'debugger\\' statement use is discouraged.');\n    assert.equal(messages[0].node.type, 'DebuggerStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var v = {v: function() {debugger;}}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'debugger\\' statement use is discouraged.');\n    assert.equal(messages[0].node.type, 'DebuggerStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var o = {toString: function() {}, two: 2, one: 3}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var o = {toString: function() {}, two: 2, \\'toString\\': 3}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Duplicate object key \\'toString\\'.');\n    assert.equal(messages[0].node.type, 'Property');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var o = {\\'toString\\': function() {}, two: 2, one: 3}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var o = {\\'toString\\': function() {}, two: 2, toString: 3}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Duplicate object key \\'toString\\'.');\n    assert.equal(messages[0].node.type, 'Property');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var o = {one: 1, two: 2, one: 3}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Duplicate object key \\'one\\'.');\n    assert.equal(messages[0].node.type, 'Property');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var o = {\\'one\\': 1, two: 2, one: 3}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Duplicate object key \\'one\\'.');\n    assert.equal(messages[0].node.type, 'Property');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var o = {\\'one\\': 1, two: 2, \\'one\\': 3}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Duplicate object key \\'one\\'.');\n    assert.equal(messages[0].node.type, 'Property');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var o = { set one(value){}, get one(){} };';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (true) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Empty block should be removed or commented.');\n    assert.equal(messages[0].node.type, 'BlockStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'while(true) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Empty block should be removed or commented.');\n    assert.equal(messages[0].node.type, 'BlockStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f(a) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Empty block should be removed or commented.');\n    assert.equal(messages[0].node.type, 'BlockStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var f = function(a) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Empty block should be removed or commented.');\n    assert.equal(messages[0].node.type, 'BlockStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'switch(a) {case 1: {}}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Empty block should be removed or commented.');\n    assert.equal(messages[0].node.type, 'BlockStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'with(a) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Empty block should be removed or commented.');\n    assert.equal(messages[0].node.type, 'BlockStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'with(a) {if(a) {}}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Empty block should be removed or commented.');\n    assert.equal(messages[0].node.type, 'BlockStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'with(a) {if(a) {\\n//commented\\n}}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if(a) {\\n//commented\\n}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'switch(a) {case 1: {\\n//commented\\n}}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f(a) {\\n//commented\\n}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f(a) {\\n/*commented*/\\n}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (a == b) {eval();}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'eval\\' function calls are discouraged.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f() {eval();}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'eval\\' function calls are discouraged.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var f = function() {eval();}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'eval\\' function calls are discouraged.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'eval();';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'eval\\' function calls are discouraged.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var v = 0; switch(v) {case 0: eval(); break;};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'eval\\' function calls are discouraged.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var v = {v: function() {eval();}}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'eval\\' function calls are discouraged.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function setInterval() {} setInterval(\\'code\\', 300);';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Implicit \\'eval\\' function calls are discouraged.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function setInterval() {} var s = \\'code\\'; setInterval(s, 300);';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Implicit \\'eval\\' function calls are discouraged.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function setInterval() {} setInterval({}, 300);';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function setTimeout() {} setTimeout(\\'code\\', 300);';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Implicit \\'eval\\' function calls are discouraged.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function setTimeout() {} var s = \\'code\\'; setTimeout(s, 300);';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Implicit \\'eval\\' function calls are discouraged.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function setTimeout() {} setTimeout({}, 300);';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a=1;;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Unnecessary semicolon.');\n    assert.equal(messages[0].node.type, 'EmptyStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a = function() {};;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Unnecessary semicolon.');\n    assert.equal(messages[0].node.type, 'EmptyStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function a() {};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Unnecessary semicolon.');\n    assert.equal(messages[0].node.type, 'EmptyStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = ';';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Unnecessary semicolon.');\n    assert.equal(messages[0].node.type, 'EmptyStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a = function() {};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a = 4;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a = {};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'switch(a) {case 1: foo; case 2: foo;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Switch case may be entered by falling through the previous case.');\n    assert.equal(messages[0].node.type, 'SwitchCase');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'switch(a) {case 1:{ foo;} case 2:{ foo;}}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Switch case may be entered by falling through the previous case.');\n    assert.equal(messages[0].node.type, 'SwitchCase');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'switch(a) {case 1: switch(b) {case 1: foo; case 2: foo;}}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Switch case may be entered by falling through the previous case.');\n    assert.equal(messages[0].node.type, 'SwitchCase');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'switch(a) {case 1: foo; default:break;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Switch case may be entered by falling through the previous case.');\n    assert.equal(messages[0].node.type, 'SwitchCase');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'switch(a) {case 1:{ foo;} break; case 2:{ foo;}}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'switch(a) {case 1: foo; break; case 2: foo;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'switch(a) {case 1: foo; throw e; case 2: foo;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'while(c) {switch(a) {case 1: foo; continue; case 2: foo;}}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f() {switch(a) {case 1: foo; return; case 2: foo;}}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'switch(a) {case 1: case 2: foo;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'switch(a) {case 1: {} case 2: foo;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'switch(a) {case 1: foo; //$FALLTHROUGH$\\ndefault:break;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'switch(a) {case 1: switch(b) {case 1: foo; //$FALLTHROUGH$\\ncase 2: foo;}}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'a.__iterator__ = function() {};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged __iterator__ property use.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'a.b.c.__iterator__ = function() {};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged __iterator__ property use.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'a[\\'__iterator__\\'] = function() {};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged __iterator__ property use.');\n    assert.equal(messages[0].node.type, 'Literal');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'a.b[\"__iterator__\"] = function() {};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Discouraged __iterator__ property use.');\n    assert.equal(messages[0].node.type, 'Literal');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var __iterator__ = function() {};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a = __iterator__ = function() {};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a = __iterator__;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var o = {a: function() {this.}};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'window.';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/* jslint node:true */ if (a == b) var i = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'The \\'jslint\\' directive is unsupported, please use eslint-env.');\n    assert.equal(messages[0].node.type, 'BlockComment');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/*jslint node:true*/if (a != b) {} else var i = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'The \\'jslint\\' directive is unsupported, please use eslint-env.');\n    assert.equal(messages[0].node.type, 'BlockComment');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'while(true) /*jslint browser:false*/ var i = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'The \\'jslint\\' directive is unsupported, please use eslint-env.');\n    assert.equal(messages[0].node.type, 'BlockComment');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'while(true) /*JSLint browser:false*/ var i = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'The \\'JSLint\\' directive is unsupported, please use eslint-env.');\n    assert.equal(messages[0].node.type, 'BlockComment');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/*jshint ecma:true*/ for(true;;) var i = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'The \\'jshint\\' directive is unsupported, please use eslint-env.');\n    assert.equal(messages[0].node.type, 'BlockComment');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var o = {}; /* jshint browser:true */ for(var p in o) var i = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'The \\'jshint\\' directive is unsupported, please use eslint-env.');\n    assert.equal(messages[0].node.type, 'BlockComment');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var o = {}; /* JSHint browser:true */ for(var p in o) var i = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'The \\'JSHint\\' directive is unsupported, please use eslint-env.');\n    assert.equal(messages[0].node.type, 'BlockComment');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/*jslint */ if (a != null) {var i = 1;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/*jslint is not supported*/ if (null != a) {} else {var i = 1;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/*jslint node: false*/ if (a != undefined) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '//jslint node:false\\n if (a != undefined) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/*jshint */ if (a != null) {var i = 1;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/*jshint is not supported*/ if (null != a) {} else {var i = 1;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/*jshint node: false*/ if (a != undefined) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '//jshint node:false\\n if (a != undefined) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'new Array()';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Use the array literal notation \\'[]\\'.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/*global Array*/ new Array();';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Use the array literal notation \\'[]\\'.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '(function f() { var x = new Array(); }());';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Use the array literal notation \\'[]\\'.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var Array; new Array();';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var Array; function f() { new Array(); }';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'new Function';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'The Function constructor is eval.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/*global Function*/ new Function();';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'The Function constructor is eval.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '(function f() { new Function(); }());';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'The Function constructor is eval.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var Function; new Function();';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var Function; function f() { new Function(); }';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'new Object';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Use the object literal notation \\'{}\\' or Object.create(null).');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/*global Object*/ new Object();';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Use the object literal notation \\'{}\\' or Object.create(null).');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '(function f() { new Object(); }());';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Use the object literal notation \\'{}\\' or Object.create(null).');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var Object; new Object();';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var Object; function f() { new Object(); }';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (message) {\n    assert.equal(message.ruleId, RULE_ID);\n    assert.ok(/Do not use \\'\\w+\\' as a constructor\\./.test(message.message), 'Has expected message');\n    assert.equal(message.node.type, 'Identifier');\n}",
    "receiverBase": "messages",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    var topic = 'new String; new Number; new Math; new Boolean; new JSON;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 5);\n    assertMessages(messages);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/*global String Number Math Boolean JSON*/ new String; new Number; new Math; new Boolean; new JSON;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 5);\n    assertMessages(messages);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '(function f() { new new String; new Number; new Math; new Boolean; new JSON; }());';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 5);\n    assertMessages(messages);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var String, Number, Math, Boolean, JSON; new String; new Number; new Math; new Boolean; new JSON;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var String, Number, Math, Boolean, JSON; function f() { new String; new Number; new Math; new Boolean; new JSON; }';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a; var a;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'a\\' is already defined.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f() { var g, g; }';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'g\\' is already defined.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var f = function() { var g, g; };';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'g\\' is already defined.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '(function() { var a, b; var a; })';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].node.range[0], 28);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    it('should flag redeclaration of param', function () {\n        var topic = 'function f(a) { var a; }';\n        var config = { rules: {} };\n        config.rules[RULE_ID] = 1;\n        var messages = eslint.verify(topic, config);\n        assert.equal(messages.length, 1);\n        assert.equal(messages[0].ruleId, RULE_ID);\n        assert.equal(messages[0].message, '\\'a\\' is already defined.');\n        assert.equal(messages[0].node.type, 'Identifier');\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "describe"
  },
  {
    "callback": "function () {\n    var topic = 'function f(a) { var a; }';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'a\\' is already defined.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a = 2, b; a = b = 3; ';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a; function f() { a = 1; }';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var regex = /   .*/g;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Avoid multiple spaces in regular expressions. Use \\' {3}\\' instead.');\n    assert.equal(messages[0].node.type, 'Literal');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var regex = /   .*  /g;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 2);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Avoid multiple spaces in regular expressions. Use \\' {3}\\' instead.');\n    assert.equal(messages[0].node.type, 'Literal');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var regex = new RegExp(\"   .*\");';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Avoid multiple spaces in regular expressions. Use \\' {3}\\' instead.');\n    assert.equal(messages[0].node.type, 'Literal');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var regex = new RegExp(\"   .*  \");';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 2);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Avoid multiple spaces in regular expressions. Use \\' {3}\\' instead.');\n    assert.equal(messages[0].node.type, 'Literal');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var regex = / .*/g;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var regex = / .* /g;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var regex = / {3}.*/g;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var regex = new RegExp(\" .*\");';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var regex = new RegExp(\" .* \");';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var regex = new RegExp(\" {3}.*\");';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a = {public:1}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Reserved words should not be used as property keys.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a = {function:1}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Reserved words should not be used as property keys.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a = {for:1}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Reserved words should not be used as property keys.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a = {\\'public\\':1}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a = {\\'function\\':1}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a = {\\'for\\':1}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a; (function() { var a; } ());';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'a\\' is already declared in the upper scope.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a; function z() { var a; }';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'a\\' is already declared in the upper scope.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a; (function() { var a; } ());';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].node.type, 'Identifier');\n    assert.equal(messages[0].node.range[0], 25);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f() { function g() { var f; } }';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'f\\' is already declared in the upper scope.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f() { function f() {} }';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'f\\' is already declared in the upper scope.');\n    assert.equal(messages[0].node.type, 'Identifier');\n    assert.equal(messages[0].node.range[0], 24);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '(function() { var a; function z() {var a;} })';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'a\\' is already declared in the upper scope.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f() {var a; function z() {var a;} }';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'a\\' is already declared in the upper scope.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f(a) { function g() { var a; } }';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'a\\' is already declared in the upper scope.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a; function b(a) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f() {} function g(f) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a; function f(a) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/*eslint-env browser*/ var name = \\'me\\';';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Variable \\'name\\' shadows a global member');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/*eslint-env browser*/ function f(name){}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Parameter \\'name\\' shadows a global member');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/*eslint-env node*/ var require = {};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Variable \\'require\\' shadows a global member');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/*eslint-env node*/ function f(module){}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Parameter \\'module\\' shadows a global member');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f(Math){}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Parameter \\'Math\\' shadows a global member');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var Object;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Variable \\'Object\\' shadows a global member');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var name = \\'me\\';';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f(name){}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var require = {};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f(console){}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var answer = [,1]';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Sparse array declarations should be avoided.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var answer = [1,]';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var answer = [1,,2]';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Sparse array declarations should be avoided.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'throw \\'a\\'';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].node.type, 'Literal');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'throw {};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].node.type, 'ObjectExpression');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'throw [];';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].node.type, 'ArrayExpression');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'throw undefined;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].node.name, 'undefined');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'throw null;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].node.type, 'Literal');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'throw a';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'throw a.b';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'throw new Error()';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'throw Error()';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'throw (1 ? 2 : 3);';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'throw 1||2;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'throw 1,2;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'a = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'a\\' is not defined.');\n    assert.include(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a = b;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'b\\' is not defined.');\n    assert.include(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a = 1, b = 2; a;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f() { b; }';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'b\\' is not defined.');\n    assert.include(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/*global b*/ function f() { b; }';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/*global b a:false*/  a;  function f() { b; a; }';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function a(){}  a();';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f(b) { b; }';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '(function() { var a = 1; eval(); })();';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a; a = 1; a++;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a; function f() { a = 1; }';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/*global b:true*/ b++;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/*global b:false*/ function f() { b = 1; }';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'b\\' is read only.');\n    assert.include(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/*global b:false*/ function f() { b++; }';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'b\\' is read only.');\n    assert.include(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/*global b*/ b = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'b\\' is read only.');\n    assert.include(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/*global b:false*/ var b = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'b\\' is read only.');\n    assert.include(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'window;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'window\\' is not defined.');\n    assert.include(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/*eslint-env browser*/ window;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/*eslint-env browser*/ window;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/*eslint-env browser:false*/ window;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'window\\' is not defined.');\n    assert.include(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'require(\"a\");';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'require\\' is not defined.');\n    assert.include(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/*eslint-env node*/ require(\"a\");';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '/*eslint-env node:false*/ require(\"a\");';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'require\\' is not defined.');\n    assert.include(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'Object; isNaN();';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'Array = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'Array\\' is read only.');\n    assert.include(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'ArrayBuffer; DataView; Uint32Array;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'Promise; Proxy; Reflect; Symbol;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f() {return\\ntrue;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Unreachable code.');\n    assert.equal(messages[0].node.type, 'ExpressionStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f() {throw e;\\ntrue;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Unreachable code.');\n    assert.equal(messages[0].node.type, 'ExpressionStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'while(true) {throw e;\\ntrue;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Unreachable code.');\n    assert.equal(messages[0].node.type, 'ExpressionStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'while(true) {continue\\ntrue;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Unreachable code.');\n    assert.equal(messages[0].node.type, 'ExpressionStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'while(true) {break\\ntrue;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Unreachable code.');\n    assert.equal(messages[0].node.type, 'ExpressionStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'for(true;;) {continue\\ntrue;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Unreachable code.');\n    assert.equal(messages[0].node.type, 'ExpressionStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'for(true;;) {break\\ntrue;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Unreachable code.');\n    assert.equal(messages[0].node.type, 'ExpressionStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'for(true;;) {throw e;\\ntrue;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Unreachable code.');\n    assert.equal(messages[0].node.type, 'ExpressionStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'for(var p in o) {continue\\ntrue;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Unreachable code.');\n    assert.equal(messages[0].node.type, 'ExpressionStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'for(var p in o) {break\\ntrue;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Unreachable code.');\n    assert.equal(messages[0].node.type, 'ExpressionStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'for(var p in o) {throw e;\\ntrue;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Unreachable code.');\n    assert.equal(messages[0].node.type, 'ExpressionStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f() {return\\nfunction r(){}}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f() {return\\nvar t = r;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f() {return;;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f(a) {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Parameter \\'a\\' is never used.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f() {function g(b) {}}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Parameter \\'b\\' is never used.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '(function f(a) {});';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Parameter \\'a\\' is never used.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '(function f() {function g(b) {}});';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Parameter \\'b\\' is never used.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var v = function(a) {};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Parameter \\'a\\' is never used.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var v = function() {var c = function(a) {};};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Parameter \\'a\\' is never used.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var v = function(a) {};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Parameter \\'a\\' is never used.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var v = function() {var c = function(a) {};};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Parameter \\'a\\' is never used.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var v = {one: function(a) {}};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Parameter \\'a\\' is never used.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var v = {one: function(a) {}};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Parameter \\'a\\' is never used.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var v = {one: function() {var c = {two: function(a) {}};}};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Parameter \\'a\\' is never used.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var v = {one: function() {var c = {two: function(a) {}};}};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Parameter \\'a\\' is never used.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f() {}f(function(a) {});';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Parameter \\'a\\' is never used.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var c = {fn: function(a) {}.bind(this)};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Parameter \\'a\\' is never used.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'define(\\'foo\\', function(a){}.bind(this));';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Parameter \\'a\\' is never used.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '(function f(a) {}).bind(this);';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Parameter \\'a\\' is never used.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '(function f(a) {})();';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Parameter \\'a\\' is never used.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f(a) {var b = a;}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '(function f(a) {var b = a;});';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f(a) {function g() {var b = a;}}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '(function f(a) {function g() {var b = a;}});';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var v = function(a) {var b = a;};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var v = function(a) {var b = a;};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var v = function(a) {var c = function() {var b = a;};};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var v = function(a) {var c = function() {var b = a;};};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var v = {one: function(a) {var b = a;}};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var v = {one: function(a) {var b = a;}};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var v = {one: function(a) {var c = {two: function() {var b = a;}};}};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var v = {one: function(a) {var c = {two: function() {var b = a;}};}};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f() {}f(function(a) {var b = a;});';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var c = {fn: /** @callback */ function(a) {}.bind(this)};';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'define(\\'foo\\', /** @callback */function(a){}.bind(this));';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '(/* @callback */ function f(a) {}).bind(this);';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '(/* @callback */ function f(a) {})();';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'a\\' is never used.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '(function() { var a; }); ';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'a\\' is never used.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f() {var b;} f();';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'b\\' is never used.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a=1; a=2;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'a\\' is never read.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f() {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Function \\'f\\' is never used.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '(function(a) {} ());';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f(a, b) {} f();';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a; a;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f() {} f();';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a; (function() { a; });';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '(function() { var a; (function() { a; }); });';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var b; b=1; a.foo = b++;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'isNaN(Math.sqrt(-1)); Object.keys(a);';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '(function(a) { a; }())';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '(function() { arguments; }())';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'a; var a;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = [\n        1,\n        true,\n        false\n    ];\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'a\\' was used before it was defined.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f() { alert(a); var a; }';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = [\n        1,\n        true,\n        false\n    ];\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'a\\' was used before it was defined.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = '(function() { a; var a; }());';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = [\n        1,\n        true,\n        false\n    ];\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'a\\' was used before it was defined.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'f(); function f(){}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = [\n        1,\n        true,\n        false\n    ];\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'f(); function f() {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = [\n        1,\n        false,\n        true\n    ];\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'f\\' was used before it was defined.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function g() { f(); function f() {} }';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = [\n        1,\n        false,\n        true\n    ];\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'f\\' was used before it was defined.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'a; var a;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = [\n        1,\n        false,\n        true\n    ];\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'a; f; var a; function f() {}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, '\\'a\\' was used before it was defined.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'parseInt()';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, MESSAGE);\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'parseInt(\\'a\\', 10)';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var parseInt; parseInt();';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var parseInt; (function(){ parseInt(); }());';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f() { var parseInt; function g() { parseInt() } }';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a=1';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Missing semicolon.');\n    assert.equal(messages[0].node.type, 'VariableDeclaration');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var a=1, b';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Missing semicolon.');\n    assert.equal(messages[0].node.type, 'VariableDeclaration');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'x()';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Missing semicolon.');\n    assert.equal(messages[0].node.type, 'ExpressionStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'throw 1';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Missing semicolon.');\n    assert.equal(messages[0].node.type, 'ThrowStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'x';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Missing semicolon.');\n    assert.equal(messages[0].node.type, 'ExpressionStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'for (;;) { var x }';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Missing semicolon.');\n    assert.equal(messages[0].node.type, 'VariableDeclaration');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var x;\\ny()';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Missing semicolon.');\n    assert.equal(messages[0].node.type, 'ExpressionStatement');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'f(1)';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].related.type, 'Punctuator');\n    assert.equal(messages[0].related.value, ')');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f() {return f()}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].related.type, 'Punctuator');\n    assert.equal(messages[0].related.value, ')');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f2() {return {}}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].related.type, 'Punctuator');\n    assert.equal(messages[0].related.value, '}');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f3() {return \\'foo\\'}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].related.type, 'String');\n    assert.equal(messages[0].related.value, '\\'foo\\'');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f4() {return 2}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].related.type, 'Numeric');\n    assert.equal(messages[0].related.value, '2');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var o = {f: function() {return 2}};o.f = null;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].related.type, 'Numeric');\n    assert.equal(messages[0].related.value, '2');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var o = {f: function() {return \\'foo\\'}};o.f = null;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].related.type, 'String');\n    assert.equal(messages[0].related.value, '\\'foo\\'');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var o = {f: function() {return {}}};o.f = null;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].related.type, 'Punctuator');\n    assert.equal(messages[0].related.value, '}');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var o = {f: function() {return this.f()}};o.f = null;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].related.type, 'Punctuator');\n    assert.equal(messages[0].related.value, ')');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var o = {f: function() {function inner() {};return inner()}};o.f = null;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].related.type, 'Punctuator');\n    assert.equal(messages[0].related.value, ')');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'foo(function() { x = 1; })';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].related.type, 'Punctuator');\n    assert.equal(messages[0].related.value, ')');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'while(true) {break}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].related.type, 'Keyword');\n    assert.equal(messages[0].related.value, 'break');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'l: while(true) {break l}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].related.type, 'Identifier');\n    assert.equal(messages[0].related.value, 'l');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'while(true) {continue}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].related.type, 'Keyword');\n    assert.equal(messages[0].related.value, 'continue');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'l: while(true) {continue l}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].related.type, 'Identifier');\n    assert.equal(messages[0].related.value, 'l');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'for (var i;;){}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'for (;;)x;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'for (var x in ({}));';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'for (x in ({}));';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f() {} f();';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'function f() {return f();}';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var o = {fo: function() {return this.fo();}};o.fo = null;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var o = {fo: function() {function f() {return f();};}};o.fo = null;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var o = {f: function() {function inner() {}}};o.f = null;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (NaN < 1) var i = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Use the isNaN function to compare with NaN.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (1 < NaN) var i = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Use the isNaN function to compare with NaN.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (NaN > 1) var i = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Use the isNaN function to compare with NaN.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (1 > NaN) var i = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Use the isNaN function to compare with NaN.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (NaN <= 1) var i = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Use the isNaN function to compare with NaN.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (1 <= NaN) var i = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Use the isNaN function to compare with NaN.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (NaN >= 1) var i = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Use the isNaN function to compare with NaN.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (1 >= NaN) var i = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Use the isNaN function to compare with NaN.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (NaN == 1) var i = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Use the isNaN function to compare with NaN.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (1 == NaN) var i = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Use the isNaN function to compare with NaN.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (NaN != 1) var i = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Use the isNaN function to compare with NaN.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (1 != NaN) var i = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Use the isNaN function to compare with NaN.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (NaN === 1) var i = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Use the isNaN function to compare with NaN.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (1 === NaN) var i = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Use the isNaN function to compare with NaN.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (NaN !== 1) var i = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Use the isNaN function to compare with NaN.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'if (1 !== NaN) var i = 1;';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Use the isNaN function to compare with NaN.');\n    assert.equal(messages[0].node.type, 'Identifier');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var answer = (typeof null === object);';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Invalid typeof comparison.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var answer = (typeof foo === undefined);';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Invalid typeof comparison.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var answer = (typeof foo === \\'undefied\\');';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Invalid typeof comparison.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var answer = (\\'object\\' === typeof foo);';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var answer = (\\'undefined\\' === typeof(foo));';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var answer = (\\'undefied\\' === typeof foo);';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 1);\n    assert.equal(messages[0].ruleId, RULE_ID);\n    assert.equal(messages[0].message, 'Invalid typeof comparison.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var str = (\\'val: \\' + typeof(foo));';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var str = (\\'val: \\' & typeof(foo));';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var str = (\\'val: \\' > typeof(foo));';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var str = (\\'val: \\' < typeof(foo));';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var str = (\\'val: \\' <= typeof(foo));';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var topic = 'var str = (\\'val: \\' >= typeof(foo));';\n    var config = { rules: {} };\n    config.rules[RULE_ID] = 1;\n    var messages = eslint.verify(topic, config);\n    assert.equal(messages.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (dojo, dijit) {\n    dijit.getDocumentWindow = function (doc) {\n        return dojo.window.get(doc);\n    };\n    return dijit;\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function (n) {\n    self.attachButtonBehavior(n, self.firstBtnClass, self.firstFunc);\n}",
    "receiverBase": "$$",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (n) {\n    self.attachButtonBehavior(n, self.prevBtnClass, self.prevFunc);\n}",
    "receiverBase": "$$",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (n) {\n    self.attachButtonBehavior(n, self.playBtnClass, self.playFunc);\n}",
    "receiverBase": "$$",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (n) {\n    self.attachButtonBehavior(n, self.nextBtnClass, self.nextFunc);\n}",
    "receiverBase": "$$",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (n) {\n    self.attachButtonBehavior(n, self.lastBtnClass, self.lastFunc);\n}",
    "receiverBase": "$$",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (response) {\n    response.on('data', function (chunk) {\n        result += chunk;\n    });\n    response.on('close', function (err) {\n        if (allowEarlyClose) {\n            passBackControl(response, result);\n        }\n    });\n    response.addListener('end', function () {\n        passBackControl(response, result);\n    });\n}",
    "receiverBase": "http_library",
    "receiverCallee": "request"
  },
  {
    "callback": "function (chunk) {\n    result += chunk;\n}",
    "receiverBase": "response",
    "receiverCallee": "on"
  },
  {
    "callback": "function (err) {\n    if (allowEarlyClose) {\n        passBackControl(response, result);\n    }\n}",
    "receiverBase": "response",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    passBackControl(response, result);\n}",
    "receiverBase": "response",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function (e) {\n    callbackCalled = true;\n    callback(e);\n}",
    "receiverBase": "request",
    "receiverCallee": "on"
  },
  {
    "callback": "function (error, data, response) {\n    if (error)\n        callback(error);\n    else {\n        var results;\n        try {\n            results = JSON.parse(data);\n        } catch (e) {\n            results = querystring.parse(data);\n        }\n        var access_token = results['access_token'];\n        var refresh_token = results['refresh_token'];\n        delete results['refresh_token'];\n        callback(null, access_token, refresh_token, results);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "_request"
  },
  {
    "callback": "function () {\n    $('body').append('<div id=\"dom_test\"></div>');\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    $('#dom_test').remove();\n}",
    "receiverBase": "",
    "receiverCallee": "afterEach"
  },
  {
    "callback": "function () {\n    $.entwine.synchronous_mode();\n    $.entwine.clear_all_rules();\n    $('#dom_test').html('<div id=\"a\" class=\"a b c\"></div>');\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    var a = false;\n    $('#b').entwine({\n        onmatch: function () {\n            a = true;\n        }\n    });\n    expect(a).toBeFalsy();\n    $('#a').after('<div id=\"b\"></div>');\n    expect(a).toBeTruthy();\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var a = 0;\n    $('#b').entwine({\n        onmatch: function () {\n            a = 1;\n        },\n        onunmatch: function () {\n            a = 2;\n        }\n    });\n    expect(a).toEqual(0);\n    $('#a').after('<div id=\"b\"></div>');\n    expect(a).toEqual(1);\n    $('#b').remove();\n    expect(a).toEqual(2);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var a = 0;\n    $('#a.foo').entwine({\n        onmatch: function () {\n            a = 1;\n        }\n    });\n    expect(a).toEqual(0);\n    $('#a').addClass('foo');\n    expect(a).toEqual(1);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function ($) {\n    return {\n        onmatch: function () {\n            b = 1;\n        }\n    };\n}",
    "receiverBase": "$",
    "receiverCallee": "entwine"
  },
  {
    "callback": "function ($) {\n    return {\n        onmatch: function () {\n            d = 1;\n        }\n    };\n}",
    "receiverBase": "$",
    "receiverCallee": "entwine"
  },
  {
    "callback": "function ($) {\n    return {\n        onmatch: function () {\n            b += 1;\n        }\n    };\n}",
    "receiverBase": "$",
    "receiverCallee": "entwine"
  },
  {
    "callback": "function ($) {\n    return {\n        onmatch: function () {\n            this._super();\n            d = 1;\n            this._super();\n        }\n    };\n}",
    "receiverBase": "$",
    "receiverCallee": "entwine"
  },
  {
    "callback": "function () {\n    var a = 0, b = 0;\n    $('#a').entwine({\n        onmatch: function () {\n            a += 1;\n        }\n    });\n    $('#a.a').entwine({\n        onmatch: function () {\n            b += 1;\n        }\n    });\n    expect([\n        a,\n        b\n    ]).toEqual([\n        0,\n        0\n    ]);\n    $('#a').removeClass('a');\n    expect([\n        a,\n        b\n    ]).toEqual([\n        1,\n        0\n    ]);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (list) {\n    keyMapper.createMapper(list, min, function (mapper) {\n        self.keyMapper = mapper;\n    });\n}",
    "receiverBase": "X",
    "receiverCallee": "GetKeyboardMapping"
  },
  {
    "callback": "function (mapper) {\n    self.keyMapper = mapper;\n}",
    "receiverBase": "keyMapper",
    "receiverCallee": "createMapper"
  },
  {
    "callback": "function (result) {\n    self.width = result.width;\n    self.height = result.height;\n}",
    "receiverBase": "X",
    "receiverCallee": "GetGeometry"
  },
  {
    "callback": "function (res) {\n    newX = res.x + x;\n    newY = res.y + y;\n    this.X.WarpPointer(0, this.root, 0, 0, 0, 0, x, y);\n}",
    "receiverBase": "X",
    "receiverCallee": "QueryPointer"
  },
  {
    "callback": "function (test) {\n    test.FakeInput(test.KeyRelease, self.keyMapper.mapKey(keyCode), 0, root, 0, 0);\n}",
    "receiverBase": "X",
    "receiverCallee": "require"
  },
  {
    "callback": "function (test) {\n    test.FakeInput(test.KeyPress, self.keyMapper.mapKey(keyCode), 0, root, 0, 0);\n}",
    "receiverBase": "X",
    "receiverCallee": "require"
  },
  {
    "callback": "function (test) {\n    test.FakeInput(test.ButtonPress, clickCode, 0, root, 0, 0);\n    test.FakeInput(test.ButtonRelease, clickCode, 0, root, 0, 0);\n}",
    "receiverBase": "X",
    "receiverCallee": "require"
  },
  {
    "callback": "function (display) {\n    X = display.client;\n    XManager = new XManager(X);\n    cb(XManager);\n}",
    "receiverBase": "x11",
    "receiverCallee": "createClient"
  }
]