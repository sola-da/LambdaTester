[
  {
    "callback": "function (e) {\n    that.resume(function () {\n        Assert.areSame(struct, e.selection, 'The contentStruct being displayed should be available in the event facade');\n        Assert.isFalse(this.view.get('confirmButtonEnabled'), 'The confirm button should be disabled');\n    });\n}",
    "receiverBase": "view",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    Assert.areSame(struct, e.selection, 'The contentStruct being displayed should be available in the event facade');\n    Assert.isFalse(this.view.get('confirmButtonEnabled'), 'The confirm button should be disabled');\n}",
    "receiverBase": "that",
    "receiverCallee": "resume"
  },
  {
    "callback": "function (name, definition) {\n    if (typeof define == 'function' && typeof define.amd == 'object')\n        define(definition);\n    else\n        this[name] = definition();\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (key) {\n    return ~actual.indexOf(key);\n}",
    "receiverBase": "keys",
    "receiverCallee": "every"
  },
  {
    "callback": "function (key) {\n    return inspect(key);\n}",
    "receiverBase": "keys",
    "receiverCallee": "map"
  },
  {
    "callback": "function alias(name, as) {\n    Assertion.prototype[as] = Assertion.prototype[name];\n    return alias;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function alias(name, as) {\n    assert[as] = assert[name];\n    return alias;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (module, exports, require) {\n    module.exports = function (chai) {\n        chai.expect = function (val, message) {\n            return new chai.Assertion(val, message);\n        };\n    };\n}",
    "receiverBase": "require",
    "receiverCallee": "register"
  },
  {
    "callback": "function (key) {\n    return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n}",
    "receiverBase": "keys",
    "receiverCallee": "map"
  },
  {
    "callback": "function (key) {\n    if (!key.match(/^\\d+$/)) {\n        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));\n    }\n}",
    "receiverBase": "keys",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (line) {\n    return '  ' + line;\n}",
    "receiverBase": "split",
    "receiverCallee": "map"
  },
  {
    "callback": "function (line) {\n    return '   ' + line;\n}",
    "receiverBase": "split",
    "receiverCallee": "map"
  },
  {
    "callback": "function (prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0)\n        numLinesEst++;\n    return prev + cur.length + 1;\n}",
    "receiverBase": "output",
    "receiverCallee": "reduce"
  },
  {
    "callback": "function () {\n    expect(obj.process(5, 6, 7)).to.be(18);\n    expect(obj.process(27, 'St. Elm')).to.be('St. Elm 27');\n    obj.process('Lund', function (city) {\n        expect(city).to.be.equal('Lund');\n    });\n    expect(obj.process([\n        1,\n        2,\n        3\n    ])).to.be('1,2,3');\n    expect(obj.process()).to.be('6private');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (city) {\n    expect(city).to.be.equal('Lund');\n}",
    "receiverBase": "obj",
    "receiverCallee": "process"
  },
  {
    "callback": "function (v, i) {\n    return {\n        tileSource: v.starter.tileSource,\n        clip: v.starter.clip\n    };\n}",
    "receiverBase": "$",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    self.$el = $(self.viewer.element);\n    $.each(self.pages, function (i, v) {\n        v.setTiledImage(self.viewer.world.getItemAt(i));\n        v.addDetails();\n    });\n    self.setMode({\n        mode: 'thumbs',\n        immediately: true\n    });\n}",
    "receiverBase": "viewer",
    "receiverCallee": "addHandler"
  },
  {
    "callback": "function (i, v) {\n    v.setTiledImage(self.viewer.world.getItemAt(i));\n    v.addDetails();\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    if (self.mode === 'scroll') {\n        var result = self.hitTest(self.viewer.viewport.getCenter());\n        if (result) {\n            self.pageIndex = result.index;\n            self.update();\n        }\n    }\n}",
    "receiverBase": "viewer",
    "receiverCallee": "addHandler"
  },
  {
    "callback": "function (event) {\n    self.applyConstraints();\n}",
    "receiverBase": "viewer",
    "receiverCallee": "addHandler"
  },
  {
    "callback": "function (event) {\n    self.applyConstraints();\n}",
    "receiverBase": "viewer",
    "receiverCallee": "addHandler"
  },
  {
    "callback": "function (i, v) {\n    $('.' + v).click(function () {\n        self.setMode({ mode: v });\n    });\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    self.setMode({ mode: v });\n}",
    "receiverBase": "$",
    "receiverCallee": "click"
  },
  {
    "callback": "function () {\n    self.next();\n}",
    "receiverBase": "$",
    "receiverCallee": "click"
  },
  {
    "callback": "function () {\n    self.previous();\n}",
    "receiverBase": "$",
    "receiverCallee": "click"
  },
  {
    "callback": "function () {\n    if (self.$details.prop('checked')) {\n        self.showDetails();\n    } else {\n        self.hideDetails();\n    }\n}",
    "receiverBase": "prop",
    "receiverCallee": "change"
  },
  {
    "callback": "function (event) {\n    if (self.mode === 'thumbs') {\n        return;\n    }\n    if (event.which === 39) {\n        self.next();\n    } else if (event.which === 37) {\n        self.previous();\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "keyup"
  },
  {
    "callback": "function (event) {\n    var info = self.getScrollInfo();\n    if (!info || self.ignoreScroll) {\n        return;\n    }\n    var pos = new OpenSeadragon.Point(info.thumbBounds.getCenter().x, info.thumbBounds.y + info.viewportHeight / 2 + info.viewportMax * info.scrollFactor);\n    self.viewer.viewport.panTo(pos, true);\n}",
    "receiverBase": "$",
    "receiverCallee": "scroll"
  },
  {
    "callback": "function (event) {\n    var pixel = new OpenSeadragon.Point(event.clientX, event.clientY);\n    pixel.y -= self.$scrollCover.position().top;\n    var result = self.hitTest(self.viewer.viewport.pointFromPixel(pixel));\n    self.updateHover(result ? result.index : -1);\n}",
    "receiverBase": "scroll",
    "receiverCallee": "mousemove"
  },
  {
    "callback": "function (event) {\n    var pixel = new OpenSeadragon.Point(event.clientX, event.clientY);\n    pixel.y -= self.$scrollCover.position().top;\n    var result = self.hitTest(self.viewer.viewport.pointFromPixel(pixel));\n    if (result) {\n        self.setMode({\n            mode: 'page',\n            pageIndex: result.index\n        });\n    }\n}",
    "receiverBase": "mousemove",
    "receiverCallee": "click"
  },
  {
    "callback": "function () {\n    var newSize = new OpenSeadragon.Point(self.$el.width(), self.$el.height());\n    self.viewer.viewport.resize(newSize, false);\n    self.setMode({\n        mode: self.mode,\n        immediately: true\n    });\n    self.viewer.forceRedraw();\n    self.viewer.svgOverlay('resize');\n}",
    "receiverBase": "$",
    "receiverCallee": "resize"
  },
  {
    "callback": "function (i, v) {\n    v.removeDetails();\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, v) {\n    v.addDetails();\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, v) {\n    $('.' + v).toggleClass('active', v === self.mode);\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    page.selectAlternate(parseInt(self.$alternates.val(), 10));\n}",
    "receiverBase": "$",
    "receiverCallee": "change"
  },
  {
    "callback": "function (i, v) {\n    if (v.label) {\n        $('<option>').attr('value', i).text(v.label).appendTo(self.$alternates);\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    self.ignoreScroll = false;\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (v, i) {\n    return new self.Page($.extend({ pageIndex: i }, v));\n}",
    "receiverBase": "$",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    App.init();\n}",
    "receiverBase": "$",
    "receiverCallee": "ready"
  },
  {
    "callback": "function (err, stdout, stderr) {\n    console.log('stdout: ' + stdout);\n    console.log('stderr: ' + stderr);\n    if (err) {\n        console.log('ERROR: ' + err);\n        process.exit(1);\n    } else {\n        next();\n    }\n}",
    "receiverBase": "child",
    "receiverCallee": "exec"
  },
  {
    "callback": "function () {\n    sub('git reset --hard origin/master', all);\n}",
    "receiverBase": "",
    "receiverCallee": "sub"
  },
  {
    "callback": "function () {\n    return {\n        init: function () {\n            App.initFancybox();\n        }\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (req, res, next) {\n    if (req.body.code == 'abc123') {\n        var json = JSON.stringify({\n                token_type: 'bearer',\n                access_token: 'aaa-111-ccc'\n            });\n        return res.end(json);\n    }\n    return next(new Error('something went wrong while exchanging grant'));\n}",
    "receiverBase": "server",
    "receiverCallee": "exchange"
  },
  {
    "callback": "function (req, res, next) {\n    next(new Error('something went wrong'));\n}",
    "receiverBase": "server",
    "receiverCallee": "exchange"
  },
  {
    "callback": "function () {\n    expect(token(server).name).to.equal('token');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(function () {\n        token();\n    }).to.throw(TypeError, 'oauth2orize.token middleware requires a server argument');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    token();\n}",
    "receiverBase": "",
    "receiverCallee": "expect"
  },
  {
    "callback": "function () {\n    var response;\n    before(function (done) {\n        chai.connect.use(token(server)).req(function (req) {\n            req.body = {\n                grant_type: 'authorization_code',\n                code: 'abc123'\n            };\n        }).end(function (res) {\n            response = res;\n            done();\n        }).dispatch();\n    });\n    it('should respond', function () {\n        expect(response.body).to.equal('{\"token_type\":\"bearer\",\"access_token\":\"aaa-111-ccc\"}');\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "describe"
  },
  {
    "callback": "function (done) {\n    chai.connect.use(token(server)).req(function (req) {\n        req.body = {\n            grant_type: 'authorization_code',\n            code: 'abc123'\n        };\n    }).end(function (res) {\n        response = res;\n        done();\n    }).dispatch();\n}",
    "receiverBase": "",
    "receiverCallee": "before"
  },
  {
    "callback": "function (req) {\n    req.body = {\n        grant_type: 'authorization_code',\n        code: 'abc123'\n    };\n}",
    "receiverBase": "use",
    "receiverCallee": "req"
  },
  {
    "callback": "function (res) {\n    response = res;\n    done();\n}",
    "receiverBase": "req",
    "receiverCallee": "end"
  },
  {
    "callback": "function () {\n    expect(response.body).to.equal('{\"token_type\":\"bearer\",\"access_token\":\"aaa-111-ccc\"}');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (done) {\n    chai.connect.use(token(server)).req(function (req) {\n        req.body = {\n            grant_type: 'foo',\n            code: 'abc123'\n        };\n    }).next(function (e) {\n        err = e;\n        done();\n    }).dispatch();\n}",
    "receiverBase": "",
    "receiverCallee": "before"
  },
  {
    "callback": "function (req) {\n    req.body = {\n        grant_type: 'foo',\n        code: 'abc123'\n    };\n}",
    "receiverBase": "use",
    "receiverCallee": "req"
  },
  {
    "callback": "function (e) {\n    err = e;\n    done();\n}",
    "receiverBase": "req",
    "receiverCallee": "next"
  },
  {
    "callback": "function () {\n    expect(err).to.be.an.instanceOf(Error);\n    expect(err.constructor.name).to.equal('TokenError');\n    expect(err.message).to.equal('Unsupported grant type: foo');\n    expect(err.code).to.equal('unsupported_grant_type');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var err;\n    before(function (done) {\n        chai.connect.use(token(server)).req(function (req) {\n            req.body = {\n                grant_type: 'next-error',\n                code: 'abc123'\n            };\n        }).next(function (e) {\n            err = e;\n            done();\n        }).dispatch();\n    });\n    it('should error', function () {\n        expect(err).to.be.an.instanceOf(Error);\n        expect(err.message).to.equal('something went wrong');\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "describe"
  },
  {
    "callback": "function (done) {\n    chai.connect.use(token(server)).req(function (req) {\n        req.body = {\n            grant_type: 'next-error',\n            code: 'abc123'\n        };\n    }).next(function (e) {\n        err = e;\n        done();\n    }).dispatch();\n}",
    "receiverBase": "",
    "receiverCallee": "before"
  },
  {
    "callback": "function (req) {\n    req.body = {\n        grant_type: 'next-error',\n        code: 'abc123'\n    };\n}",
    "receiverBase": "use",
    "receiverCallee": "req"
  },
  {
    "callback": "function (e) {\n    err = e;\n    done();\n}",
    "receiverBase": "req",
    "receiverCallee": "next"
  },
  {
    "callback": "function () {\n    expect(err).to.be.an.instanceOf(Error);\n    expect(err.message).to.equal('something went wrong');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    for (var i = curStart.line; i < curEnd.line; i++) {\n        finalCh = lineLength(cm, curStart.line);\n        var tmp = Pos(curStart.line + 1, lineLength(cm, curStart.line + 1));\n        var text = cm.getRange(curStart, tmp);\n        text = text.replace(/\\n\\s*/g, ' ');\n        cm.replaceRange(text, curStart, tmp);\n    }\n    var curFinalPos = Pos(curStart.line, finalCh);\n    cm.setCursor(curFinalPos);\n}",
    "receiverBase": "cm",
    "receiverCallee": "operation"
  },
  {
    "callback": "function (wspace) {\n    var newIndent = indent + (whitespaceLength(wspace) - firstIndent);\n    if (newIndent < 0) {\n        return '';\n    } else if (cm.options.indentWithTabs) {\n        var quotient = Math.floor(newIndent / cm.options.tabSize);\n        return Array(quotient + 1).join('\\t');\n    } else {\n        return Array(newIndent + 1).join(' ');\n    }\n}",
    "receiverBase": "chompedText",
    "receiverCallee": "replace"
  },
  {
    "callback": "function () {\n    repeatFn(cm, CodeMirror.commands.undo, actionArgs.repeat)();\n    cm.setCursor(cm.getCursor('anchor'));\n}",
    "receiverBase": "cm",
    "receiverCallee": "operation"
  },
  {
    "callback": "function () {\n    while (!done) {\n        replace();\n        next();\n    }\n    stop();\n}",
    "receiverBase": "cm",
    "receiverCallee": "operation"
  },
  {
    "callback": "function (name) {\n    return name in object;\n}",
    "receiverBase": "propertyNames",
    "receiverCallee": "filter"
  },
  {
    "callback": "function () {\n    var func = function () {\n        return arguments;\n    };\n    it('should convert arguments to an array', function () {\n        var result = fn.toArray(func(1, 'string', true));\n        expect(fn.is('array', result)).to.be.true;\n        expect(result[0]).to.equal(1);\n        expect(result[1]).to.equal('string');\n        expect(result[2]).to.equal(true);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "describe"
  },
  {
    "callback": "function () {\n    var result = fn.toArray(func(1, 'string', true));\n    expect(fn.is('array', result)).to.be.true;\n    expect(result[0]).to.equal(1);\n    expect(result[1]).to.equal('string');\n    expect(result[2]).to.equal(true);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var elems = [];\n    walk(this, function (depth) {\n        if (depth && this.nodeType == 1 && (!selector || $(this).is(selector))) {\n            var arr = elems[depth] || (elems[depth] = []);\n            arr.push(this);\n        }\n    });\n    return elems.pop();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "map"
  },
  {
    "callback": "function (depth) {\n    if (depth && this.nodeType == 1 && (!selector || $(this).is(selector))) {\n        var arr = elems[depth] || (elems[depth] = []);\n        arr.push(this);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "walk"
  },
  {
    "callback": "function (step, eventData) {\n    for (var name in eventData.data) {\n        if (name.indexOf('secondary') === 0) {\n            eventData.stepData[name] = eventData.data[name];\n        }\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "jmpress"
  },
  {
    "callback": "function (idx, child) {\n    var childStepData = $(child).data('stepData');\n    exchangeIf.call(eventData.jmpress, childStepData, 'siblings', child);\n}",
    "receiverBase": "children",
    "receiverCallee": "each"
  },
  {
    "callback": "function (idx, child) {\n    var childStepData = $(child).data('stepData');\n    exchangeIf.call(eventData.jmpress, childStepData, 'siblings', child);\n}",
    "receiverBase": "children",
    "receiverCallee": "each"
  },
  {
    "callback": "function (error) {\n    var settings = bespin.get('settings');\n    if (!error.jslint || settings.isOn(settings.get('jslint'))) {\n        bespin.publish('message', {\n            msg: 'Syntax error: ' + error.message + ' on line ' + error.row,\n            tag: 'autohide'\n        });\n        self.lineMarkers.push(error);\n    }\n}",
    "receiverBase": "bespin",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    bespin.publish('message', { msg: self.currentMetaInfo.html });\n}",
    "receiverBase": "bespin",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (func) {\n    return func.name == functionName;\n}",
    "receiverBase": "dojo",
    "receiverCallee": "filter"
  },
  {
    "callback": "function () {\n    self.start();\n}",
    "receiverBase": "bespin",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    console.log('Syntax-Check');\n    self.fetch();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    bespin.unsubscribe(onChange);\n    self._started = false;\n}",
    "receiverBase": "bespin",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (data) {\n    for (var i = 0; i < data.errors.length; i++) {\n        bespin.publish('parser:error', {\n            message: data.errors[i].message,\n            row: data.errors[i].line,\n            jslint: data.errors[i].jslint\n        });\n    }\n    self.currentMetaInfo = data.metaInfo;\n}",
    "receiverBase": "parse",
    "receiverCallee": "and"
  },
  {
    "callback": "function () {\n    bespin.register('parser', new bespin.parser.CodeInfo());\n    bespin.get('parser').start();\n    bespin.subscribe('parser:start', function () {\n        bespin.get('parser').start();\n    });\n}",
    "receiverBase": "bespin",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    bespin.get('parser').start();\n}",
    "receiverBase": "bespin",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (ct) {\n    zindex = parseInt(ct.getPositionEl().getStyle('z-index'), 10);\n    return !!zindex;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "findParentBy"
  },
  {
    "callback": "function (v) {\n    if (this.valueField) {\n        var r = this.findRecord(this.valueField, v.inputValue);\n        if (r) {\n            r.checked = true;\n        }\n    }\n}",
    "receiverBase": "Ext",
    "receiverCallee": "each"
  },
  {
    "callback": "function (cb) {\n    vals.push(cb.inputValue);\n}",
    "receiverBase": "Ext",
    "receiverCallee": "each"
  },
  {
    "callback": "function (v) {\n    if (this.valueField) {\n        var r = this.findRecord(this.valueField, v);\n        if (r) {\n            text.push(r.data[this.displayField]);\n            r.checked = true;\n        }\n    }\n}",
    "receiverBase": "Ext",
    "receiverCallee": "each"
  },
  {
    "callback": "function (rec) {\n    var checkbox = new Ext.form.Checkbox({\n            name: rec.data.id + '-checkbox',\n            boxLabel: rec.data[this.displayField],\n            inputValue: rec.data[this.valueField],\n            checked: rec.checked ? rec.checked : false\n        });\n    this.cbgroup.items.add(checkbox);\n    col.add(checkbox);\n}",
    "receiverBase": "Ext",
    "receiverCallee": "each"
  },
  {
    "callback": "function (v) {\n    if (this.valueField) {\n        var r = this.findRecord(this.valueField, v);\n        if (r) {\n            text.push(r.data[this.displayField]);\n        }\n    }\n}",
    "receiverBase": "Ext",
    "receiverCallee": "each"
  },
  {
    "callback": "function (err, content) {\n    if (err)\n        return next(err);\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'application/javascript');\n    res.setHeader('ETag', etag);\n    res.end(i.instrumentSync(content, displayRoot ? path.relative(displayRoot, filename) : filename));\n}",
    "receiverBase": "fs",
    "receiverCallee": "readFile"
  },
  {
    "callback": "function (err, resp) {\n    if (err)\n        return console.log('ERROR', err);\n    console.log(resp);\n    var plotlystream1 = Plotly.stream(token, function () {\n        });\n    var plotlystream2 = Plotly.stream(token2, function () {\n        });\n    streamHz(plotlystream1, 0.5);\n    streamHz(plotlystream2, 1);\n}",
    "receiverBase": "Plotly",
    "receiverCallee": "plot"
  },
  {
    "callback": "function () {\n}",
    "receiverBase": "Plotly",
    "receiverCallee": "stream"
  },
  {
    "callback": "function () {\n}",
    "receiverBase": "Plotly",
    "receiverCallee": "stream"
  },
  {
    "callback": "function () {\n}",
    "receiverBase": "",
    "receiverCallee": "setInterval"
  }
]