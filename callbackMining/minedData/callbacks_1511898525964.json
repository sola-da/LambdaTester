[
  {
    "callback": "function (data) {\n    $scope.loading = false;\n    $scope.photos = _.map(data.photos.photo, function (photo) {\n        var scale = new Transitionable([\n                0.001,\n                0.001,\n                0.001\n            ]);\n        var opacity = new Transitionable(0);\n        return _.extend(photo, {\n            url: flickr.getPhotoUrl(photo),\n            scale: scale,\n            opacity: opacity\n        });\n    });\n}",
    "receiverBase": "promise",
    "receiverCallee": "success"
  },
  {
    "callback": "function (photo) {\n    var scale = new Transitionable([\n            0.001,\n            0.001,\n            0.001\n        ]);\n    var opacity = new Transitionable(0);\n    return _.extend(photo, {\n        url: flickr.getPhotoUrl(photo),\n        scale: scale,\n        opacity: opacity\n    });\n}",
    "receiverBase": "_",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    console.log('API ERROR!', arguments);\n}",
    "receiverBase": "promise",
    "receiverCallee": "error"
  },
  {
    "callback": "function () {\n    it('\\u6D4B\\u8BD5\\u751F\\u6210', function () {\n        var series = group.getSeries();\n        expect(series.length).toBe(3);\n    });\n    it('\\u6D4B\\u8BD5\\u52A0\\u8F7D\\u6570\\u636E', function () {\n        store.load();\n        waits(1000);\n        runs(function () {\n            expect(group.getCount()).toBe(chart.get('data').length);\n        });\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "describe"
  },
  {
    "callback": "function () {\n    var series = group.getSeries();\n    expect(series.length).toBe(3);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    store.load();\n    waits(1000);\n    runs(function () {\n        expect(group.getCount()).toBe(chart.get('data').length);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(group.getCount()).toBe(chart.get('data').length);\n}",
    "receiverBase": "",
    "receiverCallee": "runs"
  },
  {
    "callback": "function () {\n    it('\\u66F4\\u65B0\\u6570\\u636E', function () {\n        var first = store.getResult()[0];\n        first.intelli = 30;\n        first.force = 63;\n        store.update(first);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "describe"
  },
  {
    "callback": "function () {\n    var first = store.getResult()[0];\n    first.intelli = 30;\n    first.force = 63;\n    store.update(first);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (coords, size) {\n    var m = dojox.mdnd.areaManager();\n    if (m._oldIndexArea == -1) {\n        m._oldIndexArea = m._lastValidIndexArea;\n    }\n}",
    "receiverBase": "dojo",
    "receiverCallee": "connect"
  },
  {
    "callback": "function (obj) {\n    var node = obj.item.node;\n    var position = dojo.position(node, true);\n    var y = position.y + position.h / 2;\n    obj.y = y;\n}",
    "receiverBase": "dojo",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    dojox.mdnd.areaManager()._dropMode = new dojox.mdnd.dropMode.OverDropMode();\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (code) {\n    self._onProcessExit(code, errorOutput);\n}",
    "receiverBase": "_process",
    "receiverCallee": "on"
  },
  {
    "callback": "function (err) {\n    if (err.code === 'ENOENT') {\n        retryLimit = 0;\n        errorOutput = 'Can not find the binary ' + cmd + '\\n\\t' + 'Please set env variable ' + self.ENV_CMD;\n    } else {\n        errorOutput += err.toString();\n    }\n}",
    "receiverBase": "_process",
    "receiverCallee": "on"
  },
  {
    "callback": "function (data) {\n    var msg = data.toString();\n    if (msg.indexOf('No such file or directory') !== -1) {\n        retryLimit = 0;\n        errorOutput = 'Can not find the binary ' + cmd + '\\n\\t' + 'Please set env variable ' + self.ENV_CMD;\n    } else {\n        errorOutput += msg;\n    }\n}",
    "receiverBase": "stderr",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    log.info('Trying to start %s again.', self.name);\n    self.start(capturingUrl);\n}",
    "receiverBase": "self",
    "receiverCallee": "_cleanUpTmp"
  },
  {
    "callback": "function () {\n    alert('common2');\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function () {\n    return koast.queryForResources('users').then(function (userArray) {\n        service.all = userArray;\n        userArray.forEach(function (user) {\n            if (user.username) {\n                byUserName[user.username] = user;\n            }\n        });\n    });\n}",
    "receiverBase": "whenAuthenticated",
    "receiverCallee": "then"
  },
  {
    "callback": "function (userArray) {\n    service.all = userArray;\n    userArray.forEach(function (user) {\n        if (user.username) {\n            byUserName[user.username] = user;\n        }\n    });\n}",
    "receiverBase": "queryForResources",
    "receiverCallee": "then"
  },
  {
    "callback": "function (user) {\n    if (user.username) {\n        byUserName[user.username] = user;\n    }\n}",
    "receiverBase": "userArray",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (el, i) {\n    if (matchesSelector && matchesSelector.call(el, ':focus'))\n        index = i;\n}",
    "receiverBase": "angular",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    options.keyboard && $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n    bodyEl.on('click', onBodyClick);\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (key) {\n    if (angular.isDefined(attr[key]))\n        options[key] = attr[key];\n}",
    "receiverBase": "angular",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (newValue, oldValue) {\n    scope.content = newValue;\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function () {\n    dropdown.destroy();\n    options = null;\n    dropdown = null;\n}",
    "receiverBase": "scope",
    "receiverCallee": "$on"
  },
  {
    "callback": "function (address) {\n    if (address.port !== port && port > 0) {\n        return self._nodeDomain.exec('closeServer', self._root).done(function () {\n            return self._nodeDomain.exec('getServer', self._root, port).done(onSuccess).fail(onFailure);\n        }).fail(onFailure);\n    }\n    onSuccess(address);\n}",
    "receiverBase": "exec",
    "receiverCallee": "done"
  },
  {
    "callback": "function () {\n    return self._nodeDomain.exec('getServer', self._root, port).done(onSuccess).fail(onFailure);\n}",
    "receiverBase": "exec",
    "receiverCallee": "done"
  },
  {
    "callback": "function (value, index, collection) {\n    var current = iteratee(value, index, collection);\n    if ((isMin ? current < computed : current > computed) || current === exValue && current === result) {\n        computed = current;\n        result = value;\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "baseEach"
  }
]