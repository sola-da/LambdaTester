[
  {
    "callback": "function (x) {\n    return gonzales.csspToSrc(traverse(x));\n}",
    "receiverBase": "slice",
    "receiverCallee": "map"
  },
  {
    "callback": "function (param) {\n    return new CSSString(param);\n}",
    "receiverBase": "comma",
    "receiverCallee": "map"
  },
  {
    "callback": "function (child) {\n    if (Array.isArray(child)) {\n        return traverse(child);\n    }\n    return child;\n}",
    "receiverBase": "children",
    "receiverCallee": "map"
  },
  {
    "callback": "function (e) {\n    var ele = UI.$(this);\n    if (!ele.data('buttonRadio')) {\n        var obj = UI.buttonRadio(ele, UI.Utils.options(ele.attr('data-@-button-radio'))), target = UI.$(e.target);\n        if (target.is(obj.options.target)) {\n            target.trigger('click');\n        }\n    }\n}",
    "receiverBase": "$html",
    "receiverCallee": "on"
  },
  {
    "callback": "function (e) {\n    var ele = UI.$(this);\n    if (ele.is('a[href=\"#\"]'))\n        e.preventDefault();\n    $this.find($this.options.target).not(ele).removeClass(UI.prefix('@-active')).blur();\n    $this.trigger('change.uk.button', [ele.addClass('@-active')]);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "on"
  },
  {
    "callback": "function (e) {\n    var ele = UI.$(this);\n    if (!ele.data('buttonCheckbox')) {\n        var obj = UI.buttonCheckbox(ele, UI.Utils.options(ele.attr('data-@-button-checkbox'))), target = UI.$(e.target);\n        if (target.is(obj.options.target)) {\n            ele.trigger('change.uk.button', [target.toggleClass('@-active').blur()]);\n        }\n    }\n}",
    "receiverBase": "$html",
    "receiverCallee": "on"
  },
  {
    "callback": "function (e) {\n    if ($(this).is('a[href=\"#\"]'))\n        e.preventDefault();\n    $this.trigger('change.uk.button', [UI.$(this).toggleClass('@-active').blur()]);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "on"
  },
  {
    "callback": "function (e) {\n    var ele = UI.$(this);\n    if (!ele.data('button')) {\n        var obj = UI.button(ele, UI.Utils.options(ele.attr('data-@-button')));\n        ele.trigger('click');\n    }\n}",
    "receiverBase": "$html",
    "receiverCallee": "on"
  },
  {
    "callback": "function (e) {\n    if ($this.element.is('a[href=\"#\"]'))\n        e.preventDefault();\n    $this.toggle();\n    $this.trigger('change.uk.button', [$this.element.blur().hasClass('@-active')]);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    var _Expectation = function _Expectation(url, response) {\n        this.url = url;\n        this.response = response;\n    };\n    return $traceurRuntime.createClass(_Expectation, {}, {});\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (v) {\n    if (Array.isArray(v)) {\n        defs.apply(that, v);\n    } else {\n        defs(v);\n    }\n}",
    "receiverBase": "name",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    Web.when(window['Ext'], function () {\n        alert('Ext Core is here!');\n        alert(Ext);\n    });\n}",
    "receiverBase": "Web",
    "receiverCallee": "onMultiReady"
  },
  {
    "callback": "function () {\n    alert('Ext Core is here!');\n    alert(Ext);\n}",
    "receiverBase": "Web",
    "receiverCallee": "when"
  },
  {
    "callback": "function (n) {\n    t.is('number', typeof n);\n}",
    "receiverBase": "dojo",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (args, node) {\n    this.create(args, node);\n}",
    "receiverBase": "lang",
    "receiverCallee": "extend"
  },
  {
    "callback": "function (newValue, oldValue) {\n    this.playsInline = newValue;\n}",
    "receiverBase": "$scope",
    "receiverCallee": "$watch"
  }
]