[
  {
    "callback": "function () {\n    return db.connectMeta().then(function () {\n        return league.create('Test', 0, undefined, 2013, false);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "before"
  },
  {
    "callback": "function () {\n    return league.create('Test', 0, undefined, 2013, false);\n}",
    "receiverBase": "connectMeta",
    "receiverCallee": "then"
  },
  {
    "callback": "function () {\n    return league.remove(g.lid);\n}",
    "receiverBase": "",
    "receiverCallee": "after"
  },
  {
    "callback": "function (require, a) {\n    if (has('needC')) {\n        require(['c'], function (c) {\n        });\n    } else if (has('needB')) {\n        require(['b'], function (b) {\n        });\n    } else {\n        require(['d'], function (d) {\n        });\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function (c) {\n}",
    "receiverBase": "",
    "receiverCallee": "require"
  },
  {
    "callback": "function (b) {\n}",
    "receiverBase": "",
    "receiverCallee": "require"
  },
  {
    "callback": "function (d) {\n}",
    "receiverBase": "",
    "receiverCallee": "require"
  },
  {
    "callback": "function (code) {\n    jx.rmdirSync(dir);\n    assert.ok(finished, 'Test did not finish!');\n}",
    "receiverBase": "process",
    "receiverCallee": "on"
  },
  {
    "callback": "function (iter) {\n    new C(iter);\n}",
    "receiverBase": "",
    "receiverCallee": "require"
  },
  {
    "callback": "function (val, key) {\n    buggyZero = 1 / key === -Infinity;\n}",
    "receiverBase": "inst",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (ctl) {\n    return ctl.keyPressed();\n}",
    "receiverBase": "symbolTable",
    "receiverCallee": "addNativeFunction"
  },
  {
    "callback": "function (ctl) {\n    return ctl.readKey();\n}",
    "receiverBase": "symbolTable",
    "receiverCallee": "addNativeFunction"
  },
  {
    "callback": "function (ctl, hz) {\n}",
    "receiverBase": "symbolTable",
    "receiverCallee": "addNativeFunction"
  },
  {
    "callback": "function (ctl) {\n}",
    "receiverBase": "symbolTable",
    "receiverCallee": "addNativeFunction"
  },
  {
    "callback": "function ($rootScope, $window) {\n    $rootScope.$on('$stateChangeSuccess', function (evt) {\n        ga('send', 'pageview');\n        $($window).scrollTop(0);\n    });\n    if (navigator.userAgent.match(/IEMobile\\/10\\.0/)) {\n        var msViewportStyle = document.createElement('style');\n        msViewportStyle.appendChild(document.createTextNode('@-ms-viewport{width:auto!important}'));\n        document.getElementsByTagName('head')[0].appendChild(msViewportStyle);\n    }\n}",
    "receiverBase": "config",
    "receiverCallee": "run"
  },
  {
    "callback": "function (evt) {\n    ga('send', 'pageview');\n    $($window).scrollTop(0);\n}",
    "receiverBase": "$rootScope",
    "receiverCallee": "$on"
  },
  {
    "callback": "function (_, prop) {\n    return query[prop];\n}",
    "receiverBase": "src",
    "receiverCallee": "replace"
  },
  {
    "callback": "function () {\n    var data = {};\n    for (var i in window) {\n        if (dojo.isObject(window[i])) {\n            switch (i) {\n            case 'location':\n            case 'console':\n                data[i] = window[i];\n                break;\n            default:\n                break;\n            }\n        } else {\n            data[i] = window[i];\n        }\n    }\n    this.addData(data);\n}",
    "receiverBase": "dojo",
    "receiverCallee": "hitch"
  }
]