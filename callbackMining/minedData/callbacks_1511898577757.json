[
  {
    "callback": "function () {\n}",
    "receiverBase": "",
    "receiverCallee": "transitionEffect"
  },
  {
    "callback": "function () {\n    clear();\n    switch (currentLevel) {\n    case 0:\n        welcome();\n        break;\n    case 1:\n        level1();\n        break;\n    case 2:\n        level2();\n        break;\n    case 3:\n        level3();\n        break;\n    case 4:\n        level4();\n        break;\n    case 5:\n        level5();\n        break;\n    case 6:\n        level6();\n        break;\n    default:\n        credits();\n        break;\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "transitionEffect"
  },
  {
    "callback": "function (ch) {\n    return String.fromCharCode(ch.charCodeAt(0) | 32);\n}",
    "receiverBase": "s",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (ch) {\n    return String.fromCharCode(ch.charCodeAt(0) & ~32);\n}",
    "receiverBase": "s",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (obj) {\n    if (obj !== dst) {\n        forEach(obj, function (value, key) {\n            dst[key] = value;\n        });\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (value, key) {\n    dst[key] = value;\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n}",
    "receiverBase": "",
    "receiverCallee": "extend"
  },
  {
    "callback": "function (value, index, list) {\n    results.push(iterator.call(context, value, index, list));\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (value, key) {\n    delete destination[key];\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (match, nodeName) {\n    return '<' + lowercase(nodeName);\n}",
    "receiverBase": "match",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (keyValue) {\n    if (keyValue) {\n        key_value = keyValue.split('=');\n        key = decodeURIComponent(key_value[0]);\n        obj[key] = isDefined(key_value[1]) ? decodeURIComponent(key_value[1]) : true;\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (value, key) {\n    parts.push(encodeUriQuery(key, true) + (value === true ? '' : '=' + encodeUriQuery(value, true)));\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (name) {\n    names[name] = true;\n    append(document.getElementById(name));\n    name = name.replace(':', '\\\\:');\n    if (element.querySelectorAll) {\n        forEach(element.querySelectorAll('.' + name), append);\n        forEach(element.querySelectorAll('.' + name + '\\\\:'), append);\n        forEach(element.querySelectorAll('[' + name + ']'), append);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (attr) {\n    if (!appElement && names[attr.name]) {\n        appElement = element;\n        module = attr.value;\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    element.data('$injector', injector);\n    compile(element)(scope);\n}",
    "receiverBase": "scope",
    "receiverCallee": "$apply"
  },
  {
    "callback": "function (module) {\n    modules.push(module);\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (letter, pos) {\n    return (pos ? separator : '') + letter.toLowerCase();\n}",
    "receiverBase": "name",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (_, separator, letter, offset) {\n    return offset ? letter.toUpperCase() : letter;\n}",
    "receiverBase": "name",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (eventHandler, type) {\n    removeEventListenerFn(element, type, eventHandler);\n    delete events[type];\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (cssClass) {\n    element.className = trim((' ' + element.className + ' ').replace(/[\\n\\t]/g, ' ').replace(' ' + trim(cssClass) + ' ', ' '));\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (cssClass) {\n    if (!JQLiteHasClass(element, cssClass)) {\n        element.className = trim(element.className + ' ' + trim(cssClass));\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (e) {\n    value.push('' + e);\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (value) {\n    BOOLEAN_ATTR[lowercase(value)] = value;\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (value) {\n    BOOLEAN_ELEMENTS[uppercase(value)] = true;\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (fn) {\n    fn.call(element, event);\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (event) {\n    var ret, target = this, related = event.relatedTarget;\n    if (!related || related !== target && !contains(target, related)) {\n        handle(event, type);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "bindFn"
  },
  {
    "callback": "function (node) {\n    if (index) {\n        parent.insertBefore(node, index.nextSibling);\n    } else {\n        parent.replaceChild(node, element);\n    }\n    index = node;\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (element) {\n    if (element.nodeType === 1)\n        children.push(element);\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (child) {\n    if (element.nodeType === 1 || element.nodeType === 11) {\n        element.appendChild(child);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (child) {\n    if (index) {\n        element.insertBefore(child, index);\n    } else {\n        element.appendChild(child);\n        index = child;\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (node) {\n    parent.insertBefore(node, index.nextSibling);\n    index = node;\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (fn) {\n    fn.call(element, { preventDefault: noop });\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (fn, name) {\n    JQLite.prototype[name] = function (arg1, arg2) {\n        var value;\n        for (var i = 0; i < this.length; i++) {\n            if (value == undefined) {\n                value = fn(this[i], arg1, arg2);\n                if (value !== undefined) {\n                    value = jqLite(value);\n                }\n            } else {\n                JQLiteAddNodes(value, fn(this[i], arg1, arg2));\n            }\n        }\n        return value == undefined ? this : value;\n    };\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (arg) {\n    arg.replace(FN_ARG, function (all, underscore, name) {\n        $inject.push(name);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (all, underscore, name) {\n    $inject.push(name);\n}",
    "receiverBase": "arg",
    "receiverCallee": "replace"
  },
  {
    "callback": "function () {\n    throw Error('Unknown provider: ' + path.join(' <- '));\n}",
    "receiverBase": "",
    "receiverCallee": "createInternalInjector"
  },
  {
    "callback": "function (servicename) {\n    var provider = providerInjector.get(servicename + providerSuffix);\n    return instanceInjector.invoke(provider.$get, provider);\n}",
    "receiverBase": "",
    "receiverCallee": "createInternalInjector"
  },
  {
    "callback": "function (fn) {\n    instanceInjector.invoke(fn || noop);\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (element) {\n    if (!result && lowercase(element.nodeName) === 'a')\n        result = element;\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function autoScrollWatch() {\n    return $location.hash();\n}",
    "receiverBase": "$rootScope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function autoScrollWatchAction() {\n    $rootScope.$evalAsync(scroll);\n}",
    "receiverBase": "$rootScope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function (value) {\n    total = Math.max(parseFloat(value) || 0, total);\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (pollFn) {\n    pollFn();\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function check() {\n    forEach(pollFns, function (pollFn) {\n        pollFn();\n    });\n    pollTimeout = setTimeout(check, interval);\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (pollFn) {\n    pollFn();\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (listener) {\n    listener(self.url());\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    delete pendingDeferIds[timeoutId];\n    completeOutstandingRequest(fn);\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (cache, cacheId) {\n    info[cacheId] = cache.info();\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (fn) {\n    try {\n        fn(value);\n    } catch (e) {\n        $exceptionHandler(e);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    if (!listeners.$$inter) {\n        fn(attrs[key]);\n    }\n}",
    "receiverBase": "$rootScope",
    "receiverCallee": "$evalAsync"
  },
  {
    "callback": "function (node, index) {\n    if (node.nodeType == 3 && node.nodeValue.match(/\\S+/)) {\n        $compileNodes[index] = jqLite(node).wrap('<span></span>').parent()[0];\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (transcludeFn) {\n    return function (cloneFn) {\n        var transcludeScope = scope.$new();\n        transcludeScope.$$transcluded = true;\n        return transcludeFn(transcludeScope, cloneFn).bind('$destroy', bind(transcludeScope, transcludeScope.$destroy));\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (require) {\n    value.push(getControllers(require, $element));\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (value) {\n    scope[scopeName] = value;\n}",
    "receiverBase": "attrs",
    "receiverCallee": "$observe"
  },
  {
    "callback": "function parentValueWatch() {\n    var parentValue = parentGet(parentScope);\n    if (parentValue !== scope[scopeName]) {\n        if (parentValue !== lastValue) {\n            lastValue = scope[scopeName] = parentValue;\n        } else {\n            parentSet(parentScope, parentValue = lastValue = scope[scopeName]);\n        }\n    }\n    return parentValue;\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function (directive) {\n    var locals = {\n            $scope: scope,\n            $element: $element,\n            $attrs: attrs,\n            $transclude: boundTranscludeFn\n        };\n    controller = directive.controller;\n    if (controller == '@') {\n        controller = attrs[directive.name];\n    }\n    $element.data('$' + directive.name + 'Controller', $controller(controller, locals));\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (value, key) {\n    if (key.charAt(0) != '$') {\n        if (src[key]) {\n            value += (key === 'style' ? ';' : ' ') + src[key];\n        }\n        dst.$set(key, value, true, srcAttr[key]);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (value, key) {\n    if (key == 'class') {\n        safeAddClass($element, value);\n        dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;\n    } else if (key == 'style') {\n        $element.attr('style', $element.attr('style') + ';' + value);\n    } else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {\n        dst[key] = value;\n        dstAttr[key] = srcAttr[key];\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    beforeTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement, controller);\n}",
    "receiverBase": "",
    "receiverCallee": "afterTemplateNodeLinkFn"
  },
  {
    "callback": "function (response, code, headers, config) {\n    throw Error('Failed to load template: ' + config.url);\n}",
    "receiverBase": "success",
    "receiverCallee": "error"
  },
  {
    "callback": "function () {\n    beforeTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, controller);\n}",
    "receiverBase": "",
    "receiverCallee": "afterTemplateNodeLinkFn"
  },
  {
    "callback": "function textInterpolateLinkFn(scope, node) {\n    var parent = node.parent(), bindings = parent.data('$binding') || [];\n    bindings.push(interpolateFn);\n    safeAddClass(parent.data('$binding', bindings), 'ng-binding');\n    scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {\n        node[0].nodeValue = value;\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "valueFn"
  },
  {
    "callback": "function interpolateFnWatchAction(value) {\n    node[0].nodeValue = value;\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function attrInterpolateLinkFn(scope, element, attr) {\n    var $$observers = attr.$$observers || (attr.$$observers = {});\n    interpolateFn = $interpolate(attr[name], true);\n    if (!interpolateFn)\n        return;\n    attr[name] = interpolateFn(scope);\n    ($$observers[name] || ($$observers[name] = [])).$$inter = true;\n    (attr.$$observers && attr.$$observers[name].$$scope || scope).$watch(interpolateFn, function interpolateFnWatchAction(value) {\n        attr.$set(name, value);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "valueFn"
  },
  {
    "callback": "function interpolateFnWatchAction(value) {\n    attr.$set(name, value);\n}",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function (path) {\n    return path.charAt(0) == '/' ? path : '/' + path;\n}",
    "receiverBase": "",
    "receiverCallee": "locationGetterSetter"
  },
  {
    "callback": "function (newUrl) {\n    if ($location.absUrl() != newUrl) {\n        if ($rootScope.$broadcast('$locationChangeStart', newUrl, $location.absUrl()).defaultPrevented) {\n            $browser.url($location.absUrl());\n            return;\n        }\n        $rootScope.$evalAsync(function () {\n            var oldUrl = $location.absUrl();\n            $location.$$parse(newUrl);\n            afterLocationChange(oldUrl);\n        });\n        if (!$rootScope.$$phase)\n            $rootScope.$digest();\n    }\n}",
    "receiverBase": "$browser",
    "receiverCallee": "onUrlChange"
  },
  {
    "callback": "function () {\n    var oldUrl = $location.absUrl();\n    $location.$$parse(newUrl);\n    afterLocationChange(oldUrl);\n}",
    "receiverBase": "$rootScope",
    "receiverCallee": "$evalAsync"
  },
  {
    "callback": "function () {\n    if ($rootScope.$broadcast('$locationChangeStart', $location.absUrl(), oldUrl).defaultPrevented) {\n        $location.$$parse(oldUrl);\n    } else {\n        $browser.url($location.absUrl(), currentReplace);\n        afterLocationChange(oldUrl);\n    }\n}",
    "receiverBase": "$rootScope",
    "receiverCallee": "$evalAsync"
  },
  {
    "callback": "function () {\n    var fn = consoleLog('debug');\n    return function () {\n        if (debug) {\n            fn.apply(self, arguments);\n        }\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (arg) {\n    args.push(formatError(arg));\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (self, locals) {\n    return getter(self, locals);\n}",
    "receiverBase": "",
    "receiverCallee": "extend"
  },
  {
    "callback": "function (self, locals) {\n    return fn(self, locals, right);\n}",
    "receiverBase": "",
    "receiverCallee": "extend"
  },
  {
    "callback": "function (self, locals) {\n    return left(self, locals) ? middle(self, locals) : right(self, locals);\n}",
    "receiverBase": "",
    "receiverCallee": "extend"
  },
  {
    "callback": "function (self, locals) {\n    return fn(self, locals, left, right);\n}",
    "receiverBase": "",
    "receiverCallee": "extend"
  },
  {
    "callback": "function (scope, locals, self) {\n    return getter(self || object(scope, locals), locals);\n}",
    "receiverBase": "",
    "receiverCallee": "extend"
  },
  {
    "callback": "function (self, locals) {\n    var o = obj(self, locals), i = indexFn(self, locals), v, p;\n    if (!o)\n        return undefined;\n    v = o[i];\n    if (v && v.then) {\n        p = v;\n        if (!('$$v' in v)) {\n            p.$$v = undefined;\n            p.then(function (val) {\n                p.$$v = val;\n            });\n        }\n        v = v.$$v;\n    }\n    return v;\n}",
    "receiverBase": "",
    "receiverCallee": "extend"
  },
  {
    "callback": "function (val) {\n    p.$$v = val;\n}",
    "receiverBase": "p",
    "receiverCallee": "then"
  },
  {
    "callback": "function (self, locals) {\n    var array = [];\n    for (var i = 0; i < elementFns.length; i++) {\n        array.push(elementFns[i](self, locals));\n    }\n    return array;\n}",
    "receiverBase": "",
    "receiverCallee": "extend"
  },
  {
    "callback": "function (self, locals) {\n    var object = {};\n    for (var i = 0; i < keyValues.length; i++) {\n        var keyValue = keyValues[i];\n        object[keyValue.key] = keyValue.value(self, locals);\n    }\n    return object;\n}",
    "receiverBase": "",
    "receiverCallee": "extend"
  },
  {
    "callback": "function (val) {\n    promise.$$v = val;\n}",
    "receiverBase": "promise",
    "receiverCallee": "then"
  },
  {
    "callback": "function (val) {\n    promise.$$v = val;\n}",
    "receiverBase": "promise",
    "receiverCallee": "then"
  },
  {
    "callback": "function (val) {\n    promise.$$v = val;\n}",
    "receiverBase": "promise",
    "receiverCallee": "then"
  },
  {
    "callback": "function (val) {\n    promise.$$v = val;\n}",
    "receiverBase": "promise",
    "receiverCallee": "then"
  },
  {
    "callback": "function (val) {\n    promise.$$v = val;\n}",
    "receiverBase": "promise",
    "receiverCallee": "then"
  },
  {
    "callback": "function (key, index) {\n    code += 'if(s === null || s === undefined) return s;\\n' + 'l=s;\\n' + 's=' + (index ? 's' : '((k&&k.hasOwnProperty(\"' + key + '\"))?k:s)') + '[\"' + key + '\"]' + ';\\n' + 'if (s && s.then) {\\n' + ' if (!(\"$$v\" in s)) {\\n' + ' p=s;\\n' + ' p.$$v = undefined;\\n' + ' p.then(function(v) {p.$$v=v;});\\n' + '}\\n' + ' s=s.$$v\\n' + '}\\n';\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (callback) {\n    $rootScope.$evalAsync(callback);\n}",
    "receiverBase": "",
    "receiverCallee": "qFactory"
  },
  {
    "callback": "function () {\n    var callback;\n    for (var i = 0, ii = callbacks.length; i < ii; i++) {\n        callback = callbacks[i];\n        value.then(callback[0], callback[1]);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "nextTick"
  },
  {
    "callback": "function () {\n    return makePromise(value, isResolved);\n}",
    "receiverBase": "callbackOutput",
    "receiverCallee": "then"
  },
  {
    "callback": "function (error) {\n    return makePromise(error, false);\n}",
    "receiverBase": "callbackOutput",
    "receiverCallee": "then"
  },
  {
    "callback": "function (value) {\n    return handleCallback(value, true);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "then"
  },
  {
    "callback": "function (error) {\n    return handleCallback(error, false);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "then"
  },
  {
    "callback": "function () {\n    result.resolve(callback(value));\n}",
    "receiverBase": "",
    "receiverCallee": "nextTick"
  },
  {
    "callback": "function () {\n    result.resolve((errback || defaultErrback)(reason));\n}",
    "receiverBase": "",
    "receiverCallee": "nextTick"
  },
  {
    "callback": "function () {\n    ref(value).then(function (value) {\n        if (done)\n            return;\n        done = true;\n        result.resolve(ref(value).then(wrappedCallback, wrappedErrback));\n    }, function (reason) {\n        if (done)\n            return;\n        done = true;\n        result.resolve(wrappedErrback(reason));\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "nextTick"
  },
  {
    "callback": "function (value) {\n    if (done)\n        return;\n    done = true;\n    result.resolve(ref(value).then(wrappedCallback, wrappedErrback));\n}",
    "receiverBase": "ref",
    "receiverCallee": "then"
  },
  {
    "callback": "function (reason) {\n    if (done)\n        return;\n    done = true;\n    result.resolve(wrappedErrback(reason));\n}",
    "receiverBase": "ref",
    "receiverCallee": "then"
  },
  {
    "callback": "function (promise, key) {\n    counter++;\n    ref(promise).then(function (value) {\n        if (results.hasOwnProperty(key))\n            return;\n        results[key] = value;\n        if (!--counter)\n            deferred.resolve(results);\n    }, function (reason) {\n        if (results.hasOwnProperty(key))\n            return;\n        deferred.reject(reason);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (value) {\n    if (results.hasOwnProperty(key))\n        return;\n    results[key] = value;\n    if (!--counter)\n        deferred.resolve(results);\n}",
    "receiverBase": "ref",
    "receiverCallee": "then"
  },
  {
    "callback": "function (reason) {\n    if (results.hasOwnProperty(key))\n        return;\n    deferred.reject(reason);\n}",
    "receiverBase": "ref",
    "receiverCallee": "then"
  },
  {
    "callback": "function (name, index) {\n    dst[name] = match[index + 1];\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (value, key) {\n    locals[key] = isString(value) ? $injector.get(value) : $injector.invoke(value);\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (response) {\n    return response.data;\n}",
    "receiverBase": "get",
    "receiverCallee": "then"
  },
  {
    "callback": "function (locals) {\n    if (next == $route.current) {\n        if (next) {\n            next.locals = locals;\n            copy(next.params, $routeParams);\n        }\n        $rootScope.$broadcast('$routeChangeSuccess', next, last);\n    }\n}",
    "receiverBase": "then",
    "receiverCallee": "then"
  },
  {
    "callback": "function (error) {\n    if (next == $route.current) {\n        $rootScope.$broadcast('$routeChangeError', next, last, error);\n    }\n}",
    "receiverBase": "then",
    "receiverCallee": "then"
  },
  {
    "callback": "function (route, path) {\n    if (!match && (params = switchRouteMatcher($location.path(), path, route))) {\n        match = inherit(route, {\n            params: extend({}, $location.search(), params),\n            pathParams: params\n        });\n        match.$$route = route;\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (segment, i) {\n    if (i == 0) {\n        result.push(segment);\n    } else {\n        var segmentMatch = segment.match(/(\\w+)(.*)/);\n        var key = segmentMatch[1];\n        result.push(params[key]);\n        result.push(segmentMatch[2] || '');\n        delete params[key];\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (line) {\n    i = line.indexOf(':');\n    key = lowercase(trim(line.substr(0, i)));\n    val = trim(line.substr(i + 1));\n    if (key) {\n        if (parsed[key]) {\n            parsed[key] += ', ' + val;\n        } else {\n            parsed[key] = val;\n        }\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (fn) {\n    data = fn(data, headers);\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (interceptorFactory) {\n    reversedInterceptors.unshift(isString(interceptorFactory) ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (interceptorFactory, index) {\n    var responseFn = isString(interceptorFactory) ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory);\n    reversedInterceptors.splice(index, 0, {\n        response: function (response) {\n            return responseFn($q.when(response));\n        },\n        responseError: function (response) {\n            return responseFn($q.reject(response));\n        }\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (interceptor) {\n    if (interceptor.request || interceptor.requestError) {\n        chain.unshift(interceptor.request, interceptor.requestError);\n    }\n    if (interceptor.response || interceptor.responseError) {\n        chain.push(interceptor.response, interceptor.responseError);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (response) {\n    fn(response.data, response.status, response.headers, config);\n}",
    "receiverBase": "promise",
    "receiverCallee": "then"
  },
  {
    "callback": "function (response) {\n    fn(response.data, response.status, response.headers, config);\n}",
    "receiverBase": "promise",
    "receiverCallee": "then"
  },
  {
    "callback": "function (name) {\n    $http[name] = function (url, config) {\n        return $http(extend(config || {}, {\n            method: name,\n            url: url\n        }));\n    };\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (name) {\n    $http[name] = function (url, data, config) {\n        return $http(extend(config || {}, {\n            method: name,\n            url: url,\n            data: data\n        }));\n    };\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (value, key) {\n    if (value == null || value == undefined)\n        return;\n    if (!isArray(value))\n        value = [value];\n    forEach(value, function (v) {\n        if (isObject(v)) {\n            v = toJson(v);\n        }\n        parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(v));\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "forEachSorted"
  },
  {
    "callback": "function (v) {\n    if (isObject(v)) {\n        v = toJson(v);\n    }\n    parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(v));\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    if (callbacks[callbackId].data) {\n        completeRequest(callback, 200, callbacks[callbackId].data);\n    } else {\n        completeRequest(callback, status || -2);\n    }\n    delete callbacks[callbackId];\n}",
    "receiverBase": "",
    "receiverCallee": "jsonpReq"
  },
  {
    "callback": "function (value, key) {\n    if (value)\n        xhr.setRequestHeader(key, value);\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (header) {\n    var value = xhr.getResponseHeader(header);\n    if (value) {\n        responseHeaders += header + ': ' + value + '\\n';\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    try {\n        deferred.resolve(fn());\n    } catch (e) {\n        deferred.reject(e);\n        $exceptionHandler(e);\n    }\n    if (!skipApply)\n        $rootScope.$apply();\n}",
    "receiverBase": "$browser",
    "receiverCallee": "defer"
  },
  {
    "callback": "function () {\n    if (!expression[key])\n        return;\n    var path = key;\n    predicates.push(function (value) {\n        return search(value, expression[path]);\n    });\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (value) {\n    return search(value, expression[path]);\n}",
    "receiverBase": "predicates",
    "receiverCallee": "push"
  },
  {
    "callback": "function () {\n    if (!expression[key])\n        return;\n    var path = key;\n    predicates.push(function (value) {\n        return search(getter(value, path), expression[path]);\n    });\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (value) {\n    return search(getter(value, path), expression[path]);\n}",
    "receiverBase": "predicates",
    "receiverCallee": "push"
  },
  {
    "callback": "function (value) {\n    fn = DATE_FORMATS[value];\n    text += fn ? fn(date, $locale.DATETIME_FORMATS) : value.replace(/(^'|'$)/g, '').replace(/''/g, '\\'');\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (predicate) {\n    var descending = false, get = predicate || identity;\n    if (isString(predicate)) {\n        if (predicate.charAt(0) == '+' || predicate.charAt(0) == '-') {\n            descending = predicate.charAt(0) == '-';\n            predicate = predicate.substring(1);\n        }\n        get = $parse(predicate);\n    }\n    return reverseComparator(function (a, b) {\n        return compare(get(a), get(b));\n    }, descending);\n}",
    "receiverBase": "",
    "receiverCallee": "map"
  },
  {
    "callback": "function (a, b) {\n    return compare(get(a), get(b));\n}",
    "receiverBase": "",
    "receiverCallee": "reverseComparator"
  },
  {
    "callback": "function (event) {\n    if (!element.attr('href')) {\n        event.preventDefault();\n    }\n}",
    "receiverBase": "element",
    "receiverCallee": "bind"
  },
  {
    "callback": "function ngBooleanAttrWatchAction(value) {\n    attr.$set(attrName, !!value);\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function (value) {\n    if (!value)\n        return;\n    attr.$set(attrName, value);\n    if (msie)\n        element.prop(attrName, attr[attrName]);\n}",
    "receiverBase": "attr",
    "receiverCallee": "$observe"
  },
  {
    "callback": "function (queue, validationToken) {\n    form.$setValidity(validationToken, true, control);\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (control) {\n    control.$setPristine();\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    $timeout(function () {\n        removeEventListenerFn(formElement[0], 'submit', preventDefaultListener);\n    }, 0, false);\n}",
    "receiverBase": "formElement",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    removeEventListenerFn(formElement[0], 'submit', preventDefaultListener);\n}",
    "receiverBase": "",
    "receiverCallee": "$timeout"
  },
  {
    "callback": "function () {\n    parentFormCtrl.$removeControl(controller);\n    if (alias) {\n        scope[alias] = undefined;\n    }\n    extend(controller, nullFormCtrl);\n}",
    "receiverBase": "formElement",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    ctrl.$setViewValue(value);\n}",
    "receiverBase": "scope",
    "receiverCallee": "$apply"
  },
  {
    "callback": "function () {\n    listener();\n    timeout = null;\n}",
    "receiverBase": "$browser",
    "receiverCallee": "defer"
  },
  {
    "callback": "function (event) {\n    var key = event.keyCode;\n    if (key === 91 || 15 < key && key < 19 || 37 <= key && key <= 40)\n        return;\n    deferListener();\n}",
    "receiverBase": "element",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (value) {\n    var empty = isEmpty(value);\n    if (empty || NUMBER_REGEXP.test(value)) {\n        ctrl.$setValidity('number', true);\n        return value === '' ? null : empty ? value : parseFloat(value);\n    } else {\n        ctrl.$setValidity('number', false);\n        return undefined;\n    }\n}",
    "receiverBase": "$parsers",
    "receiverCallee": "push"
  },
  {
    "callback": "function (value) {\n    return isEmpty(value) ? '' : '' + value;\n}",
    "receiverBase": "$formatters",
    "receiverCallee": "push"
  },
  {
    "callback": "function (value) {\n    if (isEmpty(value) || isNumber(value)) {\n        ctrl.$setValidity('number', true);\n        return value;\n    } else {\n        ctrl.$setValidity('number', false);\n        return undefined;\n    }\n}",
    "receiverBase": "$formatters",
    "receiverCallee": "push"
  },
  {
    "callback": "function () {\n    if (element[0].checked) {\n        scope.$apply(function () {\n            ctrl.$setViewValue(attr.value);\n        });\n    }\n}",
    "receiverBase": "element",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    ctrl.$setViewValue(attr.value);\n}",
    "receiverBase": "scope",
    "receiverCallee": "$apply"
  },
  {
    "callback": "function () {\n    scope.$apply(function () {\n        ctrl.$setViewValue(element[0].checked);\n    });\n}",
    "receiverBase": "element",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    ctrl.$setViewValue(element[0].checked);\n}",
    "receiverBase": "scope",
    "receiverCallee": "$apply"
  },
  {
    "callback": "function (value) {\n    return value === trueValue;\n}",
    "receiverBase": "$formatters",
    "receiverCallee": "push"
  },
  {
    "callback": "function (value) {\n    return value ? trueValue : falseValue;\n}",
    "receiverBase": "$parsers",
    "receiverCallee": "push"
  },
  {
    "callback": "function (fn) {\n    value = fn(value);\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (listener) {\n    try {\n        listener();\n    } catch (e) {\n        $exceptionHandler(e);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function ngModelWatch() {\n    var value = ngModelGet($scope);\n    if (ctrl.$modelValue !== value) {\n        var formatters = ctrl.$formatters, idx = formatters.length;\n        ctrl.$modelValue = value;\n        while (idx--) {\n            value = formatters[idx](value);\n        }\n        if (ctrl.$viewValue !== value) {\n            ctrl.$viewValue = value;\n            ctrl.$render();\n        }\n    }\n}",
    "receiverBase": "$scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function () {\n    formCtrl.$removeControl(modelCtrl);\n}",
    "receiverBase": "element",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    scope.$eval(attr.ngChange);\n}",
    "receiverBase": "$viewChangeListeners",
    "receiverCallee": "push"
  },
  {
    "callback": "function () {\n    validator(ctrl.$viewValue);\n}",
    "receiverBase": "attr",
    "receiverCallee": "$observe"
  },
  {
    "callback": "function (value) {\n    if (value)\n        list.push(trim(value));\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (value) {\n    if (isArray(value)) {\n        return value.join(', ');\n    }\n    return undefined;\n}",
    "receiverBase": "$formatters",
    "receiverCallee": "push"
  },
  {
    "callback": "function valueWatchAction(value) {\n    attr.$set('value', value, false);\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function (scope, element, attr) {\n    element.addClass('ng-binding').data('$binding', attr.ngBind);\n    scope.$watch(attr.ngBind, function ngBindWatchAction(value) {\n        element.text(value == undefined ? '' : value);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "ngDirective"
  },
  {
    "callback": "function ngBindWatchAction(value) {\n    element.text(value == undefined ? '' : value);\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function (value) {\n    element.text(value);\n}",
    "receiverBase": "attr",
    "receiverCallee": "$observe"
  },
  {
    "callback": "function ngBindHtmlUnsafeWatchAction(value) {\n    element.html(value || '');\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function (value) {\n    var ngClass = scope.$eval(attr[name]);\n    ngClassWatchAction(ngClass, ngClass);\n}",
    "receiverBase": "attr",
    "receiverCallee": "$observe"
  },
  {
    "callback": "function ($index, old$index) {\n    var mod = $index & 1;\n    if (mod !== old$index & 1) {\n        if (mod === selector) {\n            addClass(scope.$eval(attr[name]));\n        } else {\n            removeClass(scope.$eval(attr[name]));\n        }\n    }\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function (v, k) {\n    if (v)\n        return k;\n}",
    "receiverBase": "",
    "receiverCallee": "map"
  },
  {
    "callback": "function (v, k) {\n    if (v)\n        return k;\n}",
    "receiverBase": "",
    "receiverCallee": "map"
  },
  {
    "callback": "function (event) {\n    scope.$apply(function () {\n        fn(scope, { $event: event });\n    });\n}",
    "receiverBase": "element",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    fn(scope, { $event: event });\n}",
    "receiverBase": "scope",
    "receiverCallee": "$apply"
  },
  {
    "callback": "function (scope, element, attrs) {\n    element.bind('submit', function () {\n        scope.$apply(attrs.ngSubmit);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "ngDirective"
  },
  {
    "callback": "function () {\n    scope.$apply(attrs.ngSubmit);\n}",
    "receiverBase": "element",
    "receiverCallee": "bind"
  },
  {
    "callback": "function ngIfWatchAction(value) {\n    if (childElement) {\n        animate.leave(childElement);\n        childElement = undefined;\n    }\n    if (childScope) {\n        childScope.$destroy();\n        childScope = undefined;\n    }\n    if (toBoolean(value)) {\n        childScope = $scope.$new();\n        transclude(childScope, function (clone) {\n            childElement = clone;\n            animate.enter(clone, $element.parent(), $element);\n        });\n    }\n}",
    "receiverBase": "$scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function (clone) {\n    childElement = clone;\n    animate.enter(clone, $element.parent(), $element);\n}",
    "receiverBase": "",
    "receiverCallee": "transclude"
  },
  {
    "callback": "function () {\n    if (thisChangeId === changeCounter)\n        clearContent();\n}",
    "receiverBase": "success",
    "receiverCallee": "error"
  },
  {
    "callback": "function (expression, key) {\n    whensExpFns[key] = $interpolate(expression.replace(BRACE, startSymbol + numberExp + '-' + offset + endSymbol));\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function ngPluralizeWatch() {\n    var value = parseFloat(scope.$eval(numberExp));\n    if (!isNaN(value)) {\n        if (!(value in whens))\n            value = $locale.pluralCat(value - offset);\n        return whensExpFns[value](scope, element, true);\n    } else {\n        return '';\n    }\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function ngPluralizeWatchAction(newVal) {\n    element.text(newVal);\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function (block) {\n    if (block && block.element)\n        lastBlockMap[block.id] = block;\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (clone) {\n    animate.enter(clone, null, cursor);\n    cursor = clone;\n    block.scope = childScope;\n    block.element = clone;\n    nextBlockMap[block.id] = block;\n}",
    "receiverBase": "",
    "receiverCallee": "linker"
  },
  {
    "callback": "function ngShowWatchAction(value) {\n    animate[toBoolean(value) ? 'show' : 'hide'](element);\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function ngHideWatchAction(value) {\n    animate[toBoolean(value) ? 'hide' : 'show'](element);\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function (scope, element, attr) {\n    scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {\n        if (oldStyles && newStyles !== oldStyles) {\n            forEach(oldStyles, function (val, style) {\n                element.css(style, '');\n            });\n        }\n        if (newStyles)\n            element.css(newStyles);\n    }, true);\n}",
    "receiverBase": "",
    "receiverCallee": "ngDirective"
  },
  {
    "callback": "function ngStyleWatchAction(newStyles, oldStyles) {\n    if (oldStyles && newStyles !== oldStyles) {\n        forEach(oldStyles, function (val, style) {\n            element.css(style, '');\n        });\n    }\n    if (newStyles)\n        element.css(newStyles);\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function (val, style) {\n    element.css(style, '');\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (selectedTransclude) {\n    var selectedScope = scope.$new();\n    selectedScopes.push(selectedScope);\n    selectedTransclude.transclude(selectedScope, function (caseElement) {\n        var anchor = selectedTransclude.element;\n        selectedElements.push(caseElement);\n        animate.enter(caseElement, anchor.parent(), anchor);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (caseElement) {\n    var anchor = selectedTransclude.element;\n    selectedElements.push(caseElement);\n    animate.enter(caseElement, anchor.parent(), anchor);\n}",
    "receiverBase": "selectedTransclude",
    "receiverCallee": "transclude"
  },
  {
    "callback": "function (clone) {\n    $element.append(clone);\n}",
    "receiverBase": "",
    "receiverCallee": "$transclude"
  },
  {
    "callback": "function () {\n    self.renderUnknownOption = noop;\n}",
    "receiverBase": "$scope",
    "receiverCallee": "$on"
  },
  {
    "callback": "function () {\n    requiredValidator(ngModelCtrl.$viewValue);\n}",
    "receiverBase": "attr",
    "receiverCallee": "$observe"
  },
  {
    "callback": "function () {\n    scope.$apply(function () {\n        if (unknownOption.parent())\n            unknownOption.remove();\n        ngModelCtrl.$setViewValue(selectElement.val());\n    });\n}",
    "receiverBase": "selectElement",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    if (unknownOption.parent())\n        unknownOption.remove();\n    ngModelCtrl.$setViewValue(selectElement.val());\n}",
    "receiverBase": "scope",
    "receiverCallee": "$apply"
  },
  {
    "callback": "function (option) {\n    option.selected = isDefined(items.get(option.value));\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function selectMultipleWatch() {\n    if (!equals(lastView, ctrl.$viewValue)) {\n        lastView = copy(ctrl.$viewValue);\n        ctrl.$render();\n    }\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function () {\n    scope.$apply(function () {\n        var array = [];\n        forEach(selectElement.find('option'), function (option) {\n            if (option.selected) {\n                array.push(option.value);\n            }\n        });\n        ctrl.$setViewValue(array);\n    });\n}",
    "receiverBase": "selectElement",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    var array = [];\n    forEach(selectElement.find('option'), function (option) {\n        if (option.selected) {\n            array.push(option.value);\n        }\n    });\n    ctrl.$setViewValue(array);\n}",
    "receiverBase": "scope",
    "receiverCallee": "$apply"
  },
  {
    "callback": "function (option) {\n    if (option.selected) {\n        array.push(option.value);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function interpolateWatchAction(newVal, oldVal) {\n    attr.$set('value', newVal);\n    if (newVal !== oldVal)\n        selectCtrl.removeOption(oldVal);\n    selectCtrl.addOption(newVal);\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function () {\n    selectCtrl.removeOption(attr.value);\n}",
    "receiverBase": "element",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    angularInit(document, bootstrap);\n}",
    "receiverBase": "jqLite",
    "receiverCallee": "ready"
  },
  {
    "callback": "function (m0, m1) {\n    return m1.toUpperCase();\n}",
    "receiverBase": "property",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (m0, m1, m2, m3) {\n    var str = (m1 ? '-' + m1.toLowerCase() : '') + m2;\n    if (m3) {\n        str += '-' + m3.toLowerCase();\n    }\n    return str;\n}",
    "receiverBase": "property",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (val) {\n    var property = val + 'Transition';\n    if (property in DOCUMENT[DOCUMENT_ELEMENT].style) {\n        CAMEL_VENDOR_PREFIX = val;\n        VENDOR_PREFIX = Transition._toHyphen(val) + '-';\n        Transition.useNative = true;\n        Transition.supported = true;\n        Transition._VENDOR_PREFIX = val;\n    }\n}",
    "receiverBase": "Array",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    anim._onNativeEnd.call(node, {\n        propertyName: prop,\n        elapsedTime: dur\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    config.on.end.call(nodeInstance, data);\n    if (callback) {\n        callback.call(nodeInstance, data);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    callback.call(nodeInstance, data);\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    $('#g-dialog-container').modal('hide');\n    params.confirmCallback();\n}",
    "receiverBase": "unbind",
    "receiverCallee": "click"
  },
  {
    "callback": "function (el, i) {\n    var aux = el.split('='), o = {}, val;\n    if (aux.length > 1) {\n        val = decodeURIComponent(el.substr(aux[0].length + 1));\n    }\n    params[decodeURIComponent(aux[0])] = val;\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (m) {\n    return m.replace(/^\\s+/, '').replace(/\\s+$/, '');\n}",
    "receiverBase": "chain",
    "receiverCallee": "map"
  },
  {
    "callback": "function (c) {\n    var arr = c.split('='), key = arr[0], value = null, size = _.size(arr);\n    if (size > 1) {\n        value = arr.slice(1).join('');\n    }\n    cookies[key] = value;\n}",
    "receiverBase": "map",
    "receiverCallee": "each"
  },
  {
    "callback": "function (value, key) {\n    if (key === name) {\n        cookie = value;\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (resp) {\n    if (resp.serverStartDate !== girder.restartServer._lastStartDate) {\n        girder.restartServer._reloadWindow();\n    } else {\n        window.setTimeout(waitForServer, 1000);\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    window.setTimeout(waitForServer, 1000);\n}",
    "receiverBase": "_",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (resp) {\n    girder.restartServer._lastStartDate = resp.serverStartDate;\n    girder.restartServer._callSystemRestart();\n    girder.events.trigger('g:alert', {\n        icon: 'cw',\n        text: 'Restarting server',\n        type: 'warning',\n        timeout: 60000\n    });\n    waitForServer();\n}",
    "receiverBase": "_",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    if (window.marked) {\n        marked.setOptions({ sanitize: true });\n        return function (val, el) {\n            if (el) {\n                $(el).html(marked(val));\n            } else {\n                return marked(val);\n            }\n        };\n    } else {\n        return function () {\n            throw new Error('You must include the marked library to call this function');\n        };\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    var _pluginConfigRoutes = {};\n    girder.exposePluginConfig = function (pluginName, route) {\n        _pluginConfigRoutes[pluginName] = route;\n    };\n    girder.getPluginConfigRoute = function (pluginName) {\n        return _pluginConfigRoutes[pluginName];\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (event, xhr, opts) {\n    restXhrCount += 1;\n    xhr.girderXhrNumber = restXhrCount;\n    restXhrPool[restXhrCount] = xhr;\n}",
    "receiverBase": "$",
    "receiverCallee": "ajaxSend"
  },
  {
    "callback": "function (event, xhr, opts) {\n    var num = xhr.girderXhrNumber;\n    if (num && restXhrPool[num]) {\n        delete restXhrPool[num];\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "ajaxComplete"
  },
  {
    "callback": "function (xhr) {\n    return xhr.girder && xhr.girder[category];\n}",
    "receiverBase": "_",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (xhr, num, pool) {\n    if (category && (!xhr.girder || !xhr.girder[category])) {\n        return;\n    }\n    if (xhr.abort) {\n        xhr.abort();\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (content) {\n    text.finishLoad(name, parsed.strip, content, onLoad);\n}",
    "receiverBase": "text",
    "receiverCallee": "get"
  },
  {
    "callback": "function (err) {\n    if (onLoad.error) {\n        onLoad.error(err);\n    }\n}",
    "receiverBase": "text",
    "receiverCallee": "get"
  },
  {
    "callback": "function (content) {\n    text.finishLoad(parsed.moduleName + '.' + parsed.ext, parsed.strip, content, onLoad);\n}",
    "receiverBase": "",
    "receiverCallee": "req"
  },
  {
    "callback": "function (value) {\n    var textWrite = function (contents) {\n        return write(fileName, contents);\n    };\n    textWrite.asModule = function (moduleName, contents) {\n        return write.asModule(moduleName, fileName, contents);\n    };\n    text.write(pluginName, nonStripName, textWrite, config);\n}",
    "receiverBase": "text",
    "receiverCallee": "load"
  },
  {
    "callback": "function (i) {\n    doHandle(processedData, data, i);\n}",
    "receiverBase": "dojo",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (error) {\n    dojo.disconnect(handle);\n    errorHandler(error, request);\n}",
    "receiverBase": "deferred",
    "receiverCallee": "addErrback"
  },
  {
    "callback": "function (i, idx) {\n    arr[idx + start] = i;\n}",
    "receiverBase": "dojo",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (item) {\n    return start >= item.start && end <= item.end;\n}",
    "receiverBase": "dojo",
    "receiverCallee": "some"
  },
  {
    "callback": "function (err, playing) {\n    console.log([\n        err,\n        playing\n    ]);\n}",
    "receiverBase": "sonos",
    "receiverCallee": "queueNext"
  },
  {
    "callback": "function (resolved) {\n    resolved.registerService(serviceName, callback, opt_jsonEncoded);\n}",
    "receiverBase": "deferred_",
    "receiverCallee": "addCallback"
  },
  {
    "callback": "function (resolved) {\n    resolved.registerDefaultService(callback);\n}",
    "receiverBase": "deferred_",
    "receiverCallee": "addCallback"
  },
  {
    "callback": "function (resolved) {\n    resolved.send(serviceName, payload);\n}",
    "receiverBase": "deferred_",
    "receiverCallee": "addCallback"
  },
  {
    "callback": "function () {\n    PanZoomService.unregisterAPI($scope.elementId);\n    scopeIsDestroyed = true;\n}",
    "receiverBase": "$scope",
    "receiverCallee": "$on"
  },
  {
    "callback": "function (result) {\n    return result.raw.resultType === 'component' ? false : result;\n}",
    "receiverBase": "YArray",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (result) {\n    var raw = Y.merge(result.raw), desc = raw.description || '';\n    desc = Node.create('<div>' + desc + '</div>').get('text');\n    if (desc.length > 65) {\n        desc = Y.Escape.html(desc.substr(0, 65)) + ' &hellip;';\n    } else {\n        desc = Y.Escape.html(desc);\n    }\n    raw['class'] || (raw['class'] = '');\n    raw.description = desc;\n    raw.name = result.highlighted;\n    return Lang.sub(this.RESULT_TEMPLATE, raw);\n}",
    "receiverBase": "YArray",
    "receiverCallee": "map"
  },
  {
    "callback": "function (response) {\n    var recved = 0;\n    response.on('data', function (chunk) {\n        recved += chunk.length;\n        console.log('Response data.');\n    });\n    response.on('end', function () {\n        console.log('Response end.');\n        loadDom();\n    });\n}",
    "receiverBase": "https",
    "receiverCallee": "get"
  },
  {
    "callback": "function (chunk) {\n    recved += chunk.length;\n    console.log('Response data.');\n}",
    "receiverBase": "response",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    console.log('Response end.');\n    loadDom();\n}",
    "receiverBase": "response",
    "receiverCallee": "on"
  },
  {
    "callback": "function (e) {\n    console.log('Error on get.');\n}",
    "receiverBase": "req",
    "receiverCallee": "on"
  },
  {
    "callback": "function (err, items) {\n    if (err)\n        return mkdir.mkdirs(dir, callback);\n    items = items.map(function (item) {\n        return path.join(dir, item);\n    });\n    deleteItem();\n    function deleteItem() {\n        var item = items.pop();\n        if (!item)\n            return callback();\n        remove.remove(item, function (err) {\n            if (err)\n                return callback(err);\n            deleteItem();\n        });\n    }\n}",
    "receiverBase": "fs",
    "receiverCallee": "readdir"
  },
  {
    "callback": "function (item) {\n    return path.join(dir, item);\n}",
    "receiverBase": "items",
    "receiverCallee": "map"
  },
  {
    "callback": "function (err) {\n    if (err)\n        return callback(err);\n    deleteItem();\n}",
    "receiverBase": "remove",
    "receiverCallee": "remove"
  },
  {
    "callback": "function (item) {\n    item = path.join(dir, item);\n    remove.removeSync(item);\n}",
    "receiverBase": "items",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (err) {\n    callback(err, baby);\n}",
    "receiverBase": "baby",
    "receiverCallee": "save"
  },
  {
    "callback": "function (err, b) {\n    if (err)\n        return callback(err);\n    b.threads.push(baby._id);\n    b.save(function (err) {\n        callback(err, baby);\n    });\n}",
    "receiverBase": "board",
    "receiverCallee": "findById"
  },
  {
    "callback": "function (err) {\n    callback(err, baby);\n}",
    "receiverBase": "b",
    "receiverCallee": "save"
  },
  {
    "callback": "function (err, u) {\n    if (err)\n        return callback(err);\n    u.threads.push(baby._id);\n    u.save(function (err) {\n        callback(err, baby);\n    });\n}",
    "receiverBase": "user",
    "receiverCallee": "findById"
  },
  {
    "callback": "function (err) {\n    callback(err, baby);\n}",
    "receiverBase": "u",
    "receiverCallee": "save"
  },
  {
    "callback": "function (err, count) {\n    if (err)\n        return callback(err);\n    cursor.pager.max = Math.ceil(count / limit);\n    cursor.query.populate('lz').populate('board').sort('-pined').sort('-pubdate').exec(function (err, threads) {\n        callback(err, threads, cursor.pager);\n    });\n}",
    "receiverBase": "count",
    "receiverCallee": "exec"
  },
  {
    "callback": "function (err, threads) {\n    callback(err, threads, cursor.pager);\n}",
    "receiverBase": "sort",
    "receiverCallee": "exec"
  },
  {
    "callback": "function (err, thread) {\n    if (err)\n        return callback(err);\n    if (!thread)\n        return callback(null, false);\n    if (thread.lz == uid)\n        return callback(null, true, thread);\n    return user.findById(uid).exec(function (err, u) {\n        return callback(err, u && u.type == 'admin', thread);\n    });\n}",
    "receiverBase": "populate",
    "receiverCallee": "exec"
  },
  {
    "callback": "function (err, u) {\n    return callback(err, u && u.type == 'admin', thread);\n}",
    "receiverBase": "findById",
    "receiverCallee": "exec"
  }
]