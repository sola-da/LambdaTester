[
  {
    "callback": "function (f) {\n    var field = this.form.findField(f.name);\n    if (field) {\n        var value = field.getValue();\n        if (value.getGroupValue) {\n            value = value.getGroupValue();\n        } else if (field.eachItem) {\n            value = [];\n            field.eachItem(function (item) {\n                value.push(item.getValue());\n            });\n        }\n        rec.set(f.name, value);\n    }\n}",
    "receiverBase": "Array",
    "receiverCallee": "each"
  },
  {
    "callback": "function (item) {\n    value.push(item.getValue());\n}",
    "receiverBase": "field",
    "receiverCallee": "eachItem"
  },
  {
    "callback": "function (d) {\n    return '<img class=\\'listIcon\\' src=\\'foundation/img/community_0.png\\'/>' + '<p class=\\'listItem\\'>' + d + '</p>';\n}",
    "receiverBase": "attr",
    "receiverCallee": "html"
  },
  {
    "callback": "function (d) {\n    return d;\n}",
    "receiverBase": "attr",
    "receiverCallee": "html"
  },
  {
    "callback": "function (d) {\n    return d;\n}",
    "receiverBase": "attr",
    "receiverCallee": "html"
  },
  {
    "callback": "function (d) {\n    return d;\n}",
    "receiverBase": "attr",
    "receiverCallee": "html"
  },
  {
    "callback": "function (d) {\n    return d;\n}",
    "receiverBase": "attr",
    "receiverCallee": "html"
  },
  {
    "callback": "function (d) {\n    return blockWidth * d + 10;\n}",
    "receiverBase": "style",
    "receiverCallee": "attr"
  },
  {
    "callback": "function checkW3cBoxModel() {\n    var div = doc.createElement('div');\n    body.appendChild(div);\n    div.style.width = div.style.paddingLeft = '1px';\n    w3cBoxModelWorks = div.offsetWidth === 2;\n    body.removeChild(div);\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (ev) {\n    initElement(ev);\n    mouseupHandler();\n}",
    "receiverBase": "$tx",
    "receiverCallee": "observe"
  },
  {
    "callback": "function (ev) {\n    initElement(ev);\n    mousemoveHandler();\n}",
    "receiverBase": "$tx",
    "receiverCallee": "observe"
  },
  {
    "callback": "function (ev) {\n    initElement(ev);\n    mouseupHandler();\n}",
    "receiverBase": "$tx",
    "receiverCallee": "observe"
  },
  {
    "callback": "function (ev) {\n    initElement(ev);\n    mousemoveHandler();\n}",
    "receiverBase": "$tx",
    "receiverCallee": "observe"
  },
  {
    "callback": "function (ev) {\n    initElement(ev);\n    mouseupHandler();\n}",
    "receiverBase": "$tx",
    "receiverCallee": "observe"
  },
  {
    "callback": "function (ev) {\n    if (isDragging) {\n        initElementForSafari(ev);\n        mousemoveHandler();\n    }\n}",
    "receiverBase": "$tx",
    "receiverCallee": "observe"
  },
  {
    "callback": "function (ev) {\n    initElement(ev);\n    mouseDownHandler();\n}",
    "receiverBase": "$tx",
    "receiverCallee": "observe"
  },
  {
    "callback": "function (ev) {\n    initElement(ev);\n    mouseDownHandler();\n}",
    "receiverBase": "$tx",
    "receiverCallee": "observe"
  },
  {
    "callback": "function () {\n    return this.numberOfClicks() >= 5;\n}",
    "receiverBase": "ko",
    "receiverCallee": "computed"
  },
  {
    "callback": "function () {\n    this._handshakeRetryTimer = null;\n    this._transport.handshake(this._url, this._options);\n}",
    "receiverBase": "",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    this._writeTimer = null;\n    this.__doWrite(this._nullInBuffer);\n}",
    "receiverBase": "",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    throw e;\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    logger.debug('connection timeout expired');\n    this.close(new errors.ConnectionTimeout());\n}",
    "receiverBase": "",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    node.style.backgroundColor = endColor;\n}",
    "receiverBase": "connectUtil",
    "receiverCallee": "connect"
  },
  {
    "callback": "function () {\n    if (type == 'deviceready') {\n        document.dispatchEvent(evt);\n    }\n    documentEventHandlers[type].fire(evt);\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    windowEventHandlers[type].fire(evt);\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    try {\n        func();\n    } catch (e) {\n        console.log('Failed to run constructor: ' + e);\n    }\n}",
    "receiverBase": "onCordovaReady",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    return value;\n}",
    "receiverBase": "utils",
    "receiverCallee": "defineGetter"
  },
  {
    "callback": "function () {\n    console.log(message);\n    delete obj[key];\n    clobber(obj, key, value);\n    return value;\n}",
    "receiverBase": "utils",
    "receiverCallee": "defineGetter"
  },
  {
    "callback": "function (arg, i) {\n    if (utils.typeName(arg) == 'ArrayBuffer') {\n        ret.push({\n            'CDVType': 'ArrayBuffer',\n            'data': base64.fromArrayBuffer(arg)\n        });\n    } else {\n        ret.push(arg);\n    }\n}",
    "receiverBase": "args",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (e) {\n    args.push(massageMessageNativeToJs(e));\n}",
    "receiverBase": "messages",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    var success = status === 0 || status === 1;\n    var args = convertMessageToArgsNativeToJs(message);\n    cordova.callbackFromNative(callbackId, success, status, args, keepCallback);\n}",
    "receiverBase": "iOSExec",
    "receiverCallee": "nativeEvalAndFetch"
  },
  {
    "callback": "function () {\n    if (channel.onDeviceReady.state != 2) {\n        console.log('deviceready has not fired after 5 seconds.');\n        logUnfiredChannels(platformInitChannelsArray);\n        logUnfiredChannels(channel.deviceReadyChannelsArray);\n    }\n}",
    "receiverBase": "window",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    channel.onDOMContentLoaded.fire();\n}",
    "receiverBase": "document",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function () {\n    pluginloader.load(function () {\n        channel.onPluginsReady.fire();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    channel.onPluginsReady.fire();\n}",
    "receiverBase": "pluginloader",
    "receiverCallee": "load"
  },
  {
    "callback": "function () {\n    modulemapper.mapModules(window);\n    platform.initialize && platform.initialize();\n    channel.onCordovaReady.fire();\n    channel.join(function () {\n        require('cordova').fireDocumentEvent('deviceready');\n    }, channel.deviceReadyChannelsArray);\n}",
    "receiverBase": "channel",
    "receiverCallee": "join"
  },
  {
    "callback": "function () {\n    require('cordova').fireDocumentEvent('deviceready');\n}",
    "receiverBase": "channel",
    "receiverCallee": "join"
  },
  {
    "callback": "function () {\n    if (channel.onDeviceReady.state != 2) {\n        console.log('deviceready has not fired after 5 seconds.');\n        logUnfiredChannels(platformInitChannelsArray);\n        logUnfiredChannels(channel.deviceReadyChannelsArray);\n    }\n}",
    "receiverBase": "window",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    channel.onDOMContentLoaded.fire();\n}",
    "receiverBase": "document",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function () {\n    platform.initialize && platform.initialize();\n    channel.onCordovaReady.fire();\n    channel.join(function () {\n        require('cordova').fireDocumentEvent('deviceready');\n    }, channel.deviceReadyChannelsArray);\n}",
    "receiverBase": "channel",
    "receiverCallee": "join"
  },
  {
    "callback": "function () {\n    require('cordova').fireDocumentEvent('deviceready');\n}",
    "receiverBase": "channel",
    "receiverCallee": "join"
  },
  {
    "callback": "function (require, exports, module) {\n    module.exports = {\n        id: 'ios',\n        bootstrap: function () {\n            require('cordova/channel').onNativeReady.fire();\n        }\n    };\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function () {\n    if (id in define.moduleMap) {\n        onload();\n    } else {\n        onerror();\n    }\n}",
    "receiverBase": "exports",
    "receiverCallee": "injectScript"
  },
  {
    "callback": "function () {\n    var moduleList = require('cordova/plugin_list');\n    handlePluginsObject(pathPrefix, moduleList, callback);\n}",
    "receiverBase": "",
    "receiverCallee": "injectIfNecessary"
  },
  {
    "callback": "function (require, exports, module) {\n    exports.makeAbsolute = function makeAbsolute(url) {\n        var anchorEl = document.createElement('a');\n        anchorEl.href = url;\n        return anchorEl.href;\n    };\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function () {\n    var F = function () {\n    };\n    return function (Child, Parent) {\n        F.prototype = Parent.prototype;\n        Child.prototype = new F();\n        Child.__super__ = Parent.prototype;\n        Child.prototype.constructor = Child;\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function ($controller, _$location_, $rootScope) {\n    $location = _$location_;\n    $scope = $rootScope.$new();\n    AboutCtrl = $controller('AboutCtrl', {\n        $location: $location,\n        $scope: $scope\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "inject"
  },
  {
    "callback": "function () {\n    expect(AboutCtrl).toBeDefined();\n}",
    "receiverBase": "",
    "receiverCallee": "inject"
  },
  {
    "callback": "function () {\n    expect($scope.testExample()).toBeTruthy();\n}",
    "receiverBase": "",
    "receiverCallee": "inject"
  },
  {
    "callback": "function () {\n    var getter = _injected.$parse(attrs.focus);\n    var setter = getter.assign;\n    if (getter(scope)) {\n        elem[0].focus();\n        setter(scope, false);\n    }\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function ($parse) {\n    _injected = { $parse: $parse };\n    return { link: link };\n}",
    "receiverBase": "ngModule",
    "receiverCallee": "directive"
  },
  {
    "callback": "function (side) {\n    size += parseInt(elem.css('padding-' + side), 10);\n    if (includeBorder) {\n        size += parseInt(elem.css('border-' + side + '-width'), 10);\n    }\n    if (includeMargin) {\n        size += parseInt(elem.css('margin-' + side), 10);\n    }\n}",
    "receiverBase": "sides",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (dimension) {\n    var Dimension = dimension.substr(0, 1).toUpperCase() + dimension.substr(1);\n    $.fn['inner' + Dimension] = ioDim(dimension, false);\n    $.fn['outer' + Dimension] = ioDim(dimension, true);\n}",
    "receiverCallee": "forEach"
  }
]