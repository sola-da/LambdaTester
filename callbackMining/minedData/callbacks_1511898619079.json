[
  {
    "callback": "function (prop) {\n    return contains(prop, 'orderRadius');\n}",
    "receiverBase": "",
    "receiverCallee": "test_props_all"
  },
  {
    "callback": "function (props) {\n    for (var i = 0, len = props.length; i < len; i++) {\n        attrs[props[i]] = !!(props[i] in inputElem);\n    }\n    return attrs;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    var elem = document.createElement('div');\n    elem.innerHTML = '<elem></elem>';\n    return elem.childNodes.length !== 1;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    bodyElem.innerHTML = '';\n    html.removeChild(bodyElem);\n    html.appendChild(body);\n    styleElem.styleSheet.cssText = '';\n}",
    "receiverBase": "win",
    "receiverCallee": "attachEvent"
  },
  {
    "callback": "function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([\n            'jquery',\n            'sammy'\n        ], factory);\n    } else {\n        (window.Sammy = window.Sammy || {}).Flash = factory(window.jQuery, window.Sammy);\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    var path = this.app.last_location[1];\n    if (path) {\n        this.trackMixpanel(path);\n        enableTracking();\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (event) {\n    frame.onMouseDown(event);\n}",
    "receiverBase": "TreeGrid",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function (event) {\n    frame.onMouseOver(event);\n}",
    "receiverBase": "TreeGrid",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function (event) {\n    frame.onMouseLeave(event);\n}",
    "receiverBase": "TreeGrid",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function (event) {\n    frame.onMouseWheel(event);\n}",
    "receiverBase": "TreeGrid",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function (event) {\n    frame.onTouchStart(event);\n}",
    "receiverBase": "TreeGrid",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function (value) {\n    frame.onRangeChange();\n}",
    "receiverBase": "verticalScroll",
    "receiverCallee": "addOnChangeHandler"
  },
  {
    "callback": "function (item) {\n    return resp.items.indexOf(item.data) !== -1;\n}",
    "receiverBase": "items",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (item) {\n    return resp.items.indexOf(item.data) !== -1;\n}",
    "receiverBase": "getData",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (event) {\n    return me.onDragOver(event);\n}",
    "receiverBase": "TreeGrid",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function (event) {\n    return me.onDragEnter(event);\n}",
    "receiverBase": "TreeGrid",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function (event) {\n    return me.onDragLeave(event);\n}",
    "receiverBase": "TreeGrid",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function (event) {\n    return me.onDrop(event);\n}",
    "receiverBase": "TreeGrid",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function (a, b) {\n    return a > b ? 1 : a < b ? -1 : 0;\n}",
    "receiverBase": "indexes",
    "receiverCallee": "sort"
  },
  {
    "callback": "function (a, b) {\n    for (var i = 0; i < ordersLength; i++) {\n        var order = orders[i], field = order.field, direction = order.direction;\n        if (a[field] == b[field]) {\n            if (i == ordersLength - 1) {\n                return 0;\n            } else {\n            }\n        } else {\n            return a[field] > b[field] ? direction : -direction;\n        }\n    }\n}",
    "receiverBase": "filteredData",
    "receiverCallee": "sort"
  },
  {
    "callback": "function (response) {\n    if (response.error) {\n        errback(response);\n        return;\n    }\n    var rows = response.rows;\n    var dataSubset = [];\n    for (var i = 0, iMax = rows.length; i < iMax; i++) {\n        data[i + skip] = rows[i];\n    }\n    me.totalItems = Math.min(me.data.length + me.blockSize, response.total_rows);\n    var dataSubset = getSubset(index, num);\n    callback({\n        'totalItems': me.totalItems,\n        'items': dataSubset\n    });\n}",
    "receiverBase": "links",
    "receiverCallee": "getJSONP"
  },
  {
    "callback": "function (info) {\n    if (data.error) {\n        errback(data);\n        return;\n    }\n    var update_seq = info.view_index.update_seq;\n    callback(update_seq);\n}",
    "receiverBase": "links",
    "receiverCallee": "getJSONP"
  },
  {
    "callback": "function (err, defaults) {\n    if (err)\n        throw err;\n    _.assign(config, defaults);\n    var cbs = configPending;\n    configPending = null;\n    cbs.forEach(function (cb) {\n        cb();\n    });\n}",
    "receiverBase": "finder",
    "receiverCallee": "get"
  },
  {
    "callback": "function (cb) {\n    cb();\n}",
    "receiverBase": "cbs",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    respond(err, configFile);\n}",
    "receiverBase": "configPending",
    "receiverCallee": "push"
  },
  {
    "callback": "function (item) {\n    dojo[i++ % 2 === 0 ? 'addClass' : 'removeClass'](item, 'sortListItemOdd');\n    this.containerNode.appendChild(item);\n}",
    "receiverBase": "dojo",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (node) {\n    this.selected.push(node.innerHTML);\n}",
    "receiverBase": "dojo",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    dojox.off.onLoad();\n}",
    "receiverBase": "dojo",
    "receiverCallee": "hitch"
  },
  {
    "callback": "function (err) {\n    this.goingOnline = false;\n    this.isOnline = false;\n    if (callback) {\n        callback(false);\n    }\n}",
    "receiverBase": "dojo",
    "receiverCallee": "hitch"
  },
  {
    "callback": "function (data) {\n    this.goingOnline = false;\n    this.isOnline = true;\n    if (callback) {\n        callback(true);\n    } else {\n        this.onNetwork('online');\n    }\n}",
    "receiverBase": "dojo",
    "receiverCallee": "hitch"
  },
  {
    "callback": "function (err) {\n    if (this.isOnline) {\n        this.isOnline = false;\n        try {\n            if (typeof d.ioArgs.xhr.abort == 'function') {\n                d.ioArgs.xhr.abort();\n            }\n        } catch (e) {\n        }\n        dojox.off.sync.isSyncing = false;\n        this.onNetwork('offline');\n    }\n}",
    "receiverBase": "dojo",
    "receiverCallee": "hitch"
  },
  {
    "callback": "function (data) {\n    if (!this.isOnline) {\n        this.isOnline = true;\n        this.onNetwork('online');\n    }\n}",
    "receiverBase": "dojo",
    "receiverCallee": "hitch"
  },
  {
    "callback": "function (i) {\n    var src = i.getAttribute('src');\n    if (!src) {\n        return;\n    }\n    if (src.indexOf('_base/_loader/bootstrap.js') != -1) {\n        isOptimizedBuild = false;\n    }\n}",
    "receiverBase": "dojo",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (require) {\n    var log = require('lavaca/util/log');\n    log('WARNING: PageView is deprecated. You can now use the normal View class in place of PageView.');\n    var View = require('./View');\n    return View;\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function (pager, page) {\n    this.fireEvent('pagechanged', pager, page);\n    return false;\n}",
    "receiverBase": "control",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function (pager, params) {\n    this.startIndex = params[this.getParams().start];\n    this.fireEvent('startindexchanged', pager, this.startIndex);\n    return false;\n}",
    "receiverBase": "control",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function () {\n    this.body = this._buffer.toString().slice(0, -1);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "on"
  }
]