[
  {
    "callback": "function () {\n    beforeEach(function () {\n        this.template = 'foobar';\n        this.View = Backbone.Marionette.ItemView.extend({ template: _.template(this.template) });\n        this.view = new this.View();\n        this.view.render();\n    });\n    it('should render the pre-compiled template', function () {\n        expect(this.view.$el).to.contain.$text(this.template);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "describe"
  },
  {
    "callback": "function () {\n    this.template = 'foobar';\n    this.View = Backbone.Marionette.ItemView.extend({ template: _.template(this.template) });\n    this.view = new this.View();\n    this.view.render();\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    expect(this.view.$el).to.contain.$text(this.template);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    editor.mode = newMode;\n    if (isDirty !== undefined)\n        !isDirty && editor.resetDirty();\n    if (unlockSnapshot)\n        editor.fire('unlockSnapshot');\n    else if (newMode == 'wysiwyg')\n        editor.fire('saveSnapshot');\n    setTimeout(function () {\n        editor.fire('mode');\n        callback && callback.call(editor);\n    }, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "modes"
  },
  {
    "callback": "function () {\n    editor.fire('mode');\n    callback && callback.call(editor);\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (node) {\n    return node.type == CKEDITOR.NODE_ELEMENT && node.hasClass('cke_inner');\n}",
    "receiverBase": "container",
    "receiverCallee": "getFirst"
  },
  {
    "callback": "function () {\n    loadTheme(editor);\n    if (mode == CKEDITOR.ELEMENT_MODE_REPLACE && editor.config.autoUpdateElement && element.$.form)\n        editor._attachToForm();\n    editor.setMode(editor.config.startupMode, function () {\n        editor.resetDirty();\n        editor.status = 'ready';\n        editor.fireOnce('instanceReady');\n        CKEDITOR.fire('instanceReady', null, editor);\n    });\n}",
    "receiverBase": "editor",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    editor.resetDirty();\n    editor.status = 'ready';\n    editor.fireOnce('instanceReady');\n    CKEDITOR.fire('instanceReady', null, editor);\n}",
    "receiverBase": "editor",
    "receiverCallee": "setMode"
  },
  {
    "callback": "function () {\n    editor.focus();\n}",
    "receiverBase": "container",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    CKEDITOR.replaceClass && CKEDITOR.replaceAll(CKEDITOR.replaceClass);\n}",
    "receiverBase": "CKEDITOR",
    "receiverCallee": "domReady"
  },
  {
    "callback": "function (Y, NAME) {\n    Y.SplineSeries = Y.Base.create('splineSeries', Y.LineSeries, [\n        Y.CurveUtil,\n        Y.Lines\n    ], {\n        drawSeries: function () {\n            this.drawSpline();\n        }\n    }, { ATTRS: { type: { value: 'spline' } } });\n}",
    "receiverBase": "YUI",
    "receiverCallee": "add"
  },
  {
    "callback": "function () {\n    return build(gulp.src([\n        'LICENSE',\n        'source/parallax.js',\n        'source/requestAnimationFrame.js'\n    ]), 'parallax.js');\n}",
    "receiverBase": "gulp",
    "receiverCallee": "task"
  },
  {
    "callback": "function () {\n    return build(gulp.src([\n        'LICENSE',\n        'source/jquery.parallax.js',\n        'source/requestAnimationFrame.js'\n    ]), 'jquery.parallax.js');\n}",
    "receiverBase": "gulp",
    "receiverCallee": "task"
  },
  {
    "callback": "function () {\n    return gulp.src(['deploy'], { read: false }).pipe(plugins.clean());\n}",
    "receiverBase": "gulp",
    "receiverCallee": "task"
  },
  {
    "callback": "function () {\n    gulp.start('build.parallax', 'build.jquery.parallax');\n}",
    "receiverBase": "gulp",
    "receiverCallee": "task"
  },
  {
    "callback": "function () {\n    gulp.watch('source/**/*.js', ['build']);\n}",
    "receiverBase": "gulp",
    "receiverCallee": "task"
  },
  {
    "callback": "function () {\n    var db = new PouchDB('todos');\n    return db;\n}",
    "receiverBase": "module",
    "receiverCallee": "factory"
  },
  {
    "callback": "function (err, doc) {\n    if (err)\n        console.log(err);\n    $scope.$apply(function () {\n        for (var i = 0; i < $scope.tasks.length; i++) {\n            if ($scope.tasks[i]._id === doc._id) {\n                $scope.tasks[i] = doc;\n                return;\n            }\n        }\n        $scope.tasks.push(doc);\n    });\n}",
    "receiverBase": "todoDb",
    "receiverCallee": "get"
  },
  {
    "callback": "function () {\n    for (var i = 0; i < $scope.tasks.length; i++) {\n        if ($scope.tasks[i]._id === doc._id) {\n            $scope.tasks[i] = doc;\n            return;\n        }\n    }\n    $scope.tasks.push(doc);\n}",
    "receiverBase": "$scope",
    "receiverCallee": "$apply"
  },
  {
    "callback": "function () {\n    for (var i = 0; i < $scope.tasks.length; i++) {\n        if ($scope.tasks[i]._id === change.id) {\n            $scope.tasks.splice(i, 1);\n        }\n    }\n}",
    "receiverBase": "$scope",
    "receiverCallee": "$apply"
  },
  {
    "callback": "function (err, doc) {\n    if (err) {\n        console.log(err);\n    } else {\n        todoDb.put(angular.copy(task), doc._rev, function (err, res) {\n            if (err)\n                console.log(err);\n        });\n    }\n}",
    "receiverBase": "todoDb",
    "receiverCallee": "get"
  },
  {
    "callback": "function (err, res) {\n    if (err)\n        console.log(err);\n}",
    "receiverBase": "todoDb",
    "receiverCallee": "put"
  },
  {
    "callback": "function (err, doc) {\n    todoDb.remove(doc, function (err, res) {\n    });\n}",
    "receiverBase": "todoDb",
    "receiverCallee": "get"
  },
  {
    "callback": "function (err, res) {\n}",
    "receiverBase": "todoDb",
    "receiverCallee": "remove"
  },
  {
    "callback": "function (newTitle) {\n    if (newTitle && newTitle != task.title) {\n        task.title = newTitle;\n        $scope.update(task);\n    }\n    $ionicListDelegate.closeOptionButtons();\n}",
    "receiverBase": "prompt",
    "receiverCallee": "then"
  },
  {
    "callback": "function (modal) {\n    $scope.taskModal = modal;\n}",
    "receiverBase": "$ionicModal",
    "receiverCallee": "fromTemplateUrl"
  },
  {
    "callback": "function (err, res) {\n    if (err)\n        console.log(err);\n    task.title = '';\n}",
    "receiverBase": "todoDb",
    "receiverCallee": "post"
  },
  {
    "callback": "function (e) {\n    e.setAttribute('style', 'pointer-events:inherit');\n}",
    "receiverBase": "utilities",
    "receiverCallee": "walkTree"
  },
  {
    "callback": "function (e) {\n    e.setAttribute('style', 'pointer-events:inherit');\n}",
    "receiverBase": "utilities",
    "receiverCallee": "walkTree"
  },
  {
    "callback": "function (data) {\n    try {\n        self._processData(data);\n        filter(keywordArgs, self._arrayOfAllItems);\n        self._handleQueuedFetches();\n    } catch (e) {\n        errorCallback(e, keywordArgs);\n    }\n}",
    "receiverBase": "getHandler",
    "receiverCallee": "addCallback"
  },
  {
    "callback": "function (error) {\n    self._loadInProgress = false;\n    if (errorCallback) {\n        errorCallback(error, keywordArgs);\n    } else {\n        throw error;\n    }\n}",
    "receiverBase": "getHandler",
    "receiverCallee": "addErrback"
  },
  {
    "callback": "function (data) {\n    try {\n        self._processData(data);\n        var item = self._createItemFromIdentity(keywordArgs.identity);\n        if (!self.isItem(item)) {\n            item = null;\n        }\n        if (keywordArgs.onItem) {\n            keywordArgs.onItem.call(scope, item);\n        }\n        self._handleQueuedFetches();\n    } catch (error) {\n        if (keywordArgs.onError) {\n            keywordArgs.onError.call(scope, error);\n        }\n    }\n}",
    "receiverBase": "getHandler",
    "receiverCallee": "addCallback"
  },
  {
    "callback": "function (error) {\n    this._loadInProgress = false;\n    if (keywordArgs.onError) {\n        keywordArgs.onError.call(scope, error);\n    }\n}",
    "receiverBase": "getHandler",
    "receiverCallee": "addErrback"
  },
  {
    "callback": "function () {\n    Account.instance.backgroundState.fadeOut(LEVEL_FADE_TIME);\n    Loader['hideLoadingMessage']();\n    var data = {\n            'Account01': {\n                'class': 'Account',\n                'state': 'MenuState01'\n            },\n            'MenuState01': {\n                'class': 'MenuState',\n                'parent': 'Account01'\n            }\n        };\n    Account.instance.readGlobalUpdate(data);\n    $(window)['trigger']('resize');\n}",
    "receiverBase": "backgroundState",
    "receiverCallee": "fadeIn"
  },
  {
    "callback": "function () {\n    for (var key in Kibo.KEY_NAMES_BY_CODE)\n        if (Object.prototype.hasOwnProperty.call(Kibo.KEY_NAMES_BY_CODE, key))\n            Kibo.KEY_CODES_BY_NAME[Kibo.KEY_NAMES_BY_CODE[key]] = +key;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    if (document.addEventListener) {\n        return function (element, eventName, func) {\n            element.addEventListener(eventName, func, false);\n        };\n    } else if (document.attachEvent) {\n        return function (element, eventName, func) {\n            element.attachEvent('on' + eventName, func);\n        };\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    if (document.removeEventListener) {\n        return function (element, eventName, func) {\n            element.removeEventListener(eventName, func, false);\n        };\n    } else if (document.detachEvent) {\n        return function (element, eventName, func) {\n            element.detachEvent('on' + eventName, func);\n        };\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (match) {\n    return match.toUpperCase();\n}",
    "receiverBase": "toLowerCase",
    "receiverCallee": "replace"
  },
  {
    "callback": "function () {\n    if (Array.prototype.indexOf) {\n        return function (haystack, needle) {\n            return haystack.indexOf(needle) !== -1;\n        };\n    } else {\n        return function (haystack, needle) {\n            for (var i = 0; i < haystack.length; i++)\n                if (haystack[i] === needle)\n                    return true;\n            return false;\n        };\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function unloader() {\n    Kibo.unregisterEvent(that.element, 'keydown', that.downHandler);\n    Kibo.unregisterEvent(that.element, 'keyup', that.upHandler);\n    Kibo.unregisterEvent(window, 'unload', unloader);\n}",
    "receiverBase": "Kibo",
    "receiverCallee": "registerEvent"
  },
  {
    "callback": "function () {\n    var $this = $(this);\n    if ($this.attr('href').match(active)) {\n        $this.parent().addClass('active');\n        return false;\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var bottom = ($(document).height() - $(window).height()) * 0.9;\n    if ($(window).scrollTop() > bottom && !loadingMoreUsers) {\n        loadMoreUsers();\n    }\n}",
    "receiverBase": "off",
    "receiverCallee": "on"
  },
  {
    "callback": "function (err, data) {\n    if (data && data.users.length) {\n        onUsersLoaded(data);\n        $('#load-more-users-btn').removeClass('disabled');\n    } else {\n        $('#load-more-users-btn').addClass('disabled');\n    }\n    loadingMoreUsers = false;\n}",
    "receiverBase": "socket",
    "receiverCallee": "emit"
  },
  {
    "callback": "function (user) {\n    return !$('.users-box[data-uid=\"' + user.uid + '\"]').length;\n}",
    "receiverBase": "users",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (html) {\n    translator.translate(html, function (translated) {\n        translated = $(translated);\n        translated.find('span.timeago').timeago();\n        $('#users-container').append(translated);\n        $('#users-container .anon-user').appendTo($('#users-container'));\n    });\n}",
    "receiverBase": "templates",
    "receiverCallee": "parse"
  },
  {
    "callback": "function (translated) {\n    translated = $(translated);\n    translated.find('span.timeago').timeago();\n    $('#users-container').append(translated);\n    $('#users-container .anon-user').appendTo($('#users-container'));\n}",
    "receiverBase": "translator",
    "receiverCallee": "translate"
  },
  {
    "callback": "function () {\n    if (timeoutId) {\n        clearTimeout(timeoutId);\n        timeoutId = 0;\n    }\n    timeoutId = setTimeout(doSearch, 250);\n}",
    "receiverBase": "$",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    doSearch();\n}",
    "receiverBase": "$",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    doSearch($(this).attr('data-page'));\n    return false;\n}",
    "receiverBase": "$",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    var $this = $(this);\n    if ($this.is(':checked')) {\n        filters.push({\n            field: $this.attr('data-filter-field'),\n            type: $this.attr('data-filter-type'),\n            value: $this.attr('data-filter-value')\n        });\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function (html) {\n    $('.pagination-container').replaceWith(html);\n}",
    "receiverBase": "templates",
    "receiverCallee": "parse"
  },
  {
    "callback": "function (translated) {\n    notify.html(translated);\n    notify.parent().removeClass('btn-success label-success').addClass('btn-warning label-warning');\n}",
    "receiverBase": "translator",
    "receiverCallee": "translate"
  },
  {
    "callback": "function (translated) {\n    notify.html(translated);\n    notify.parent().removeClass('btn-warning label-warning').addClass('btn-success label-success');\n}",
    "receiverBase": "translator",
    "receiverCallee": "translate"
  },
  {
    "callback": "function () {\n    this._init();\n}",
    "receiverBase": "lang",
    "receiverCallee": "hitch"
  },
  {
    "callback": "function (error) {\n    console.log('LayerSwipe::' + error.message);\n}",
    "receiverBase": "_allLoaded",
    "receiverCallee": "then"
  },
  {
    "callback": "function () {\n    mapLoadDef.resolve('map loaded');\n}",
    "receiverBase": "lang",
    "receiverCallee": "hitch"
  },
  {
    "callback": "function () {\n    def.resolve('layer loaded');\n}",
    "receiverBase": "on",
    "receiverCallee": "once"
  },
  {
    "callback": "function () {\n    this._repositionMover();\n}",
    "receiverBase": "lang",
    "receiverCallee": "hitch"
  },
  {
    "callback": "function () {\n    this.swipe();\n}",
    "receiverBase": "lang",
    "receiverCallee": "hitch"
  },
  {
    "callback": "function () {\n    this._swipe();\n}",
    "receiverBase": "lang",
    "receiverCallee": "hitch"
  },
  {
    "callback": "function () {\n    this._swipe();\n}",
    "receiverBase": "lang",
    "receiverCallee": "hitch"
  },
  {
    "callback": "function () {\n    this._swipe();\n}",
    "receiverBase": "lang",
    "receiverCallee": "hitch"
  },
  {
    "callback": "function () {\n    this._swipe();\n}",
    "receiverBase": "lang",
    "receiverCallee": "hitch"
  },
  {
    "callback": "function (evt) {\n    if (this.get('type') === 'scope') {\n        evt = this._clickPosition(evt);\n        try {\n            this.map.onClick(evt, 'other');\n        } catch (error) {\n            console.log('LayerSwipe::scope click error');\n        }\n        this._clickCoords = null;\n    }\n}",
    "receiverBase": "lang",
    "receiverCallee": "hitch"
  },
  {
    "callback": "function (evt) {\n    if (this.get('type') === 'scope') {\n        evt = this._clickPosition(evt);\n        try {\n            this.map.navigationManager.mouseEvents.onDblClick(evt, 'other');\n        } catch (error) {\n            console.log('LayerSwipe::scope dblclick error');\n        }\n        this._clickCoords = null;\n    }\n}",
    "receiverBase": "lang",
    "receiverCallee": "hitch"
  },
  {
    "callback": "function (evt) {\n    if (this.get('type') === 'scope') {\n        this._clickCoords = {\n            x: evt.x,\n            y: evt.y\n        };\n    }\n}",
    "receiverBase": "lang",
    "receiverCallee": "hitch"
  },
  {
    "callback": "function () {\n    var a, b, c;\n    a = { test: 'Some string' };\n    b = model.serialize(a);\n    c = model.deserialize(b);\n    b.indexOf('\\n').should.equal(-1);\n    c.test.should.equal('Some string');\n    a = { test: 'With a new\\nline' };\n    b = model.serialize(a);\n    c = model.deserialize(b);\n    c.test.should.equal('With a new\\nline');\n    a.test.indexOf('\\n').should.not.equal(-1);\n    b.indexOf('\\n').should.equal(-1);\n    c.test.indexOf('\\n').should.not.equal(-1);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var a, b, c;\n    a = { test: true };\n    b = model.serialize(a);\n    c = model.deserialize(b);\n    b.indexOf('\\n').should.equal(-1);\n    c.test.should.equal(true);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var a, b, c;\n    a = { test: 5 };\n    b = model.serialize(a);\n    c = model.deserialize(b);\n    b.indexOf('\\n').should.equal(-1);\n    c.test.should.equal(5);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var a, b, c;\n    a = { test: null };\n    b = model.serialize(a);\n    c = model.deserialize(b);\n    b.indexOf('\\n').should.equal(-1);\n    assert.isNull(a.test);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var a = {\n            bloup: undefined,\n            hello: 'world'\n        }, b = model.serialize(a), c = model.deserialize(b);\n    Object.keys(c).length.should.equal(1);\n    c.hello.should.equal('world');\n    assert.isUndefined(c.bloup);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var a, b, c, d = new Date();\n    a = { test: d };\n    b = model.serialize(a);\n    c = model.deserialize(b);\n    b.indexOf('\\n').should.equal(-1);\n    b.should.equal('{\"test\":{\"$$date\":' + d.getTime() + '}}');\n    util.isDate(c.test).should.equal(true);\n    c.test.getTime().should.equal(d.getTime());\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var a, b, c, d = new Date();\n    a = {\n        test: {\n            something: 39,\n            also: d,\n            yes: { again: 'yes' }\n        }\n    };\n    b = model.serialize(a);\n    c = model.deserialize(b);\n    b.indexOf('\\n').should.equal(-1);\n    c.test.something.should.equal(39);\n    c.test.also.getTime().should.equal(d.getTime());\n    c.test.yes.again.should.equal('yes');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var a, b, c, d = new Date();\n    a = {\n        test: [\n            39,\n            d,\n            { again: 'yes' }\n        ]\n    };\n    b = model.serialize(a);\n    c = model.deserialize(b);\n    b.indexOf('\\n').should.equal(-1);\n    c.test[0].should.equal(39);\n    c.test[1].getTime().should.equal(d.getTime());\n    c.test[2].again.should.equal('yes');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var a1 = { $something: 'totest' }, a2 = { 'with.dot': 'totest' }, e1 = { $$date: 4321 }, e2 = { $$deleted: true }, e3 = { $$indexCreated: 'indexName' }, e4 = { $$indexRemoved: 'indexName' }, b;\n    (function () {\n        b = model.serialize(a1);\n    }.should.throw());\n    (function () {\n        b = model.serialize(a2);\n    }.should.throw());\n    b = model.serialize(e1);\n    b = model.serialize(e2);\n    b = model.serialize(e3);\n    b = model.serialize(e4);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (err) {\n    assert.isNull(err);\n    db2 = new Datastore({ filename: 'workspace/test1.db' });\n    db2.loadDatabase(function (err) {\n        assert.isNull(err);\n        db2.find({}, function (err, docs) {\n            assert.isNull(err);\n            docs.length.should.equal(1);\n            docs[0].hello.should.equal(badString);\n            done();\n        });\n    });\n}",
    "receiverBase": "db1",
    "receiverCallee": "insert"
  },
  {
    "callback": "function (err) {\n    assert.isNull(err);\n    db2.find({}, function (err, docs) {\n        assert.isNull(err);\n        docs.length.should.equal(1);\n        docs[0].hello.should.equal(badString);\n        done();\n    });\n}",
    "receiverBase": "db2",
    "receiverCallee": "loadDatabase"
  },
  {
    "callback": "function (err, docs) {\n    assert.isNull(err);\n    docs.length.should.equal(1);\n    docs[0].hello.should.equal(badString);\n    done();\n}",
    "receiverBase": "db2",
    "receiverCallee": "find"
  },
  {
    "callback": "function () {\n    assert.isDefined(model.checkObject);\n    (function () {\n        model.checkObject({ 'so.bad': true });\n    }.should.throw());\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var obj = { prop: null };\n    model.checkObject(obj);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var a = [{ hello: 'world' }], b = model.deepCopy(a);\n    b[0].hello.should.equal('world');\n    b[0].hello = 'another';\n    b[0].hello.should.equal('another');\n    a[0].hello.should.equal('world');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var a = {\n            a: 4,\n            $e: 'rrr',\n            'eee.rt': 42,\n            nested: {\n                yes: 1,\n                'tt.yy': 2,\n                $nopenope: 3\n            },\n            array: [\n                { 'rr.hh': 1 },\n                { yes: true },\n                { $yes: false }\n            ]\n        }, b = model.deepCopy(a);\n    assert.deepEqual(a, b);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var obj = {\n            some: 'thing',\n            _id: 'keepit'\n        }, updateQuery = {\n            replace: 'done',\n            bloup: [\n                1,\n                8\n            ]\n        }, t;\n    t = model.modify(obj, updateQuery);\n    t.replace.should.equal('done');\n    t.bloup.length.should.equal(2);\n    t.bloup[0].should.equal(1);\n    t.bloup[1].should.equal(8);\n    assert.isUndefined(t.some);\n    t._id.should.equal('keepit');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var obj = {\n            some: 'thing',\n            _id: 'keepit'\n        }, updateQuery = {\n            replace: 'done',\n            bloup: [\n                1,\n                8\n            ],\n            _id: 'donttryit'\n        };\n    (function () {\n        model.modify(obj, updateQuery);\n    }.should.throw());\n    updateQuery._id = 'keepit';\n    model.modify(obj, updateQuery);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var obj = { some: 'thing' }, updateQuery = {\n            replace: 'me',\n            $modify: 'metoo'\n        };\n    (function () {\n        model.modify(obj, updateQuery);\n    }.should.throw());\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var obj = { some: 'thing' }, updateQuery = {\n            $set: 'this exists',\n            $modify: 'not this one'\n        };\n    (function () {\n        model.modify(obj, updateQuery);\n    }.should.throw());\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var obj = { some: 'thing' }, updateQuery = { $set: 'this exists' };\n    (function () {\n        model.modify(obj, updateQuery);\n    }.should.throw());\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var obj = { yup: 'yes' }, updateQuery = {\n            $set: {\n                some: 'changed',\n                nay: 'yes indeed'\n            }\n        }, modified = model.modify(obj, updateQuery);\n    Object.keys(modified).length.should.equal(3);\n    modified.some.should.equal('changed');\n    modified.yup.should.equal('yes');\n    modified.nay.should.equal('yes indeed');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var obj = { yup: { subfield: 'bloup' } }, updateQuery = {\n            $set: {\n                'yup.subfield': 'changed',\n                'yup.yop': 'yes indeed',\n                'totally.doesnt.exist': 'now it does'\n            }\n        }, modified = model.modify(obj, updateQuery);\n    _.isEqual(modified, {\n        yup: {\n            subfield: 'changed',\n            yop: 'yes indeed'\n        },\n        totally: { doesnt: { exist: 'now it does' } }\n    }).should.equal(true);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var obj = {\n            some: 'thing',\n            nay: 40\n        }, modified;\n    modified = model.modify(obj, { $inc: { nay: 2 } });\n    _.isEqual(modified, {\n        some: 'thing',\n        nay: 42\n    }).should.equal(true);\n    modified = model.modify(obj, { $inc: { inexistent: -6 } });\n    _.isEqual(modified, {\n        some: 'thing',\n        nay: 40,\n        inexistent: -6\n    }).should.equal(true);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var obj = {\n            some: 'thing',\n            nay: { nope: 40 }\n        }, modified;\n    modified = model.modify(obj, {\n        $inc: {\n            'nay.nope': -2,\n            'blip.blop': 123\n        }\n    });\n    _.isEqual(modified, {\n        some: 'thing',\n        nay: { nope: 38 },\n        blip: { blop: 123 }\n    }).should.equal(true);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var obj = { arr: ['hello'] }, modified;\n    modified = model.modify(obj, { $push: { arr: 'world' } });\n    assert.deepEqual(modified, {\n        arr: [\n            'hello',\n            'world'\n        ]\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var obj = {}, modified;\n    modified = model.modify(obj, { $push: { arr: 'world' } });\n    assert.deepEqual(modified, { arr: ['world'] });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var obj = { arr: 'hello' }, modified;\n    (function () {\n        modified = model.modify(obj, { $push: { arr: 'world' } });\n    }.should.throw());\n    obj = { arr: { nested: 45 } };\n    (function () {\n        modified = model.modify(obj, { $push: { 'arr.nested': 'world' } });\n    }.should.throw());\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var obj = { arr: ['hello'] }, modified;\n    modified = model.modify(obj, { $addToSet: { arr: 'world' } });\n    assert.deepEqual(modified, {\n        arr: [\n            'hello',\n            'world'\n        ]\n    });\n    obj = { arr: ['hello'] };\n    modified = model.modify(obj, { $addToSet: { arr: 'hello' } });\n    assert.deepEqual(modified, { arr: ['hello'] });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var obj = { arr: [] }, modified;\n    modified = model.modify(obj, { $addToSet: { arr: 'world' } });\n    assert.deepEqual(modified, { arr: ['world'] });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var obj = { arr: 'hello' }, modified;\n    (function () {\n        modified = model.modify(obj, { $addToSet: { arr: 'world' } });\n    }.should.throw());\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var obj = { arr: [{ b: 2 }] }, modified;\n    modified = model.modify(obj, { $addToSet: { arr: { b: 3 } } });\n    assert.deepEqual(modified, {\n        arr: [\n            { b: 2 },\n            { b: 3 }\n        ]\n    });\n    obj = { arr: [{ b: 2 }] };\n    modified = model.modify(obj, { $addToSet: { arr: { b: 2 } } });\n    assert.deepEqual(modified, { arr: [{ b: 2 }] });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var obj = { arr: 'hello' }, modified;\n    (function () {\n        modified = model.modify(obj, { $pop: { arr: 1 } });\n    }.should.throw());\n    obj = { bloup: 'nope' };\n    (function () {\n        modified = model.modify(obj, { $pop: { arr: 1 } });\n    }.should.throw());\n    obj = {\n        arr: [\n            1,\n            4,\n            8\n        ]\n    };\n    (function () {\n        modified = model.modify(obj, { $pop: { arr: true } });\n    }.should.throw());\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var obj = {\n            arr: [\n                'hello',\n                'world'\n            ]\n        }, modified;\n    modified = model.modify(obj, { $pull: { arr: 'world' } });\n    assert.deepEqual(modified, { arr: ['hello'] });\n    obj = { arr: ['hello'] };\n    modified = model.modify(obj, { $pull: { arr: 'world' } });\n    assert.deepEqual(modified, { arr: ['hello'] });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var obj = {\n            arr: [\n                'hello',\n                'world',\n                'hello',\n                'world'\n            ]\n        }, modified;\n    modified = model.modify(obj, { $pull: { arr: 'world' } });\n    assert.deepEqual(modified, {\n        arr: [\n            'hello',\n            'hello'\n        ]\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var obj = { arr: 'hello' }, modified;\n    (function () {\n        modified = model.modify(obj, { $pull: { arr: 'world' } });\n    }.should.throw());\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var obj = {\n            arr: [\n                { b: 2 },\n                { b: 3 }\n            ]\n        }, modified;\n    modified = model.modify(obj, { $pull: { arr: { b: 3 } } });\n    assert.deepEqual(modified, { arr: [{ b: 2 }] });\n    obj = { arr: [{ b: 2 }] };\n    modified = model.modify(obj, { $pull: { arr: { b: 3 } } });\n    assert.deepEqual(modified, { arr: [{ b: 2 }] });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (stuff) {\n    model.compareThings(undefined, stuff).should.equal(-1);\n    model.compareThings(stuff, undefined).should.equal(1);\n}",
    "receiverBase": "otherStuff",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (stuff) {\n    model.compareThings(null, stuff).should.equal(-1);\n    model.compareThings(stuff, null).should.equal(1);\n}",
    "receiverBase": "otherStuff",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (stuff) {\n    numbers.forEach(function (number) {\n        model.compareThings(number, stuff).should.equal(-1);\n        model.compareThings(stuff, number).should.equal(1);\n    });\n}",
    "receiverBase": "otherStuff",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (number) {\n    model.compareThings(number, stuff).should.equal(-1);\n    model.compareThings(stuff, number).should.equal(1);\n}",
    "receiverBase": "numbers",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (stuff) {\n    strings.forEach(function (string) {\n        model.compareThings(string, stuff).should.equal(-1);\n        model.compareThings(stuff, string).should.equal(1);\n    });\n}",
    "receiverBase": "otherStuff",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (string) {\n    model.compareThings(string, stuff).should.equal(-1);\n    model.compareThings(stuff, string).should.equal(1);\n}",
    "receiverBase": "strings",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (stuff) {\n    bools.forEach(function (bool) {\n        model.compareThings(bool, stuff).should.equal(-1);\n        model.compareThings(stuff, bool).should.equal(1);\n    });\n}",
    "receiverBase": "otherStuff",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (bool) {\n    model.compareThings(bool, stuff).should.equal(-1);\n    model.compareThings(stuff, bool).should.equal(1);\n}",
    "receiverBase": "bools",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (stuff) {\n    dates.forEach(function (date) {\n        model.compareThings(date, stuff).should.equal(-1);\n        model.compareThings(stuff, date).should.equal(1);\n    });\n}",
    "receiverBase": "otherStuff",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (date) {\n    model.compareThings(date, stuff).should.equal(-1);\n    model.compareThings(stuff, date).should.equal(1);\n}",
    "receiverBase": "dates",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (stuff) {\n    arrays.forEach(function (array) {\n        model.compareThings(array, stuff).should.equal(-1);\n        model.compareThings(stuff, array).should.equal(1);\n    });\n}",
    "receiverBase": "otherStuff",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (array) {\n    model.compareThings(array, stuff).should.equal(-1);\n    model.compareThings(stuff, array).should.equal(1);\n}",
    "receiverBase": "arrays",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    model.compareThings({}, {}).should.equal(0);\n    model.compareThings({ a: 42 }, { a: 312 }).should.equal(-1);\n    model.compareThings({ a: '42' }, { a: '312' }).should.equal(1);\n    model.compareThings({\n        a: 42,\n        b: 312\n    }, {\n        b: 312,\n        a: 42\n    }).should.equal(0);\n    model.compareThings({\n        a: 42,\n        b: 312,\n        c: 54\n    }, {\n        b: 313,\n        a: 42\n    }).should.equal(-1);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    model.areThingsEqual({ hello: 'world' }, {}).should.equal(false);\n    model.areThingsEqual({ hello: 'world' }, { hello: 'mars' }).should.equal(false);\n    model.areThingsEqual({ hello: 'world' }, {\n        hello: 'world',\n        temperature: 42\n    }).should.equal(false);\n    model.areThingsEqual({\n        hello: 'world',\n        other: { temperature: 42 }\n    }, {\n        hello: 'world',\n        other: { temperature: 42 }\n    }).should.equal(true);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    model.getDotValue({ hello: 'world' }, 'hello').should.equal('world');\n    model.getDotValue({\n        hello: 'world',\n        type: {\n            planet: true,\n            blue: true\n        }\n    }, 'type.planet').should.equal(true);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    assert.isUndefined(model.getDotValue({ hello: 'world' }, 'helloo'));\n    assert.isUndefined(model.getDotValue({\n        hello: 'world',\n        type: { planet: true }\n    }, 'type.plane'));\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    model.match({ test: 'yeah' }, { test: 'yea' }).should.equal(false);\n    model.match({ test: 'yeah' }, { test: 'yeahh' }).should.equal(false);\n    model.match({ test: 'yeah' }, { test: 'yeah' }).should.equal(true);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    model.match({ test: { ooo: 'yeah' } }, { 'test.ooo': 'yea' }).should.equal(false);\n    model.match({ test: { ooo: 'yeah' } }, { 'test.oo': 'yeah' }).should.equal(false);\n    model.match({ test: { ooo: 'yeah' } }, { 'tst.ooo': 'yeah' }).should.equal(false);\n    model.match({ test: { ooo: 'yeah' } }, { 'test.ooo': 'yeah' }).should.equal(true);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    model.match({ test: undefined }, { test: undefined }).should.equal(false);\n    model.match({ test: { pp: undefined } }, { 'test.pp': undefined }).should.equal(false);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var d = new Date(), r = new RegExp(d.getTime());\n    model.match({ test: true }, { test: /true/ }).should.equal(false);\n    model.match({ test: null }, { test: /null/ }).should.equal(false);\n    model.match({ test: 42 }, { test: /42/ }).should.equal(false);\n    model.match({ test: d }, { test: r }).should.equal(false);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    model.match({ test: 'true' }, { test: /true/ }).should.equal(true);\n    model.match({ test: 'babaaaar' }, { test: /aba+r/ }).should.equal(true);\n    model.match({ test: 'babaaaar' }, { test: /^aba+r/ }).should.equal(false);\n    model.match({ test: 'true' }, { test: /t[ru]e/ }).should.equal(false);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    model.match({ test: 'true' }, { test: { $regex: /true/ } }).should.equal(true);\n    model.match({ test: 'babaaaar' }, { test: { $regex: /aba+r/ } }).should.equal(true);\n    model.match({ test: 'babaaaar' }, { test: { $regex: /^aba+r/ } }).should.equal(false);\n    model.match({ test: 'true' }, { test: { $regex: /t[ru]e/ } }).should.equal(false);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    (function () {\n        model.match({ test: 'true' }, { test: { $regex: 42 } });\n    }.should.throw());\n    (function () {\n        model.match({ test: 'true' }, { test: { $regex: 'true' } });\n    }.should.throw());\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    model.match({ test: 'helLo' }, {\n        test: {\n            $regex: /ll/i,\n            $nin: [\n                'helL',\n                'helLop'\n            ]\n        }\n    }).should.equal(true);\n    model.match({ test: 'helLo' }, {\n        test: {\n            $regex: /ll/i,\n            $nin: [\n                'helLo',\n                'helLop'\n            ]\n        }\n    }).should.equal(false);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    model.match({ test: { nested: 'true' } }, { 'test.nested': /true/ }).should.equal(true);\n    model.match({ test: { nested: 'babaaaar' } }, { 'test.nested': /^aba+r/ }).should.equal(false);\n    model.match({ test: { nested: 'true' } }, { 'test.nested': { $regex: /true/ } }).should.equal(true);\n    model.match({ test: { nested: 'babaaaar' } }, { 'test.nested': { $regex: /^aba+r/ } }).should.equal(false);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    model.match({ a: 5 }, { a: { $lt: { a: 6 } } }).should.equal(false);\n    model.match({ a: 5 }, {\n        a: {\n            $lt: [\n                6,\n                7\n            ]\n        }\n    }).should.equal(false);\n    model.match({ a: 5 }, { a: { $lt: null } }).should.equal(false);\n    model.match({ a: 5 }, { a: { $lt: true } }).should.equal(false);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    model.match({ a: 5 }, { a: { $lt: 6 } }).should.equal(true);\n    model.match({ a: 5 }, { a: { $lt: 5 } }).should.equal(false);\n    model.match({ a: 5 }, { a: { $lt: 4 } }).should.equal(false);\n    model.match({ a: { b: 5 } }, { 'a.b': { $lt: 6 } }).should.equal(true);\n    model.match({ a: { b: 5 } }, { 'a.b': { $lt: 3 } }).should.equal(false);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    model.match({ a: 'nedb' }, { a: { $lt: 'nedc' } }).should.equal(true);\n    model.match({ a: 'nedb' }, { a: { $lt: 'neda' } }).should.equal(false);\n    model.match({ a: { b: 'nedb' } }, { 'a.b': { $lt: 'nedc' } }).should.equal(true);\n    model.match({ a: { b: 'nedb' } }, { 'a.b': { $lt: 'neda' } }).should.equal(false);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    model.match({\n        a: [\n            5,\n            10\n        ]\n    }, { a: { $lt: 4 } }).should.equal(false);\n    model.match({\n        a: [\n            5,\n            10\n        ]\n    }, { a: { $lt: 6 } }).should.equal(true);\n    model.match({\n        a: [\n            5,\n            10\n        ]\n    }, { a: { $lt: 11 } }).should.equal(true);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    model.match({ a: new Date(1000) }, { a: { $gte: new Date(1001) } }).should.equal(false);\n    model.match({ a: new Date(1000) }, { a: { $lt: new Date(1001) } }).should.equal(true);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    model.match({ a: 5 }, { a: { $lte: 6 } }).should.equal(true);\n    model.match({ a: 5 }, { a: { $lte: 5 } }).should.equal(true);\n    model.match({ a: 5 }, { a: { $lte: 4 } }).should.equal(false);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    model.match({ a: 5 }, { a: { $gt: 6 } }).should.equal(false);\n    model.match({ a: 5 }, { a: { $gt: 5 } }).should.equal(false);\n    model.match({ a: 5 }, { a: { $gt: 4 } }).should.equal(true);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    model.match({ a: 5 }, { a: { $gte: 6 } }).should.equal(false);\n    model.match({ a: 5 }, { a: { $gte: 5 } }).should.equal(true);\n    model.match({ a: 5 }, { a: { $gte: 4 } }).should.equal(true);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    model.match({ a: 5 }, { a: { $ne: 4 } }).should.equal(true);\n    model.match({ a: 5 }, { a: { $ne: 5 } }).should.equal(false);\n    model.match({ a: 5 }, { b: { $ne: 5 } }).should.equal(true);\n    model.match({ a: false }, { a: { $ne: false } }).should.equal(false);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    model.match({ childrens: [] }, { 'childrens': { $size: 0 } }).should.equal(true);\n    model.match({ childrens: [] }, { 'childrens': { $size: 2 } }).should.equal(false);\n    model.match({ childrens: [] }, { 'childrens': { $size: 3 } }).should.equal(false);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    model.match({ a: 5 }, { a: { $size: 1 } }).should.equal(false);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    model.match({\n        childrens: [\n            'Riri',\n            'Fifi',\n            'Loulou'\n        ]\n    }, {\n        'childrens': {\n            $size: 3,\n            $size: 3\n        }\n    }).should.equal(true);\n    model.match({\n        childrens: [\n            'Riri',\n            'Fifi',\n            'Loulou'\n        ]\n    }, {\n        'childrens': {\n            $size: 3,\n            $size: 4\n        }\n    }).should.equal(false);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    model.match({\n        a: 5,\n        b: 10\n    }, { a: 5 }).should.equal(true);\n    model.match({\n        a: 5,\n        b: 10\n    }, { $not: { a: 5 } }).should.equal(false);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    (function () {\n        model.match({ a: { b: 7 } }, {\n            a: {\n                $or: [\n                    { b: 5 },\n                    { b: 7 }\n                ]\n            }\n        });\n    }.should.throw());\n    model.match({ a: { b: 7 } }, {\n        $or: [\n            { 'a.b': 5 },\n            { 'a.b': 7 }\n        ]\n    }).should.equal(true);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    (function () {\n        model.match({ a: 5 }, {\n            $or: {\n                a: 5,\n                a: 6\n            }\n        });\n    }.should.throw());\n    (function () {\n        model.match({ a: 5 }, {\n            $and: {\n                a: 5,\n                a: 6\n            }\n        });\n    }.should.throw());\n    (function () {\n        model.match({ a: 5 }, { $unknown: [{ a: 5 }] });\n    }.should.throw());\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    model.match({ a: 4 }, {\n        $where: function () {\n            return this.a === 4;\n        }\n    }).should.equal(true);\n    model.match({ a: 4 }, {\n        $where: function () {\n            return this.a === 5;\n        }\n    }).should.equal(false);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    (function () {\n        model.match({ a: 4 }, { $where: 'not a function' });\n    }.should.throw());\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    (function () {\n        model.match({ a: 4 }, {\n            $where: function () {\n                return 'not a boolean';\n            }\n        });\n    }.should.throw());\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    (function () {\n        model.match({\n            childrens: [\n                'Riri',\n                'Fifi',\n                'Loulou'\n            ]\n        }, {\n            'childrens': {\n                'Fifi': true,\n                $size: 3\n            }\n        });\n    }.should.throw());\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  }
]