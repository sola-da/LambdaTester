[
  {
    "callback": "function () {\n    it('should initialize', function () {\n        expect(formfactor).not.toBeNull();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "describe"
  },
  {
    "callback": "function () {\n    expect(formfactor).not.toBeNull();\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (ConfModel) {\n    var conf = new ConfModel(value);\n    conf.on('destroy', self.onModelNameChange, self);\n    conf.destroy();\n}",
    "receiverBase": "",
    "receiverCallee": "require"
  },
  {
    "callback": "function () {\n    var modal = self.modal = new Modal({\n            title: 'Configure CSV Import for ' + value.modelName,\n            content: c.el\n        });\n    modal.$el.addClass('wide-modal');\n    modal.open(function (e) {\n        console.log('saving ', e);\n        c.save();\n    });\n}",
    "receiverBase": "c",
    "receiverCallee": "on"
  },
  {
    "callback": "function (e) {\n    console.log('saving ', e);\n    c.save();\n}",
    "receiverBase": "modal",
    "receiverCallee": "open"
  },
  {
    "callback": "function () {\n    self._configure = c.form.getValue().configuration;\n    self.onModelNameChange();\n}",
    "receiverBase": "c",
    "receiverCallee": "on"
  },
  {
    "callback": "function (e) {\n    return '<li> error importing <code>' + e + '</code></li>';\n}",
    "receiverBase": "_",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    this.$el.find('.form-container').html(this.form.$el);\n}",
    "receiverBase": "form",
    "receiverCallee": "on"
  },
  {
    "callback": "function (evt, options) {\n    console.log('on options', options);\n    if (first) {\n        this.onModelNameChange();\n    }\n    first = false;\n}",
    "receiverBase": "form",
    "receiverCallee": "on"
  },
  {
    "callback": "function (evt, options) {\n    this.$el.find('.edit-configure-remove')[options.length && options[0].val ? 'show' : 'hide']();\n}",
    "receiverBase": "form",
    "receiverCallee": "on"
  },
  {
    "callback": "function (error) {\n    console.error('Mongoose encountered an error:', error);\n}",
    "receiverBase": "connection",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    console.log('Mongoose successfully connected with the database');\n}",
    "receiverBase": "connection",
    "receiverCallee": "once"
  },
  {
    "callback": "function () {\n    fn.apply(dom, arguments);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "attachEvent"
  },
  {
    "callback": "function () {\n    fn.apply(dom, arguments);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "detachEvent"
  },
  {
    "callback": "function (key, item) {\n    empty = Ambow.isEmpty(item);\n    Ambow.each(empty ? key : item, function (val) {\n        buf.push('&', e(key), '=', !Ambow.isEmpty(val) && (val != key || !empty) ? Ambow.isDate(val) ? Ambow.encode(val).replace(/\"/g, '') : e(val) : '');\n    });\n}",
    "receiverBase": "Ambow",
    "receiverCallee": "iterate"
  },
  {
    "callback": "function (val) {\n    buf.push('&', e(key), '=', !Ambow.isEmpty(val) && (val != key || !empty) ? Ambow.isDate(val) ? Ambow.encode(val).replace(/\"/g, '') : e(val) : '');\n}",
    "receiverBase": "Ambow",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    return false;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (a, b) {\n    var c = m[b];\n    if (c) {\n        return c;\n    }\n    c = b.charCodeAt();\n    return '\\\\u00' + Math.floor(c / 16).toString(16) + (c % 16).toString(16);\n}",
    "receiverBase": "s",
    "receiverCallee": "replace"
  },
  {
    "callback": "function () {\n    var ec;\n    return function (o) {\n        if (!ec) {\n            ec = isNative ? JSON.stringify : doEncode;\n        }\n        return ec(o);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    var dc;\n    return function (json) {\n        if (!dc) {\n            dc = isNative ? JSON.parse : doDecode;\n        }\n        return dc(json);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    var fns = {};\n    return function (v, a) {\n        if (!fns[a]) {\n            fns[a] = new Function('v', 'return v ' + a + ';');\n        }\n        return fns[a](v);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (m, name) {\n    return values[name] !== undefined ? values[name] : '';\n}",
    "receiverBase": "html",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (elem, i) {\n    return callback.call(elem, i, elem);\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "map"
  },
  {
    "callback": "function (i, name) {\n    class2type['[object ' + name + ']'] = name.toLowerCase();\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (_, flag) {\n    object[flag] = true;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function add(args) {\n    jQuery.each(args, function (_, arg) {\n        var type = jQuery.type(arg);\n        if (type === 'function') {\n            if (!options.unique || !self.has(arg)) {\n                list.push(arg);\n            }\n        } else if (arg && arg.length && type !== 'string') {\n            add(arg);\n        }\n    });\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_, arg) {\n    var type = jQuery.type(arg);\n    if (type === 'function') {\n        if (!options.unique || !self.has(arg)) {\n            list.push(arg);\n        }\n    } else if (arg && arg.length && type !== 'string') {\n        add(arg);\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (_, arg) {\n    var index;\n    while ((index = jQuery.inArray(arg, list, index)) > -1) {\n        list.splice(index, 1);\n        if (firing) {\n            if (index <= firingLength) {\n                firingLength--;\n            }\n            if (index <= firingIndex) {\n                firingIndex--;\n            }\n        }\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, tuple) {\n    var action = tuple[0], fn = jQuery.isFunction(fns[i]) && fns[i];\n    deferred[tuple[1]](function () {\n        var returned = fn && fn.apply(this, arguments);\n        if (returned && jQuery.isFunction(returned.promise)) {\n            returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);\n        } else {\n            newDefer[action + 'With'](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);\n        }\n    });\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var returned = fn && fn.apply(this, arguments);\n    if (returned && jQuery.isFunction(returned.promise)) {\n        returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);\n    } else {\n        newDefer[action + 'With'](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "deferred"
  },
  {
    "callback": "function (i, tuple) {\n    var list = tuple[2], stateString = tuple[3];\n    promise[tuple[1]] = list.add;\n    if (stateString) {\n        list.add(function () {\n            state = stateString;\n        }, tuples[i ^ 1][2].disable, tuples[2][2].lock);\n    }\n    deferred[tuple[0]] = function () {\n        deferred[tuple[0] + 'With'](this === deferred ? promise : this, arguments);\n        return this;\n    };\n    deferred[tuple[0] + 'With'] = list.fireWith;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    state = stateString;\n}",
    "receiverBase": "list",
    "receiverCallee": "add"
  },
  {
    "callback": "function () {\n    support.boxSizing = div.offsetWidth === 4;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "swap"
  },
  {
    "callback": "function () {\n    data_user.set(this, key);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var data = data_user.get(this, camelKey);\n    data_user.set(this, camelKey, value);\n    if (key.indexOf('-') !== -1 && data !== undefined) {\n        data_user.set(this, key, value);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    data_user.remove(this, key);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    data_priv.remove(elem, [\n        type + 'queue',\n        key\n    ]);\n}",
    "receiverBase": "Callbacks",
    "receiverCallee": "add"
  },
  {
    "callback": "function () {\n    var queue = jQuery.queue(this, type, data);\n    jQuery._queueHooks(this, type);\n    if (type === 'fx' && queue[0] !== 'inprogress') {\n        jQuery.dequeue(this, type);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.dequeue(this, type);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (next, hooks) {\n    var timeout = setTimeout(next, time);\n    hooks.stop = function () {\n        clearTimeout(timeout);\n    };\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "queue"
  },
  {
    "callback": "function () {\n    jQuery.removeAttr(this, name);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    delete this[jQuery.propFix[name] || name];\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (j) {\n    jQuery(this).addClass(value.call(this, j, this.className));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (j) {\n    jQuery(this).removeClass(value.call(this, j, this.className));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i) {\n    jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (value) {\n    return value == null ? '' : value + '';\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "map"
  },
  {
    "callback": "function (i, name) {\n    var getter = jQuery.expr.attrHandle[name] || jQuery.find.attr;\n    jQuery.expr.attrHandle[name] = function (elem, name, isXML) {\n        var fn = jQuery.expr.attrHandle[name], ret = isXML ? undefined : (jQuery.expr.attrHandle[name] = undefined) != getter(elem, name, isXML) ? name.toLowerCase() : null;\n        jQuery.expr.attrHandle[name] = fn;\n        return ret;\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.propFix[this.toLowerCase()] = this;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.valHooks[this] = {\n        set: function (elem, value) {\n            if (jQuery.isArray(value)) {\n                return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;\n            }\n        }\n    };\n    if (!jQuery.support.checkOn) {\n        jQuery.valHooks[this].get = function (elem) {\n            return elem.getAttribute('value') === null ? 'on' : elem.value;\n        };\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.event.add(this, types, fn, data, selector);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.event.remove(this, types, fn, selector);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.event.trigger(type, data, this);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    for (i = 0; i < l; i++) {\n        if (jQuery.contains(self[i], this)) {\n            return true;\n        }\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "filter"
  },
  {
    "callback": "function () {\n    var i = 0;\n    for (; i < l; i++) {\n        if (jQuery.contains(this, targets[i])) {\n            return true;\n        }\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (elem) {\n    return elem.nodeType === 1;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function (elem, i) {\n    return !!qualifier.call(elem, i, elem) !== not;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function (elem) {\n    return elem === qualifier !== not;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function (elem) {\n    return core_indexOf.call(qualifier, elem) >= 0 !== not;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function (value) {\n    return value === undefined ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "access"
  },
  {
    "callback": "function (elem) {\n    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n        var target = manipulationTarget(this, elem);\n        target.appendChild(elem);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function (elem) {\n    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n        var target = manipulationTarget(this, elem);\n        target.insertBefore(elem, target.firstChild);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function (elem) {\n    if (this.parentNode) {\n        this.parentNode.insertBefore(elem, this);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function (elem) {\n    if (this.parentNode) {\n        this.parentNode.insertBefore(elem, this.nextSibling);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function () {\n    return jQuery.clone(this, dataAndEvents, deepDataAndEvents);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "map"
  },
  {
    "callback": "function (elem) {\n    return [\n        elem.nextSibling,\n        elem.parentNode\n    ];\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "map"
  },
  {
    "callback": "function (elem) {\n    var next = args[i++], parent = args[i++];\n    if (parent) {\n        jQuery(this).remove();\n        parent.insertBefore(elem, next);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function (index) {\n    var self = set.eq(index);\n    if (isFunction) {\n        args[0] = value.call(this, index, self.html());\n    }\n    self.domManip(args, callback, allowIntersection);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (name, original) {\n    jQuery.fn[name] = function (selector) {\n        var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;\n        for (; i <= last; i++) {\n            elems = i === last ? this : this.clone(true);\n            jQuery(insert[i])[original](elems);\n            core_push.apply(ret, elems.get());\n        }\n        return this.pushStack(ret);\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i) {\n    jQuery(this).wrapAll(html.call(this, i));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var elem = this;\n    while (elem.firstElementChild) {\n        elem = elem.firstElementChild;\n    }\n    return elem;\n}",
    "receiverBase": "wrap",
    "receiverCallee": "map"
  },
  {
    "callback": "function (i) {\n    jQuery(this).wrapInner(html.call(this, i));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var self = jQuery(this), contents = self.contents();\n    if (contents.length) {\n        contents.wrapAll(html);\n    } else {\n        self.append(html);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i) {\n    jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    if (!jQuery.nodeName(this, 'body')) {\n        jQuery(this).replaceWith(this.childNodes);\n    }\n}",
    "receiverBase": "parent",
    "receiverCallee": "each"
  },
  {
    "callback": "function (elem, name, value) {\n    var styles, len, map = {}, i = 0;\n    if (jQuery.isArray(name)) {\n        styles = getStyles(elem);\n        len = name.length;\n        for (; i < len; i++) {\n            map[name[i]] = jQuery.css(elem, name[i], false, styles);\n        }\n        return map;\n    }\n    return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "access"
  },
  {
    "callback": "function () {\n    if (bool ? state : isHidden(this)) {\n        jQuery(this).show();\n    } else {\n        jQuery(this).hide();\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    return getWidthOrHeight(elem, name, extra);\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "swap"
  },
  {
    "callback": "function (i, prop) {\n    jQuery.cssHooks[prop] = {\n        get: function (elem, computed) {\n            if (computed) {\n                computed = curCSS(elem, prop);\n                return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + 'px' : computed;\n            }\n        }\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var elements = jQuery.prop(this, 'elements');\n    return elements ? jQuery.makeArray(elements) : this;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    var type = this.type;\n    return this.name && !jQuery(this).is(':disabled') && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !manipulation_rcheckableType.test(type));\n}",
    "receiverBase": "map",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (i, elem) {\n    var val = jQuery(this).val();\n    return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {\n        return {\n            name: elem.name,\n            value: val.replace(rCRLF, '\\r\\n')\n        };\n    }) : {\n        name: elem.name,\n        value: val.replace(rCRLF, '\\r\\n')\n    };\n}",
    "receiverBase": "filter",
    "receiverCallee": "map"
  },
  {
    "callback": "function (val) {\n    return {\n        name: elem.name,\n        value: val.replace(rCRLF, '\\r\\n')\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    add(this.name, this.value);\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, v) {\n    if (traditional || rbracket.test(prefix)) {\n        add(prefix, v);\n    } else {\n        buildParams(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, traditional, add);\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, name) {\n    jQuery.fn[name] = function (data, fn) {\n        return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (_, prefilterOrFactory) {\n    var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);\n    if (typeof dataTypeOrTransport === 'string' && !seekingTransport && !inspected[dataTypeOrTransport]) {\n        options.dataTypes.unshift(dataTypeOrTransport);\n        inspect(dataTypeOrTransport);\n        return false;\n    } else if (seekingTransport) {\n        return !(selected = dataTypeOrTransport);\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (responseText) {\n    response = arguments;\n    self.html(selector ? jQuery('<div>').append(jQuery.parseHTML(responseText)).find(selector) : responseText);\n}",
    "receiverBase": "ajax",
    "receiverCallee": "done"
  },
  {
    "callback": "function (i, type) {\n    jQuery.fn[type] = function (fn) {\n        return this.on(type, fn);\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jqXHR.abort('timeout');\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (i, method) {\n    jQuery[method] = function (url, data, callback, type) {\n        if (jQuery.isFunction(data)) {\n            type = type || callback;\n            callback = data;\n            data = undefined;\n        }\n        return jQuery.ajax({\n            url: url,\n            type: method,\n            dataType: type,\n            data: data,\n            success: callback\n        });\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (s) {\n    if (s.cache === undefined) {\n        s.cache = false;\n    }\n    if (s.crossDomain) {\n        s.type = 'GET';\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "ajaxPrefilter"
  },
  {
    "callback": "function () {\n    window[callbackName] = overwritten;\n    if (s[callbackName]) {\n        s.jsonpCallback = originalSettings.jsonpCallback;\n        oldCallbacks.push(callbackName);\n    }\n    if (responseContainer && jQuery.isFunction(overwritten)) {\n        overwritten(responseContainer[0]);\n    }\n    responseContainer = overwritten = undefined;\n}",
    "receiverBase": "jqXHR",
    "receiverCallee": "always"
  },
  {
    "callback": "function () {\n    for (var key in xhrCallbacks) {\n        xhrCallbacks[key]();\n    }\n    xhrCallbacks = undefined;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    fxNow = undefined;\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (prop, value) {\n    var collection = (tweeners[prop] || []).concat(tweeners['*']), index = 0, length = collection.length;\n    for (; index < length; index++) {\n        if (collection[index].call(animation, prop, value)) {\n            return;\n        }\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    delete tick.elem;\n}",
    "receiverBase": "Deferred",
    "receiverCallee": "always"
  },
  {
    "callback": "function () {\n    anim.always(function () {\n        hooks.unqueued--;\n        if (!jQuery.queue(elem, 'fx').length) {\n            hooks.empty.fire();\n        }\n    });\n}",
    "receiverBase": "anim",
    "receiverCallee": "always"
  },
  {
    "callback": "function () {\n    hooks.unqueued--;\n    if (!jQuery.queue(elem, 'fx').length) {\n        hooks.empty.fire();\n    }\n}",
    "receiverBase": "anim",
    "receiverCallee": "always"
  },
  {
    "callback": "function () {\n    style.overflow = opts.overflow[0];\n    style.overflowX = opts.overflow[1];\n    style.overflowY = opts.overflow[2];\n}",
    "receiverBase": "anim",
    "receiverCallee": "always"
  },
  {
    "callback": "function () {\n    jQuery(elem).hide();\n}",
    "receiverBase": "anim",
    "receiverCallee": "done"
  },
  {
    "callback": "function () {\n    var prop;\n    data_priv.remove(elem, 'fxshow');\n    for (prop in orig) {\n        jQuery.style(elem, prop, orig[prop]);\n    }\n}",
    "receiverBase": "anim",
    "receiverCallee": "done"
  },
  {
    "callback": "function (i, name) {\n    var cssFn = jQuery.fn[name];\n    jQuery.fn[name] = function (speed, easing, callback) {\n        return speed == null || typeof speed === 'boolean' ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (name, props) {\n    jQuery.fn[name] = function (speed, easing, callback) {\n        return this.animate(props, speed, easing, callback);\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (fn) {\n    return elem === fn.elem;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function (i) {\n    jQuery.offset.setOffset(this, options, i);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var offsetParent = this.offsetParent || docElem;\n    while (offsetParent && (!jQuery.nodeName(offsetParent, 'html') && jQuery.css(offsetParent, 'position') === 'static')) {\n        offsetParent = offsetParent.offsetParent;\n    }\n    return offsetParent || docElem;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "map"
  },
  {
    "callback": "function (elem, method, val) {\n    var win = getWindow(elem);\n    if (val === undefined) {\n        return win ? win[prop] : elem[method];\n    }\n    if (win) {\n        win.scrollTo(!top ? val : window.pageXOffset, top ? val : window.pageYOffset);\n    } else {\n        elem[method] = val;\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "access"
  },
  {
    "callback": "function () {\n    return jQuery;\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function () {\n    require(specs, function () {\n        jasmineEnv.execute();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "$"
  },
  {
    "callback": "function () {\n    jasmineEnv.execute();\n}",
    "receiverBase": "",
    "receiverCallee": "require"
  },
  {
    "callback": "function (edge) {\n    return edge.to;\n}",
    "receiverBase": "",
    "receiverCallee": "map"
  },
  {
    "callback": "function (ia) {\n    return keys.indexOf(ia) >= 0;\n}",
    "receiverBase": "",
    "receiverCallee": "any"
  },
  {
    "callback": "function (cl) {\n    if (cl.in_call_stack > 0) {\n        constraint_solver.remove_from_call_stack(cl);\n        if (this._num_listeners_in_call_stack === 0) {\n            return breaker;\n        }\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "each"
  },
  {
    "callback": "function (v, k) {\n    fsm.on(k, function () {\n        this.set(v);\n    }, this);\n    if (fsm.is(k)) {\n        this.set(v);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    this.set(v);\n}",
    "receiverBase": "fsm",
    "receiverCallee": "on"
  },
  {
    "callback": "function (me) {\n    return reduce(rest(arguments), get_prop, me);\n}",
    "receiverBase": "",
    "receiverCallee": "createConstraintModifier"
  },
  {
    "callback": "function (me) {\n    return parseInt.apply(this, arguments);\n}",
    "receiverBase": "",
    "receiverCallee": "createConstraintModifier"
  },
  {
    "callback": "function (me) {\n    return parseFloat.apply(this, arguments);\n}",
    "receiverBase": "",
    "receiverCallee": "createConstraintModifier"
  },
  {
    "callback": "function () {\n    return reduce(arguments, binary_operators['+'], 0);\n}",
    "receiverBase": "",
    "receiverCallee": "createConstraintModifier"
  },
  {
    "callback": "function (me) {\n    return reduce(rest(arguments), binary_operators['-'], me);\n}",
    "receiverBase": "",
    "receiverCallee": "createConstraintModifier"
  },
  {
    "callback": "function (me) {\n    return reduce(rest(arguments), binary_operators['*'], me);\n}",
    "receiverBase": "",
    "receiverCallee": "createConstraintModifier"
  },
  {
    "callback": "function (me) {\n    return reduce(rest(arguments), binary_operators['/'], me);\n}",
    "receiverBase": "",
    "receiverCallee": "createConstraintModifier"
  },
  {
    "callback": "function (op_name) {\n    proto[op_name] = createConstraintModifier(bind(Math[op_name], Math));\n}",
    "receiverBase": "",
    "receiverCallee": "each"
  },
  {
    "callback": "function (ops, operator_prefix) {\n    var op_list = operator_prefix === 'u' ? unary_operators : binary_operators;\n    each(ops, function (key, op_name) {\n        proto[op_name] = createConstraintModifier(op_list[key]);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "each"
  },
  {
    "callback": "function (key, op_name) {\n    proto[op_name] = createConstraintModifier(op_list[key]);\n}",
    "receiverBase": "",
    "receiverCallee": "each"
  },
  {
    "callback": "function (a) {\n    return typeof a;\n}",
    "receiverBase": "",
    "receiverCallee": "createConstraintModifier"
  },
  {
    "callback": "function (a, b) {\n    return a instanceof b;\n}",
    "receiverBase": "",
    "receiverCallee": "createConstraintModifier"
  },
  {
    "callback": "function () {\n    this.editorDomNode = this.editor.editNode || this.editor.iframe.document.body.firstChild;\n    this._myListeners = [];\n    this._myListeners.push(dojo.connect(this.editorDomNode, 'mouseup', this.editor, 'onClick'));\n    this._myListeners.push(dojo.connect(this.editor, 'onDisplayChanged', this, 'checkAvailable'));\n    this._myListeners.push(dojo.connect(this.editor, 'onBlur', this, 'checkAvailable'));\n    this.doMixins();\n    this.connectDraggable();\n}",
    "receiverBase": "dojo",
    "receiverCallee": "hitch"
  },
  {
    "callback": "function (d, i) {\n    if (td == d) {\n        tdIndex = i;\n    }\n}",
    "receiverBase": "tds",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (r, i) {\n    if (tr == r) {\n        trIndex = i;\n    }\n}",
    "receiverBase": "trs",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    var node = dojo.withGlobal(win, 'byId', dojo, [id]);\n    dojo.removeAttr(node, 'align');\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (td, i) {\n    if (!td.id) {\n        td.id = 'tdid' + i + this.getTimeStamp();\n    }\n}",
    "receiverBase": "tds",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    this.tableData = null;\n}",
    "receiverBase": "dojo",
    "receiverCallee": "hitch"
  },
  {
    "callback": "function () {\n    this.availableCurrentlySet = false;\n}",
    "receiverBase": "dojo",
    "receiverCallee": "hitch"
  },
  {
    "callback": "function (l) {\n    dojo.disconnect(l);\n}",
    "receiverBase": "dojo",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (r) {\n    c = r.insertCell(o.colIndex);\n    c.innerHTML = '&nbsp;';\n}",
    "receiverBase": "trs",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (r) {\n    c = r.insertCell(o.colIndex + 1);\n    c.innerHTML = '&nbsp;';\n}",
    "receiverBase": "trs",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (tr) {\n    tr.deleteCell(o.colIndex);\n}",
    "receiverBase": "trs",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    var o = this.getTableInfo(true);\n    var w = Math.floor(100 / o.cols);\n    o.tds.forEach(function (d) {\n        dojo.attr(d, 'width', w + '%');\n    });\n}",
    "receiverBase": "dojo",
    "receiverCallee": "hitch"
  },
  {
    "callback": "function (d) {\n    dojo.attr(d, 'width', w + '%');\n}",
    "receiverBase": "tds",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (c, i) {\n    if (c.charCodeAt(0) < 91 && i > 0 && ns[i - 1].charCodeAt(0) != 32) {\n        ns.push(' ');\n    }\n    if (i === 0) {\n        c = c.toUpperCase();\n    }\n    ns.push(c);\n}",
    "receiverBase": "dojo",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (a) {\n    var id = a.substring(3, a.length);\n    if (id.charAt(0) == '\"' && id.charAt(id.length - 1) == '\"') {\n        id = id.substring(1, id.length - 1);\n    }\n    var node = e.byId(id);\n    if (node && node.tagName.toLowerCase() == 'td') {\n        cells.push(node);\n    }\n}",
    "receiverBase": "dojo",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (editor) {\n    editor.onLoadDeferred.addCallback(dojo.hitch(this, function () {\n        this._createContextMenu();\n    }));\n    this.button.domNode.style.display = 'none';\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "connect"
  },
  {
    "callback": "function () {\n    this._createContextMenu();\n}",
    "receiverBase": "dojo",
    "receiverCallee": "hitch"
  },
  {
    "callback": "function (obj) {\n    dojo.disconnect(c);\n    var res = this.editor.execCommand('inserthtml', obj.htmlText);\n}",
    "receiverBase": "dojo",
    "receiverCallee": "connect"
  },
  {
    "callback": "function (color) {\n    var o = this.getTableInfo();\n    dojo.attr(o.td, 'bgcolor', color);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "connect"
  },
  {
    "callback": "function () {\n    this.onChange(this.get('value'));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "connect"
  },
  {
    "callback": "function () {\n    dijit.popup.close(this.dialog);\n    this.onCancel();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "connect"
  },
  {
    "callback": "function (color) {\n    this.modTable(null, color);\n    this.editor.focus();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "connect"
  },
  {
    "callback": "function (color) {\n    this.editor.focus();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "connect"
  },
  {
    "callback": "function (editor) {\n    editor.onLoadDeferred.addCallback(dojo.hitch(this, function () {\n        this.connect(this.editor.editNode, 'onmouseup', function (evt) {\n            this.lastObject = evt.target;\n        });\n    }));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "connect"
  },
  {
    "callback": "function () {\n    this.connect(this.editor.editNode, 'onmouseup', function (evt) {\n        this.lastObject = evt.target;\n    });\n}",
    "receiverBase": "dojo",
    "receiverCallee": "hitch"
  },
  {
    "callback": "function (evt) {\n    this.lastObject = evt.target;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "connect"
  },
  {
    "callback": "function (td) {\n    dojo.style(td, 'backgroundColor', args);\n}",
    "receiverBase": "dojo",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    dojo.disconnect(cl);\n    var self = this;\n    setTimeout(function () {\n        self.destroyRecursive();\n    }, 10);\n}",
    "receiverBase": "dojo",
    "receiverCallee": "connect"
  },
  {
    "callback": "function () {\n    self.destroyRecursive();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    dojo.disconnect(c);\n    var self = this;\n    setTimeout(function () {\n        self.destroyRecursive();\n    }, 10);\n}",
    "receiverBase": "dojo",
    "receiverCallee": "connect"
  },
  {
    "callback": "function () {\n    self.destroyRecursive();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (color) {\n    dijit.popup.close(w1);\n    this.setBrdColor(color);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "connect"
  },
  {
    "callback": "function () {\n    dijit.popup.close(w1);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "connect"
  },
  {
    "callback": "function () {\n    dijit.popup.open({\n        popup: w1,\n        around: this.borderCol\n    });\n    w1.focus();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "connect"
  },
  {
    "callback": "function (color) {\n    dijit.popup.close(w2);\n    this.setBkColor(color);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "connect"
  },
  {
    "callback": "function () {\n    dijit.popup.close(w2);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "connect"
  },
  {
    "callback": "function () {\n    dijit.popup.open({\n        popup: w2,\n        around: this.backgroundCol\n    });\n    w2.focus();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "connect"
  },
  {
    "callback": "function () {\n    dojo.disconnect(c);\n    var self = this;\n    setTimeout(function () {\n        self.destroyRecursive();\n    }, 10);\n}",
    "receiverBase": "dojo",
    "receiverCallee": "connect"
  },
  {
    "callback": "function () {\n    self.destroyRecursive();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    dojo.disconnect(c);\n    var self = this;\n    setTimeout(function () {\n        self.destroyRecursive();\n    }, 10);\n}",
    "receiverBase": "dojo",
    "receiverCallee": "connect"
  },
  {
    "callback": "function () {\n    self.destroyRecursive();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (w) {\n    if (w && w.destroy) {\n        w.destroy();\n    }\n}",
    "receiverBase": "dojo",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (err) {\n    if (err) {\n        console.log(err);\n    }\n}",
    "receiverBase": "nexe",
    "receiverCallee": "compile"
  },
  {
    "callback": "function (key) {\n    return m[key.slice(1, -1)] || '';\n}",
    "receiverBase": "v",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (err, o) {\n    if (err) {\n        console.log(err);\n        self.res.send(500, err);\n    }\n    var result;\n    if (count) {\n        result = {\n            results: [],\n            count: o\n        };\n    } else {\n        o = prepareResponse(o);\n        var result = { results: o };\n    }\n    callback(null, result);\n}",
    "receiverBase": "query",
    "receiverCallee": "exec"
  },
  {
    "callback": "function (r) {\n    r.objectId = r._id;\n    _.omit(r, '_id');\n    return r;\n}",
    "receiverBase": "_",
    "receiverCallee": "map"
  },
  {
    "callback": "function (err, objects) {\n    var objectHash = {};\n    _.each(objects, function (o) {\n        objectHash[o._id] = o;\n    });\n    var objectArray = [];\n    _.each(result, function (r) {\n        var pointer = r[includeKey];\n        var object = objectHash[pointer.objectId];\n        pointer = _.extend(pointer, object);\n        objectArray.push(pointer);\n    });\n    if (includeKeyArray.length > 0) {\n        includeChildren(includeKeyArray.join('.'), objectArray);\n    }\n}",
    "receiverBase": "where",
    "receiverCallee": "exec"
  },
  {
    "callback": "function (o) {\n    objectHash[o._id] = o;\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (r) {\n    var pointer = r[includeKey];\n    var object = objectHash[pointer.objectId];\n    pointer = _.extend(pointer, object);\n    objectArray.push(pointer);\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (q) {\n    var deferred = Q.defer();\n    multipleQ.push(deferred.promise);\n    whereBuilder(q).then(function (qWhere) {\n        multipleQuery.push(qWhere);\n        deferred.resolve();\n    });\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (qWhere) {\n    multipleQuery.push(qWhere);\n    deferred.resolve();\n}",
    "receiverBase": "whereBuilder",
    "receiverCallee": "then"
  },
  {
    "callback": "function () {\n    mongoWhere['$or'] = multipleQuery;\n    deferred.resolve();\n}",
    "receiverBase": "all",
    "receiverCallee": "then"
  },
  {
    "callback": "function (selector, callback) {\n    var selectorValue = value[selector];\n    selectorMapper(selector, selectorValue).then(function (mongoSelector) {\n        console.log('output of selector mapper', mongoSelector);\n        _.extend(mongoWhere[key], mongoSelector);\n        deferred.resolve();\n    });\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (mongoSelector) {\n    console.log('output of selector mapper', mongoSelector);\n    _.extend(mongoWhere[key], mongoSelector);\n    deferred.resolve();\n}",
    "receiverBase": "selectorMapper",
    "receiverCallee": "then"
  },
  {
    "callback": "function () {\n    deferred.resolve(mongoWhere);\n}",
    "receiverBase": "all",
    "receiverCallee": "then"
  },
  {
    "callback": "function (c) {\n    return c.get(selectKey);\n}",
    "receiverBase": "_",
    "receiverCallee": "map"
  },
  {
    "callback": "function (err, collection) {\n    var selectedIds = _.pluck(collection, '_id');\n    var mongoSelector = selector == '$inQuery' ? '$in' : '$nin';\n    deferred.resolve({ mongoSelector: selectedIds });\n}",
    "receiverBase": "where",
    "receiverCallee": "exec"
  },
  {
    "callback": "function (err, o) {\n    if (err) {\n        console.log(err);\n        self.res.send(500, err);\n    }\n    var selectorIds = _.pluck(o[selectorKey], 'objectId');\n    deferred.resolve({ '$in': selectorIds });\n}",
    "receiverBase": "select",
    "receiverCallee": "exec"
  },
  {
    "callback": "function () {\n    this.dom.select();\n}",
    "receiverBase": "field",
    "receiverCallee": "on"
  }
]