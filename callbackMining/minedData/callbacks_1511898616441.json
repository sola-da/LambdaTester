[
  {
    "callback": "function () {\n    var div = document.createElement('div');\n    try {\n        div.style.setExpression('width', '0+0');\n        div.style.removeExpression('width');\n    } catch (e) {\n        return false;\n    }\n    return true;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    $(s, c).corner(options);\n}",
    "receiverBase": "",
    "receiverCallee": "$"
  },
  {
    "callback": "function (value, key) {\n    aNames.push(key);\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "map"
  },
  {
    "callback": "function (value, key) {\n    aNames.push(key);\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "map"
  },
  {
    "callback": "function (index, name) {\n    IconPool.addIcon(name, undefined, {\n        fontFamily: sapIconFamily,\n        content: aIconCodes[index],\n        suppressMirroring: IconPool._isMirroringSkipped(name)\n    });\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (sectionHelperForScope, sectionNameForScope) {\n    sectionHelperForScope.getSeparator().reapplySizeAndStroke();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "forEachSectionHelper"
  },
  {
    "callback": "function (sectionHelper, sectionName) {\n    return sectionHelper.getDrawLayer() == drawLayer;\n}",
    "receiverBase": "object",
    "receiverCallee": "findKey"
  },
  {
    "callback": "function (sectionHelper, sectionName) {\n    return sectionHelper.getSelectorLayer() == selectorLayer;\n}",
    "receiverBase": "object",
    "receiverCallee": "findKey"
  },
  {
    "callback": "function (sectionShapeForEach, sectionNameForEach) {\n    sectionShapeForEach.setTransLate(translate);\n}",
    "receiverBase": "target_",
    "receiverCallee": "forEachSectionShape"
  },
  {
    "callback": "function (helper, name) {\n    helper.getDrawLayer().setDrawable(drawable);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "forEachSectionHelper"
  },
  {
    "callback": "function (sectionShapeForEach) {\n    sectionShapeForEach.setTransLate(translate);\n}",
    "receiverBase": "array",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (sectionHelperForEach, sectionNameForEach) {\n    fn.call(selfObj, sectionHelperForEach, sectionNameForEach);\n}",
    "receiverBase": "goog",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (sectionHelperForEach, sectionNameForEach) {\n    sectionHelperForEach.update(target, sectionBounds[sectionNameForEach]);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "forEachSectionHelper"
  },
  {
    "callback": "function (sectionHelper, sectionName) {\n    sectionHelper.active(target, isDrawLayerVisibled);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "forEachSectionHelper"
  },
  {
    "callback": "function (sectionHelper, sectionName) {\n    sectionHelper.inactive(target);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "forEachSectionHelper"
  },
  {
    "callback": "function (sectionHelper) {\n    sectionHelper.init();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "forEachSectionHelper"
  },
  {
    "callback": "function () {\n    guide.setDisable();\n    helpers.disableAll();\n    activeShapeManagerByListShape.clear();\n    this.initActiveSectionName();\n    listShape.updateProperties();\n    thin.ui.setEnabledForFontUi(false);\n}",
    "receiverBase": "version",
    "receiverCallee": "upHandler"
  },
  {
    "callback": "function (sectionHelperForScope) {\n    sectionHelperForScope.dispose();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "forEachSectionHelper"
  },
  {
    "callback": "function () {\n    self[!self.isPlaying() ? 'play' : 'stop']();\n}",
    "receiverBase": "content",
    "receiverCallee": "click"
  },
  {
    "callback": "function (e) {\n    if (self.isPlaying()) {\n        return false;\n    }\n    var rect = $.extend({}, $(this).offset(), {\n            width: $(this).outerWidth(true),\n            height: $(this).outerHeight(true)\n        });\n    if (e.pageX >= rect.left && e.pageX < rect.left + rect.width / 2) {\n        self.back();\n    } else {\n        self.next();\n    }\n}",
    "receiverBase": "content",
    "receiverCallee": "click"
  },
  {
    "callback": "function (i, p) {\n    names.push(p.name);\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, o) {\n    opt[o] = $a.attr(o) || '';\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, o) {\n    opt[o] = $img.attr(o) || opt[o];\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, p) {\n    var match = p.match(/\\s*([a-z_]*?)\\s*=\\s*(.+)\\s*/);\n    if (match) {\n        opt[match[1]] = match[2];\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function (index, element) {\n    self._parseLink(this);\n}",
    "receiverBase": "find",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    $(this).css('opacity', '');\n}",
    "receiverBase": "stop",
    "receiverCallee": "fadeIn"
  },
  {
    "callback": "function () {\n    $(this).css('opacity', '');\n}",
    "receiverBase": "stop",
    "receiverCallee": "fadeIn"
  },
  {
    "callback": "function () {\n    if (self.isPlaying()) {\n        self.stop();\n    } else {\n        if (o.activeIndex >= o.groupItems.length - 1) {\n            self.show(0);\n        }\n        self.play();\n    }\n    return false;\n}",
    "receiverBase": "hide",
    "receiverCallee": "click"
  },
  {
    "callback": "function () {\n    if (self.isPlaying()) {\n        self.stop();\n        self.show(0);\n    }\n    return false;\n}",
    "receiverBase": "hide",
    "receiverCallee": "click"
  },
  {
    "callback": "function () {\n    self._close();\n    return false;\n}",
    "receiverBase": "hide",
    "receiverCallee": "click"
  },
  {
    "callback": "function () {\n    self._toggleFullSize();\n    return false;\n}",
    "receiverBase": "hide",
    "receiverCallee": "click"
  },
  {
    "callback": "function (event, data) {\n    if ($(this).hasClass('wijmo-wijlightbox-counter-active')) {\n        return false;\n    }\n    self.show(parseInt($(this).text(), 10) - 1);\n    return false;\n}",
    "receiverBase": "find",
    "receiverCallee": "click"
  },
  {
    "callback": "function () {\n    $(this).css('opacity', '');\n}",
    "receiverBase": "stop",
    "receiverCallee": "fadeIn"
  },
  {
    "callback": "function () {\n    curImage = wrapper.children(':last');\n    while (curImage.parent().is('.wijmo-wijlightbox-aniwrapper')) {\n        curImage.parent().replaceWith(curImage);\n    }\n    curImage.css({\n        float: '',\n        width: '',\n        height: ''\n    });\n    if (o.autoSize && !self._isFullSize()) {\n        self._resize(complete);\n    } else {\n        if ($.isFunction(complete)) {\n            complete.apply(self);\n        }\n        self._refreshText();\n    }\n}",
    "receiverBase": "wrapper",
    "receiverCallee": "effect"
  },
  {
    "callback": "function () {\n    self.frame.width(toRect.width);\n    self.container.width(self.frame.outerWidth());\n    self._createText();\n    self.container.data('moving.wijlightbox', false);\n    if ($.isFunction(complete)) {\n        complete.apply(self);\n    }\n}",
    "receiverBase": "self",
    "receiverCallee": "_moveTo"
  },
  {
    "callback": "function () {\n    if (self.isPlaying() && !self.next()) {\n        self.stop();\n    }\n}",
    "receiverBase": "timerMeter",
    "receiverCallee": "animate"
  },
  {
    "callback": "function () {\n    if (self.isPlaying() && !self.next()) {\n        self.stop();\n    }\n}",
    "receiverBase": "window",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (i, offsetPosition) {\n    if (+myAt[i] === myAt[i]) {\n        offset[i] = myAt[i];\n        myAt[i] = offsetPosition;\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    self._createText();\n}",
    "receiverBase": "container",
    "receiverCallee": "fadeIn"
  },
  {
    "callback": "function (e) {\n    var srcElement = e.target || e.srcElement;\n    if (self._isOpen() && !!o.closeOnOuterClick) {\n        if (srcElement !== self.container.get(0) && $(srcElement).parents().index(self.container) < 0) {\n            self._close();\n        }\n    }\n}",
    "receiverBase": "bind",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    self._adjustPlayerSize(self.content.innerWidth(), self.content.innerHeight());\n}",
    "receiverBase": "self",
    "receiverCallee": "_resize"
  },
  {
    "callback": "function () {\n    if (self.toolBox) {\n        self.toolBox.css({\n            top: '2px',\n            right: '4px'\n        });\n    }\n    self.frame.width(toRect.width);\n    self.container.width(self.frame.outerWidth());\n    self._createText();\n    self._adjustPlayerSize(self.content.innerWidth(), self.content.innerHeight());\n}",
    "receiverBase": "self",
    "receiverCallee": "_moveTo"
  },
  {
    "callback": "function () {\n    onload.apply(self);\n}",
    "receiverBase": "window",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    if (cached === false) {\n        self._showWaiting();\n    }\n}",
    "receiverBase": "window",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    if (onload && $.isFunction(onload)) {\n        onload.apply(lightbox);\n    }\n}",
    "receiverBase": "appendTo",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    lightbox._close();\n    return false;\n}",
    "receiverBase": "css",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    var lay;\n    if (this.mask) {\n        lay = $.wijmo.wijlightbox.overlay;\n        $(document).bind(lay.events, function (event) {\n            if ($(event.target).zIndex() < lay.zIndex) {\n                return false;\n            }\n        });\n    }\n}",
    "receiverBase": "window",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (event) {\n    if ($(event.target).zIndex() < lay.zIndex) {\n        return false;\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (event) {\n    return event + '.wijlightbox-overlay';\n}",
    "receiverBase": "$",
    "receiverCallee": "map"
  },
  {
    "callback": "function (require, exports) {\n    function makeProxy(type) {\n        var name = type + 'DistanceProxy';\n        exports[name] = function () {\n        };\n        exports[name].prototype.distanceBetween = function (a, b) {\n            return a['distanceTo' + type](b);\n        };\n    }\n    makeProxy('HSV');\n    makeProxy('RGB');\n    makeProxy('CMYK');\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function (s) {\n    return s ? s.replace('.', '').toLowerCase() : s;\n}",
    "receiverBase": "dojo",
    "receiverCallee": "map"
  },
  {
    "callback": "function (chunk, i) {\n    if (!chunk) {\n        chunks[i] = '';\n    } else {\n        chunks[i] = (literal ? applyLiteral : applyPattern)(chunk);\n        literal = !literal;\n    }\n}",
    "receiverBase": "dojo",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (desc) {\n    var bundle = dojo.i18n.getLocalization(desc.pkg, desc.name, locale);\n    buddhist = dojo.mixin(buddhist, bundle);\n}",
    "receiverBase": "dojo",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    var div = document.createElement('div');\n    var child = div.appendChild(document.createElement('div'));\n    var observer = new JsMutationObserver(function () {\n        });\n    observer.observe(div, { attributes: true });\n    child.setAttribute('a', 'A');\n    child.setAttribute('a', 'B');\n    var records = observer.takeRecords();\n    assert.strictEqual(records.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var div = document.createElement('div');\n    var observer = new JsMutationObserver(function () {\n        });\n    observer.observe(div, { attributes: true });\n    div.setAttribute('a', 'A');\n    observer.disconnect();\n    var records = observer.takeRecords();\n    assert.strictEqual(records.length, 0);\n    div.setAttribute('b', 'B');\n    records = observer.takeRecords();\n    assert.strictEqual(records.length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function ($, window, undefined) {\n    'use strict';\n    $.fn.foundationAlerts = function (options) {\n        var settings = $.extend({ callback: $.noop }, options);\n        $(document).on('click', '.alert-box a.close', function (e) {\n            e.preventDefault();\n            $(this).closest('.alert-box').fadeOut(function () {\n                $(this).remove();\n                settings.callback();\n            });\n        });\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (e) {\n    e.preventDefault();\n    $(this).closest('.alert-box').fadeOut(function () {\n        $(this).remove();\n        settings.callback();\n    });\n}",
    "receiverBase": "$",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    $(this).remove();\n    settings.callback();\n}",
    "receiverBase": "closest",
    "receiverCallee": "fadeOut"
  },
  {
    "callback": "function (node) {\n    if (node == cursorLocation) {\n        pastCursorLocation = true;\n    } else if (isParagraphBoundary(node)) {\n        if (pastCursorLocation) {\n            return true;\n        } else {\n            buffer = [];\n        }\n    }\n    if (node.nodeType == goog.dom.NodeType.TEXT) {\n        buffer.push(node.nodeValue);\n    }\n    return false;\n}",
    "receiverBase": "iter",
    "receiverCallee": "some"
  },
  {
    "callback": "function (change) {\n    change.changes.forEach(function (item) {\n        if (typeof pending[item.rev] !== 'undefined') {\n            pending[item.rev].resolve({ rev: item.rev });\n            delete pending[item.rev];\n        } else {\n            bufferChange(item.rev);\n        }\n    });\n}",
    "receiverBase": "changes",
    "receiverCallee": "on"
  },
  {
    "callback": "function (item) {\n    if (typeof pending[item.rev] !== 'undefined') {\n        pending[item.rev].resolve({ rev: item.rev });\n        delete pending[item.rev];\n    } else {\n        bufferChange(item.rev);\n    }\n}",
    "receiverBase": "changes",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (err) {\n    delete pending[rev];\n    console.log(err);\n    return BPromise.reject(err);\n}",
    "receiverBase": "timeout",
    "receiverCallee": "catch"
  }
]