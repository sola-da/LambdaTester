[
  {
    "callback": "function () {\n    called = true;\n}",
    "receiverBase": "$",
    "receiverCallee": "one"
  },
  {
    "callback": "function () {\n    $.support.transition = transitionEnd();\n}",
    "receiverBase": "",
    "receiverCallee": "$"
  },
  {
    "callback": "function () {\n    var $this = $(this);\n    var data = $this.data('bs.alert');\n    if (!data)\n        $this.data('bs.alert', data = new Alert(this));\n    if (typeof option == 'string')\n        data[option].call($this);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    state == 'loadingText' ? $el.addClass(d).attr(d, d) : $el.removeClass(d).removeAttr(d);\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    var $this = $(this);\n    var data = $this.data('bs.button');\n    var options = typeof option == 'object' && option;\n    if (!data)\n        $this.data('bs.button', data = new Button(this, options));\n    if (option == 'toggle')\n        data.toggle();\n    else if (option)\n        data.setState(option);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (e) {\n    var $btn = $(e.target);\n    if (!$btn.hasClass('btn'))\n        $btn = $btn.closest('.btn');\n    $btn.button('toggle');\n    e.preventDefault();\n}",
    "receiverBase": "$",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    that.to(pos);\n}",
    "receiverBase": "$element",
    "receiverCallee": "one"
  },
  {
    "callback": "function () {\n    var $nextIndicator = $(that.$indicators.children()[that.getActiveIndex()]);\n    $nextIndicator && $nextIndicator.addClass('active');\n}",
    "receiverBase": "$element",
    "receiverCallee": "one"
  },
  {
    "callback": "function () {\n    $next.removeClass([\n        type,\n        direction\n    ].join(' ')).addClass('active');\n    $active.removeClass([\n        'active',\n        direction\n    ].join(' '));\n    that.sliding = false;\n    setTimeout(function () {\n        that.$element.trigger('slid');\n    }, 0);\n}",
    "receiverBase": "$active",
    "receiverCallee": "one"
  },
  {
    "callback": "function () {\n    that.$element.trigger('slid');\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (e) {\n    var $this = $(this), href;\n    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, ''));\n    var options = $.extend({}, $target.data(), $this.data());\n    var slideIndex = $this.attr('data-slide-to');\n    if (slideIndex)\n        options.interval = false;\n    $target.carousel(options);\n    if (slideIndex = $this.attr('data-slide-to')) {\n        $target.data('bs.carousel').to(slideIndex);\n    }\n    e.preventDefault();\n}",
    "receiverBase": "$",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    $('[data-ride=\"carousel\"]').each(function () {\n        var $carousel = $(this);\n        $carousel.carousel($carousel.data());\n    });\n}",
    "receiverBase": "$",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    var $carousel = $(this);\n    $carousel.carousel($carousel.data());\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var $this = $(this);\n    var data = $this.data('bs.collapse');\n    var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option);\n    if (!data)\n        $this.data('bs.collapse', data = new Collapse(this, options));\n    if (typeof option == 'string')\n        data[option]();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (e) {\n    var $parent = getParent($(this));\n    if (!$parent.hasClass('open'))\n        return;\n    $parent.trigger(e = $.Event('hide.bs.dropdown'));\n    if (e.isDefaultPrevented())\n        return;\n    $parent.removeClass('open').trigger('hidden.bs.dropdown');\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var $this = $(this);\n    var data = $this.data('dropdown');\n    if (!data)\n        $this.data('dropdown', data = new Dropdown(this));\n    if (typeof option == 'string')\n        data[option].call($this);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (e) {\n    e.stopPropagation();\n}",
    "receiverBase": "on",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    that.$element.focus().trigger(e);\n}",
    "receiverBase": "find",
    "receiverCallee": "one"
  },
  {
    "callback": "function (e) {\n    if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {\n        this.$element.focus();\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "proxy"
  },
  {
    "callback": "function (e) {\n    e.which == 27 && this.hide();\n}",
    "receiverBase": "$",
    "receiverCallee": "proxy"
  },
  {
    "callback": "function () {\n    that.removeBackdrop();\n    that.$element.trigger('hidden.bs.modal');\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "backdrop"
  },
  {
    "callback": "function (e) {\n    if (e.target !== e.currentTarget)\n        return;\n    this.options.backdrop == 'static' ? this.$element[0].focus.call(this.$element[0]) : this.hide.call(this);\n}",
    "receiverBase": "$",
    "receiverCallee": "proxy"
  },
  {
    "callback": "function () {\n    var $this = $(this);\n    var data = $this.data('bs.modal');\n    var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option);\n    if (!data)\n        $this.data('bs.modal', data = new Modal(this, options));\n    if (typeof option == 'string')\n        data[option](_relatedTarget);\n    else if (options.show)\n        data.show(_relatedTarget);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (e) {\n    var $this = $(this);\n    var href = $this.attr('href');\n    var $target = $($this.attr('data-target') || href && href.replace(/.*(?=#[^\\s]+$)/, ''));\n    var option = $target.data('modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data());\n    e.preventDefault();\n    $target.modal(option, this).one('hide', function () {\n        $this.is(':visible') && $this.focus();\n    });\n}",
    "receiverBase": "$",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    $this.is(':visible') && $this.focus();\n}",
    "receiverBase": "modal",
    "receiverCallee": "one"
  },
  {
    "callback": "function () {\n    $(document.body).addClass('modal-open');\n}",
    "receiverBase": "$",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    $(document.body).removeClass('modal-open');\n}",
    "receiverBase": "on",
    "receiverCallee": "on"
  },
  {
    "callback": "function (key, value) {\n    if (defaults[key] != value)\n        options[key] = value;\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    if (self.hoverState == 'in')\n        self.show();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    if (self.hoverState == 'out')\n        self.hide();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    var $this = $(this);\n    var data = $this.data('bs.tooltip');\n    var options = typeof option == 'object' && option;\n    if (!data)\n        $this.data('bs.tooltip', data = new Tooltip(this, options));\n    if (typeof option == 'string')\n        data[option]();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var $this = $(this);\n    var data = $this.data('bs.popover');\n    var options = typeof option == 'object' && option;\n    if (!data)\n        $this.data('bs.popover', data = new Popover(this, options));\n    if (typeof option == 'string')\n        data[option]();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var $el = $(this);\n    var href = $el.data('target') || $el.attr('href');\n    var $href = /^#\\w/.test(href) && $(href);\n    return $href && $href.length && [[\n            $href[offsetMethod]().top + (!$.isWindow(self.$scrollElement.get(0)) && self.$scrollElement.scrollTop()),\n            href\n        ]] || null;\n}",
    "receiverBase": "find",
    "receiverCallee": "map"
  },
  {
    "callback": "function (a, b) {\n    return a[0] - b[0];\n}",
    "receiverBase": "map",
    "receiverCallee": "sort"
  },
  {
    "callback": "function () {\n    self.offsets.push(this[0]);\n    self.targets.push(this[1]);\n}",
    "receiverBase": "sort",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var $this = $(this);\n    var data = $this.data('bs.scrollspy');\n    var options = typeof option == 'object' && option;\n    if (!data)\n        $this.data('bs.scrollspy', data = new ScrollSpy(this, options));\n    if (typeof option == 'string')\n        data[option]();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    $('[data-spy=\"scroll\"]').each(function () {\n        var $spy = $(this);\n        $spy.scrollspy($spy.data());\n    });\n}",
    "receiverBase": "$",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    var $spy = $(this);\n    $spy.scrollspy($spy.data());\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    $this.trigger({\n        type: 'shown.bs.tab',\n        relatedTarget: previous\n    });\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "activate"
  },
  {
    "callback": "function () {\n    var $this = $(this);\n    var data = $this.data('bs.tab');\n    if (!data)\n        $this.data('bs.tab', data = new Tab(this));\n    if (typeof option == 'string')\n        data[option]();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (e) {\n    e.preventDefault();\n    $(this).tab('show');\n}",
    "receiverBase": "$",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    var $this = $(this);\n    var data = $this.data('bs.affix');\n    var options = typeof option == 'object' && option;\n    if (!data)\n        $this.data('bs.affix', data = new Affix(this, options));\n    if (typeof option == 'string')\n        data[option]();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    $('[data-spy=\"affix\"]').each(function () {\n        var $spy = $(this);\n        var data = $spy.data();\n        data.offset = data.offset || {};\n        if (data.offsetBottom)\n            data.offset.bottom = data.offsetBottom;\n        if (data.offsetTop)\n            data.offset.top = data.offsetTop;\n        $spy.affix(data);\n    });\n}",
    "receiverBase": "$",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    var $spy = $(this);\n    var data = $spy.data();\n    data.offset = data.offset || {};\n    if (data.offsetBottom)\n        data.offset.bottom = data.offsetBottom;\n    if (data.offsetTop)\n        data.offset.top = data.offsetTop;\n    $spy.affix(data);\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function (elt) {\n    var centroid = elt.geo_info.centroid;\n    var lat = parseFloat(centroid[0]);\n    var lng = parseFloat(centroid[1]);\n    var url = 'http://stormy-mountain-3909.herokuapp.com/detroit/parcel?lat=' + lat + '&lng=' + lng;\n    console.log(url);\n    apiGet(url).done(function (data) {\n        console.log(data);\n    });\n}",
    "receiverBase": "find",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (data) {\n    console.log(data);\n}",
    "receiverBase": "apiGet",
    "receiverCallee": "done"
  },
  {
    "callback": "function (item) {\n    if (!(item[0] in WSHModule)) {\n        WSHModule[item[0]] = item[1];\n    }\n}",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (item, i) {\n    this[item[0]] = item[1](WScript.Arguments.Item(i));\n}",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (key) {\n    global[key] = globals[key];\n}",
    "receiverBase": "keys",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (combo, records, eOpts) {\n    this._changedProps.zoomIdx = records[0].index;\n    combo.blur();\n}",
    "receiverBase": "Ext",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (combo, records, eOpts) {\n    this._changedProps.fontrenderIdx = records[0].index;\n    combo.blur();\n}",
    "receiverBase": "Ext",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (combo, records, eOpts) {\n    this._changedProps.unitIdx = records[0].index;\n    combo.blur();\n}",
    "receiverBase": "Ext",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (combo, records, eOpts) {\n    this._changedProps.saveVal = records[0].data.field1;\n    combo.blur();\n}",
    "receiverBase": "Ext",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    assert.throws(function () {\n        new SVGPathData.Transformer();\n    }, 'Please provide a transform callback to receive commands.');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    new SVGPathData.Transformer();\n}",
    "receiverBase": "assert",
    "receiverCallee": "throws"
  },
  {
    "callback": "function () {\n    assert.throws(function () {\n        new SVGPathData.Transformer(function () {\n        });\n    }, 'Please provide a valid transform (returning a function).');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    new SVGPathData.Transformer(function () {\n    });\n}",
    "receiverBase": "assert",
    "receiverCallee": "throws"
  },
  {
    "callback": "function () {\n    assert.doesNotThrow(function () {\n        SVGPathData.Transformer(SVGPathData.Transformer.SCALE, 1, 1);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    SVGPathData.Transformer(SVGPathData.Transformer.SCALE, 1, 1);\n}",
    "receiverBase": "assert",
    "receiverCallee": "doesNotThrow"
  },
  {
    "callback": "function () {\n    var encoder = new SVGPathData.Transformer(SVGPathData.Transformer.SCALE, 1, 1);\n    encoder.write({\n        type: SVGPathData.Parser.LINE_TO,\n        relative: true,\n        x: 10,\n        y: 10\n    });\n    encoder.end();\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var exit_code = 0;\n    for (i = 0, l = pages.length; i < l; i++) {\n        page = pages[i];\n        if (page.__exit_code === null) {\n            return;\n        }\n        exit_code |= page.__exit_code;\n    }\n    phantom.exit(exit_code);\n}",
    "receiverBase": "",
    "receiverCallee": "setInterval"
  },
  {
    "callback": "function () {\n    window['%resultsObj%'] = {};\n    window.fs_path_separator = '%fs_path_separator%';\n    window.__phantom_writeFile = function (filename, text) {\n        window['%resultsObj%'][filename] = text;\n    };\n}",
    "receiverBase": "page",
    "receiverCallee": "evaluate"
  },
  {
    "callback": "function () {\n    return window['%resultsObj%'] || {};\n}",
    "receiverBase": "page",
    "receiverCallee": "evaluate"
  },
  {
    "callback": "function () {\n    if (window.jasmineReporters && window.jasmineReporters.startTime) {\n        return !!window.jasmineReporters.endTime;\n    }\n    var durElem = document.querySelector('.html-reporter .duration');\n    if (!durElem) {\n        durElem = document.querySelector('.jasmine_html-reporter .duration');\n    }\n    return durElem && durElem.textContent && durElem.textContent.toLowerCase().indexOf('finished in') === 0;\n}",
    "receiverBase": "page",
    "receiverCallee": "evaluate"
  },
  {
    "callback": "function () {\n    var resultElem = document.querySelector('.html-reporter .alert .bar');\n    if (!resultElem) {\n        resultElem = document.querySelector('.jasmine_html-reporter .alert .bar');\n    }\n    return resultElem && resultElem.textContent && resultElem.textContent.match(/(\\d+) spec.* (\\d+) failure.*/) || ['Unable to determine success or failure.'];\n}",
    "receiverBase": "page",
    "receiverCallee": "evaluate"
  },
  {
    "callback": "function (path, next) {\n    fs.mkdir(path, mode, next);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "$unaryOp"
  },
  {
    "callback": "function (file, next) {\n    if (!file.path)\n        return next('not a file sequence!');\n    file.abspath = async.abspath(file.path);\n    next();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (file, next) {\n    fs.open(file.path, mode || file.mode || 'r', flags || file.flags || 438, next);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "$fileOp"
  },
  {
    "callback": "function (file, next) {\n    if (!file.fd)\n        next(null, file);\n    var fd = file.fd;\n    delete file.fd;\n    fs.close(fd, next);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "$fileOp"
  },
  {
    "callback": "function (path, next) {\n    Path.exists(path, function (exists) {\n        next(null, exists);\n    });\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "$unaryOp"
  },
  {
    "callback": "function (exists) {\n    next(null, exists);\n}",
    "receiverBase": "Path",
    "receiverCallee": "exists"
  },
  {
    "callback": "function (file, next) {\n    fs.chmod(file.path, mode, function (err) {\n        if (!err && file.stat)\n            file.stat.mode = mode;\n        next(err);\n    });\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "$fileOp"
  },
  {
    "callback": "function (err) {\n    if (!err && file.stat)\n        file.stat.mode = mode;\n    next(err);\n}",
    "receiverBase": "fs",
    "receiverCallee": "chmod"
  },
  {
    "callback": "function (file, next) {\n    async.chown(file.path, owner, group, recursive, next);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "$fileOp"
  },
  {
    "callback": "function (file, next) {\n    if (!file.path)\n        return next('not a file sequence!');\n    fn(file.path, function (err, result) {\n        if (err)\n            return next(err, file);\n        if (storeKey)\n            file[storeKey] = result;\n        next();\n    });\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (err, result) {\n    if (err)\n        return next(err, file);\n    if (storeKey)\n        file[storeKey] = result;\n    next();\n}",
    "receiverBase": "",
    "receiverCallee": "fn"
  },
  {
    "callback": "function (file, next) {\n    if (!file.path)\n        return next('not a file sequence!');\n    fn(file, function (err, result) {\n        if (err)\n            return next(err, file);\n        if (storeKey)\n            file[storeKey] = result;\n        next();\n    });\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (err, result) {\n    if (err)\n        return next(err, file);\n    if (storeKey)\n        file[storeKey] = result;\n    next();\n}",
    "receiverBase": "",
    "receiverCallee": "fn"
  },
  {
    "callback": "function (file, next) {\n    if (!file.path)\n        return next('not a file sequence!');\n    if (encoding)\n        fs.readFile(file.path, encoding, readCallback);\n    else\n        fs.readFile(file.path, readCallback);\n    function readCallback(err, data) {\n        if (err)\n            return next(err);\n        file.data = data;\n        next();\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (file, next) {\n    fs.writeFile(file.path, data || file.data, next);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "$fileOp"
  },
  {
    "callback": "function (name) {\n    var path = root ? Path.join(root, name) : name;\n    return {\n        path: path,\n        name: Path.basename(path)\n    };\n}",
    "receiverBase": "files",
    "receiverCallee": "map"
  },
  {
    "callback": "function (file) {\n    return file.exists;\n}",
    "receiverBase": "exists",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (file) {\n    if (file.stat.isDirectory())\n        dirs.push(file.name);\n    else\n        files.push(file.path);\n}",
    "receiverBase": "stat",
    "receiverCallee": "each"
  },
  {
    "callback": "function (err) {\n    if (err)\n        return callback(err);\n    if (!dirs.length && !files.length)\n        return callback(async.STOP);\n    var gens = dirs.map(function (dir) {\n            return async.glob(head + dir + '/' + tail.slice(1).join('/'));\n        });\n    if (files.length)\n        gens.unshift(async.files(files));\n    gen = async.concat.apply(async, gens);\n    return gen.next(callback);\n}",
    "receiverBase": "each",
    "receiverCallee": "end"
  },
  {
    "callback": "function (dir) {\n    return async.glob(head + dir + '/' + tail.slice(1).join('/'));\n}",
    "receiverBase": "dirs",
    "receiverCallee": "map"
  },
  {
    "callback": "function (err, files) {\n    if (err)\n        return callback(err);\n    filesGen = async.files(files, path);\n    filesGen.next(callback);\n}",
    "receiverBase": "fs",
    "receiverCallee": "readdir"
  },
  {
    "callback": "function (file) {\n    if (file.stat.isDirectory())\n        dirs.push(file.path);\n    else\n        files.push(file.path);\n}",
    "receiverBase": "filter",
    "receiverCallee": "each"
  },
  {
    "callback": "function (err) {\n    if (err)\n        return callback(err);\n    var gens = dirs.map(function (dir) {\n            return async.walkfiles(dir, recurse, order);\n        });\n    if (order == PREORDER)\n        gens.unshift(async.files([path]));\n    else\n        files.push(path);\n    gens.push(async.files(files).delay(0, 250));\n    gen = async.concat.apply(async, gens);\n    gen.next(callback);\n}",
    "receiverBase": "each",
    "receiverCallee": "end"
  },
  {
    "callback": "function (dir) {\n    return async.walkfiles(dir, recurse, order);\n}",
    "receiverBase": "dirs",
    "receiverCallee": "map"
  },
  {
    "callback": "function (err, stat) {\n    if (stat && stat.isDirectory())\n        destPath = Path.join(destPath, Path.basename(srcPath));\n    if (!force) {\n        Path.exists(destPath, function (exists) {\n            if (exists)\n                callback('destination file already exists!');\n            else\n                copy();\n        });\n    } else\n        copy();\n}",
    "receiverBase": "fs",
    "receiverCallee": "stat"
  },
  {
    "callback": "function (exists) {\n    if (exists)\n        callback('destination file already exists!');\n    else\n        copy();\n}",
    "receiverBase": "Path",
    "receiverCallee": "exists"
  },
  {
    "callback": "function (exists) {\n    if (!exists)\n        fs.mkdir(destPath, 493, walk);\n    else\n        walk();\n}",
    "receiverBase": "Path",
    "receiverCallee": "exists"
  },
  {
    "callback": "function (file, next) {\n    var relative = file.path.substring(srcPath.length);\n    if (!relative)\n        return next();\n    var dest = Path.join(destPath, relative);\n    if (file.stat.isDirectory())\n        fs.mkdir(dest, file.stat.mode, next);\n    else\n        async.copyfile(file.path, dest, false, next);\n}",
    "receiverBase": "stat",
    "receiverCallee": "each"
  },
  {
    "callback": "function (file, next) {\n    if (file.stat.isDirectory())\n        fs.rmdir(file.path, next);\n    else\n        fs.unlink(file.path, next);\n}",
    "receiverBase": "stat",
    "receiverCallee": "each"
  },
  {
    "callback": "function (dirpath) {\n    currentPath += '/' + dirpath;\n    return {\n        dirpath: currentPath,\n        name: Path.basename(currentPath)\n    };\n}",
    "receiverBase": "list",
    "receiverCallee": "map"
  },
  {
    "callback": "function (file, next) {\n    fs.stat(file.dirpath, function (err, stat) {\n        if (err && err.errno == 2)\n            fs.mkdir(file.dirpath, 493, next);\n        else if (err)\n            next(err);\n        else if (!stat.isDirectory())\n            next(async.STOP);\n        else\n            next();\n    });\n}",
    "receiverBase": "map",
    "receiverCallee": "each"
  },
  {
    "callback": "function (err, stat) {\n    if (err && err.errno == 2)\n        fs.mkdir(file.dirpath, 493, next);\n    else if (err)\n        next(err);\n    else if (!stat.isDirectory())\n        next(async.STOP);\n    else\n        next();\n}",
    "receiverBase": "fs",
    "receiverCallee": "stat"
  },
  {
    "callback": "function (err) {\n    callback(err, dirpath);\n}",
    "receiverBase": "each",
    "receiverCallee": "end"
  },
  {
    "callback": "function (err, stdout, stderr) {\n    if (err)\n        return callback(err + ': ' + stdout + '\\n' + cmd);\n    else\n        return callback();\n}",
    "receiverBase": "",
    "receiverCallee": "exec"
  },
  {
    "callback": "function () {\n    V.ViewerAdapter.updateFancyboxAfterSetupSize();\n    if (currentQuizSession && currentQuizSession.url) {\n        _loadQr(currentQuizSession.url);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (data) {\n    disableAnswerButton(quizDOM);\n    var options = {};\n    options.width = '80%';\n    options.text = V.I18n.getTrans('i.QuizSubmittedAlert');\n    var button1 = {};\n    button1.text = V.I18n.getTrans('i.Ok');\n    button1.callback = function () {\n        $.fancybox.close();\n    };\n    options.buttons = [button1];\n    V.Utils.showDialog(options);\n}",
    "receiverBase": "API",
    "receiverCallee": "sendAnwers"
  },
  {
    "callback": "function (error) {\n    disableAnswerButton(quizDOM);\n    var options = {};\n    options.width = '80%';\n    options.text = V.I18n.getTrans('i.QuizNotSubmittedAlert');\n    var button1 = {};\n    button1.text = V.I18n.getTrans('i.Ok');\n    button1.callback = function () {\n        $.fancybox.close();\n    };\n    options.buttons = [button1];\n    V.Utils.showDialog(options);\n}",
    "receiverBase": "API",
    "receiverCallee": "sendAnwers"
  },
  {
    "callback": "function (index, pn) {\n    if ($(pn).is(':visible')) {\n        name = $(pn).val();\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function (data) {\n    _afterCloseQuizSession();\n}",
    "receiverBase": "API",
    "receiverCallee": "closeQuizSession"
  },
  {
    "callback": "function () {\n    _afterCloseQuizSession();\n}",
    "receiverBase": "API",
    "receiverCallee": "closeQuizSession"
  },
  {
    "callback": "function (results) {\n    _drawResults(results);\n    _startPolling();\n}",
    "receiverBase": "API",
    "receiverCallee": "getResults"
  },
  {
    "callback": "function () {\n    $('#qr_overlay').show();\n}",
    "receiverBase": "$",
    "receiverCallee": "click"
  },
  {
    "callback": "function () {\n    $('#qr_overlay').hide();\n}",
    "receiverBase": "$",
    "receiverCallee": "click"
  },
  {
    "callback": "function () {\n    if (!currentQuizSession) {\n        _stopPolling();\n        return;\n    }\n    V.Quiz.API.getResults(currentQuizSession.id, function (results) {\n        _drawResults(results);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "setInterval"
  },
  {
    "callback": "function (results) {\n    _drawResults(results);\n}",
    "receiverBase": "API",
    "receiverCallee": "getResults"
  },
  {
    "callback": "function (index, choice) {\n    var newChoiceId = _generateRandomQuizChoiceId();\n    quizChoicesIds[newChoiceId] = quizJSON.choices[index].id;\n    quizJSON.choices[index].id = newChoiceId;\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    if (currentQuizSession && currentQuizSession.url) {\n        _loadQr(currentQuizSession.url);\n        _updateQrSizeOnOverlay();\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    var el = elm.find('input');\n    expect(el.attr('pattern')).toMatch(/GIR 0AA/);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var el = elm.find('input');\n    expect(el.attr('min')).toBe('5');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var el = elm.find('input');\n    expect(el.attr('max')).toBe('300');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var el = elm.find('input');\n    expect(el.attr('step')).toBe('5');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var postcodeGroup = angular.element(elm.find('label')[1]).parent();\n    expect(postcodeGroup).toHaveClass('has-error');\n    expect(postcodeGroup).toHaveClass('form-group');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(postcode).toHaveClass('has-error');\n    expect(postcode).toHaveClass('form-group');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(date).not.toHaveClass('has-error');\n    expect(date).toHaveClass('form-group');\n    var input = angular.element(date.find('input'));\n    input.val('01/01/1980');\n    input.triggerHandler('change');\n    expect(date).not.toHaveClass('has-error');\n    input.val('');\n    input.triggerHandler('change');\n    expect(date).toHaveClass('has-error');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(date).not.toHaveClass('has-error');\n    expect(date).toHaveClass('form-group');\n    var input = angular.element(date.find('input'));\n    input.val('01/01/1980');\n    input.triggerHandler('change');\n    expect(date).not.toHaveClass('has-error');\n    input.val('');\n    input.triggerHandler('change');\n    expect(date).toHaveClass('has-error');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var input = angular.element(postcode.find('input'));\n    input.val('01/01/1980');\n    input.triggerHandler('change');\n    expect(postcode).toHaveClass('has-error');\n    expect(postcode).toHaveClass('form-group');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (json) {\n    return !json.github.full_name.indexOf(query);\n}",
    "receiverBase": "components",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (a, b) {\n    return a.github.full_name.length - b.github.full_name.length;\n}",
    "receiverBase": "filter",
    "receiverCallee": "sort"
  },
  {
    "callback": "function (keyword) {\n    return /^\\w+$/.test(keyword);\n}",
    "receiverBase": "filter",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (keyword) {\n    filters.push(fns.filterBy.keyword(keyword));\n}",
    "receiverBase": "filter",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (json) {\n    return filters.some(function (filter) {\n        return filter(json);\n    });\n}",
    "receiverBase": "components",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (filter) {\n    return filter(json);\n}",
    "receiverBase": "filters",
    "receiverCallee": "some"
  },
  {
    "callback": "function ($rootScope, $httpBackend, $templateCache) {\n    $scope = $rootScope;\n    httpBackend = $httpBackend;\n    templateCache = $templateCache;\n    templateUtil.addTemplate('common-ui/angular-directives/accordionWizard/accordionWizard.html', httpBackend, templateCache);\n    templateUtil.addTemplate('common-ui/angular-directives/accordionWizard/accordionWizardGroup.html', httpBackend, templateCache);\n}",
    "receiverBase": "",
    "receiverCallee": "inject"
  },
  {
    "callback": "function ($controller) {\n    $attrs = {};\n    $element = {};\n    ctrl = $controller('AccordionWizardController', {\n        $scope: $scope,\n        $element: $element,\n        $attrs: $attrs\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "inject"
  },
  {
    "callback": "function () {\n    it('adds a the specified panel to the collection', function () {\n        var group1, group2;\n        ctrl.addGroup(group1 = $scope.$new());\n        ctrl.addGroup(group2 = $scope.$new());\n        expect(ctrl.groups.length).toBe(2);\n        expect(ctrl.groups[0]).toBe(group1);\n        expect(ctrl.groups[1]).toBe(group2);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "describe"
  },
  {
    "callback": "function () {\n    var group1, group2;\n    ctrl.addGroup(group1 = $scope.$new());\n    ctrl.addGroup(group2 = $scope.$new());\n    expect(ctrl.groups.length).toBe(2);\n    expect(ctrl.groups[0]).toBe(group1);\n    expect(ctrl.groups[1]).toBe(group2);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    ctrl.addGroup(group1 = {\n        isOpen: true,\n        $on: angular.noop\n    });\n    ctrl.addGroup(group2 = {\n        isOpen: true,\n        $on: angular.noop\n    });\n    ctrl.addGroup(group3 = {\n        isOpen: true,\n        $on: angular.noop\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    delete $attrs.closeOthers;\n    ctrl.closeOthers(group2);\n    expect(group1.isOpen).toBe(false);\n    expect(group2.isOpen).toBe(true);\n    expect(group3.isOpen).toBe(false);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    $attrs.closeOthers = 'true';\n    ctrl.closeOthers(group3);\n    expect(group1.isOpen).toBe(false);\n    expect(group2.isOpen).toBe(false);\n    expect(group3.isOpen).toBe(true);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    $attrs.closeOthers = 'false';\n    ctrl.closeOthers(group2);\n    expect(group1.isOpen).toBe(true);\n    expect(group2.isOpen).toBe(true);\n    expect(group3.isOpen).toBe(true);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (accordionConfig) {\n    originalCloseOthers = accordionConfig.closeOthers;\n    accordionConfig.closeOthers = false;\n}",
    "receiverBase": "",
    "receiverCallee": "inject"
  },
  {
    "callback": "function (accordionConfig) {\n    accordionConfig.closeOthers = originalCloseOthers;\n}",
    "receiverBase": "",
    "receiverCallee": "inject"
  },
  {
    "callback": "function () {\n    ctrl.closeOthers(group2);\n    expect(group1.isOpen).toBe(true);\n    expect(group2.isOpen).toBe(true);\n    expect(group3.isOpen).toBe(true);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var group1, group2, group3;\n    ctrl.addGroup(group1 = $scope.$new());\n    ctrl.addGroup(group2 = $scope.$new());\n    ctrl.addGroup(group3 = $scope.$new());\n    ctrl.removeGroup(group2);\n    expect(ctrl.groups.length).toBe(2);\n    expect(ctrl.groups[0]).toBe(group1);\n    expect(ctrl.groups[1]).toBe(group3);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var group1, group2;\n    ctrl.addGroup(group1 = $scope.$new());\n    ctrl.addGroup(group2 = $scope.$new());\n    expect(ctrl.groups.length).toBe(2);\n    ctrl.removeGroup({});\n    expect(ctrl.groups.length).toBe(2);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (_$rootScope_, _$compile_) {\n    scope = _$rootScope_;\n    $compile = _$compile_;\n}",
    "receiverBase": "",
    "receiverCallee": "inject"
  },
  {
    "callback": "function () {\n    element = groups = scope = $compile = undefined;\n}",
    "receiverBase": "",
    "receiverCallee": "afterEach"
  },
  {
    "callback": "function () {\n    var tpl = '<accordion-wizard>' + '<accordion-wizard-group heading=\"title 1\">Content 1</accordion-wizard-group>' + '<accordion-wizard-group heading=\"title 2\">Content 2</accordion-wizard-group>' + '</accordion-wizard>';\n    element = angular.element(tpl);\n    $compile(element)(scope);\n    scope.$digest();\n    groups = element.find('.accordion-group');\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    element.remove();\n}",
    "receiverBase": "",
    "receiverCallee": "afterEach"
  },
  {
    "callback": "function () {\n    findGroupLink(0).click();\n    scope.$digest();\n    expect(findGroupBody(0).scope().isOpen).toBe(true);\n    findGroupLink(1).click();\n    scope.$digest();\n    expect(findGroupBody(0).scope().isOpen).toBe(false);\n    expect(findGroupBody(1).scope().isOpen).toBe(true);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    findGroupLink(0).click();\n    scope.$digest();\n    expect(findGroupBody(0).scope().isOpen).toBe(true);\n    findGroupLink(0).click();\n    scope.$digest();\n    expect(findGroupBody(0).scope().isOpen).toBe(false);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var tpl = '<accordion-wizard>' + '<accordion-wizard-group ng-repeat=\"group in groups\" heading=\"{{group.name}}\">{{group.content}}</accordion-wizard-group>' + '</accordion-wizard>';\n    element = angular.element(tpl);\n    model = [\n        {\n            name: 'title 1',\n            content: 'Content 1'\n        },\n        {\n            name: 'title 2',\n            content: 'Content 2'\n        }\n    ];\n    $compile(element)(scope);\n    scope.$digest();\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    groups = element.find('.accordion-group');\n    expect(groups.length).toEqual(0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    scope.groups = model;\n    scope.$digest();\n    groups = element.find('.accordion-group');\n    expect(groups.length).toEqual(2);\n    expect(findGroupHeadingContent(0).text()).toEqual('title 1');\n    expect(findGroupBodyInner(0).text().trim()).toEqual('Content 1');\n    expect(findGroupHeadingContent(1).text()).toEqual('title 2');\n    expect(findGroupBodyInner(1).text().trim()).toEqual('Content 2');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    scope.groups = model;\n    scope.$digest();\n    groups = element.find('.accordion-group');\n    expect(groups.length).toEqual(2);\n    scope.groups.splice(0, 1);\n    scope.$digest();\n    groups = element.find('.accordion-group');\n    expect(groups.length).toEqual(1);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var tpl = '<accordion-wizard>' + '<accordion-wizard-group heading=\"title 1\" is-open=\"open.first\">Content 1</accordion-wizard-group>' + '<accordion-wizard-group heading=\"title 2\" is-open=\"open.second\">Content 2</accordion-wizard-group>' + '</accordion-wizard>';\n    element = angular.element(tpl);\n    scope.open = {\n        first: false,\n        second: true\n    };\n    $compile(element)(scope);\n    scope.$digest();\n    groups = element.find('.accordion-group');\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    expect(findGroupBody(0).scope().isOpen).toBe(false);\n    expect(findGroupBody(1).scope().isOpen).toBe(true);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    findGroupLink(0).click();\n    scope.$digest();\n    expect(scope.open.first).toBe(true);\n    findGroupLink(0).click();\n    scope.$digest();\n    expect(scope.open.second).toBe(false);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    element.remove();\n}",
    "receiverBase": "",
    "receiverCallee": "afterEach"
  },
  {
    "callback": "function () {\n    expect(findGroupBody(0)[0].clientHeight).not.toBe(0);\n    expect(findGroupBody(1)[0].clientHeight).toBe(0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(findGroupBody(0).scope().isOpen).toBe(false);\n    expect(findGroupBody(1).scope().isOpen).toBe(true);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    findGroupLink(0).click();\n    scope.$digest();\n    expect(findGroupBody(0).scope().isOpen).toBe(true);\n    expect(scope.groups[0].open).toBe(true);\n    findGroupLink(0).click();\n    scope.$digest();\n    expect(findGroupBody(0).scope().isOpen).toBe(false);\n    expect(scope.groups[0].open).toBe(false);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var tpl = '<accordion-wizard>' + '<accordion-wizard-group heading=\"title 1\" is-disabled=\"disabled\">Content 1</accordion-wizard-group>' + '</accordion-wizard>';\n    element = angular.element(tpl);\n    scope.disabled = true;\n    $compile(element)(scope);\n    scope.$digest();\n    groups = element.find('.accordion-group');\n    groupBody = findGroupBody(0);\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    expect(groupBody.scope().isOpen).toBeFalsy();\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    findGroupLink(0).click();\n    scope.$digest();\n    expect(groupBody.scope().isOpen).toBeFalsy();\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    scope.disabled = false;\n    scope.$digest();\n    expect(groupBody.scope().isOpen).toBeFalsy();\n    findGroupLink(0).click();\n    scope.$digest();\n    expect(groupBody.scope().isOpen).toBeTruthy();\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var tpl = '<accordion-wizard ng-init=\"a = [1,2,3]\">' + '<accordion-wizard-group heading=\"I get overridden\">' + '<accordion-wizard-heading>Heading Element <span ng-repeat=\"x in a\">{{x}}</span> </accordion-wizard-heading>' + 'Body' + '</accordion-wizard-group>' + '</accordion-wizard>';\n    element = $compile(tpl)(scope);\n    scope.$digest();\n    groups = element.find('.accordion-group');\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    expect(findGroupHeadingContent(0).text()).toBe('Heading Element 123 ');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(findGroupHeadingContent(0).find('span').scope().$id).toBe(findGroupBody(0).find('span').scope().$id);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var tpl = '<accordion-wizard ng-init=\"a = [1,2,3]\">' + '<accordion-wizard-group heading=\"I get overridden\">' + '<div accordion-wizard-heading>Heading Element <span ng-repeat=\"x in a\">{{x}}</span> </div>' + 'Body' + '</accordion-wizard-group>' + '</accordion-wizard>';\n    element = $compile(tpl)(scope);\n    scope.$digest();\n    groups = element.find('.accordion-group');\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    expect(findGroupHeadingContent(0).text()).toBe('Heading Element 123 ');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(findGroupHeadingContent(0).find('span').scope().$id).toBe(findGroupBody(0).find('span').scope().$id);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    element = $compile('<accordion-wizard><accordion-wizard-group ng-repeat=\"x in [1,2,3]\"><accordion-wizard-heading>{{x}}</accordion-wizard-heading></accordion-wizard-group></accordion-wizard>')(scope);\n    scope.$digest();\n    groups = element.find('.accordion-group');\n    expect(groups.length).toBe(3);\n    expect(findGroupHeadingContent(0).text()).toBe('1');\n    expect(findGroupHeadingContent(1).text()).toBe('2');\n    expect(findGroupHeadingContent(2).text()).toBe('3');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    element = $compile('<accordion-wizard><accordion-wizard-group ng-repeat=\"x in [1,2,3]\"><div accordion-wizard-heading>{{x}}</div></accordion-wizard-group></accordion-wizard>')(scope);\n    scope.$digest();\n    groups = element.find('.accordion-group');\n    expect(groups.length).toBe(3);\n    expect(findGroupHeadingContent(0).text()).toBe('1');\n    expect(findGroupHeadingContent(1).text()).toBe('2');\n    expect(findGroupHeadingContent(2).text()).toBe('3');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(findGroupLink(0).text()).toEqual('EditMe');\n    expect(findGroupBodyInner(0).text().trim()).toEqual('Content 1');\n    expect(findGroupSaveButton(0).text().trim()).toEqual('SaveMe');\n    expect(findGroupCancelButton(0).text().trim()).toEqual('CancelMe');\n    expect(findGroupSummary(0).text()).toEqual('SummaryText');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(findGroupLink(1).text()).toEqual('EditMe');\n    expect(findGroupBodyInner(1).text().trim()).toEqual('Content 2');\n    expect(findGroupSaveButton(1).text().trim()).toEqual('SaveMe');\n    expect(findGroupCancelButton(1).text().trim()).toEqual('CancelMe');\n    expect(findGroupSummary(1).text()).toEqual('SummaryText');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    element.remove();\n}",
    "receiverBase": "",
    "receiverCallee": "afterEach"
  },
  {
    "callback": "function () {\n    expect(findGroupSaveButton(0).attr('disabled')).toBeUndefined();\n    expect(findGroupSummary(0).text()).toBe('Nothing yet');\n    findGroupSaveButton(0).click();\n    expect(findGroupSummary(0).text()).toBe('Saved');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(findGroupCancelButton(0).attr('disabled')).toBeUndefined();\n    expect(findGroupSummary(0).text()).toBe('Nothing yet');\n    findGroupCancelButton(0).click();\n    expect(findGroupSummary(0).text()).toBe('Canceled');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    element.remove();\n}",
    "receiverBase": "",
    "receiverCallee": "afterEach"
  },
  {
    "callback": "function () {\n    expect(findGroupSaveButton(0).attr('disabled')).toBeUndefined();\n    expect(findGroupSaveButton(1).attr('disabled')).toBe('disabled');\n    expect(findGroupSaveButton(2).attr('disabled')).toBe('disabled');\n    scope.test = false;\n    scope.$apply();\n    expect(findGroupSaveButton(0).attr('disabled')).toBe('disabled');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (doc) {\n    if (doc.area) {\n        areas[doc.area] = doc.area;\n    }\n}",
    "receiverBase": "docs",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (deployment) {\n    var indexDoc = _.defaults({\n            docType: 'indexPage',\n            areas: areas\n        }, deployment);\n    indexDoc.id = 'index' + (deployment.name === 'default' ? '' : '-' + deployment.name);\n    docs.push(indexDoc);\n}",
    "receiverBase": "deployments",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    connection.exchange('node-simple-fanout', { type: 'fanout' }, function (exchange) {\n        exchange.on('basic-return', function (args) {\n            fired = true;\n            replyCode = args['replyCode'];\n            replyText = args['replyText'];\n            clearTimeout(fire);\n            followup();\n        });\n        exchange.publish('', 'hello', { mandatory: true });\n    });\n}",
    "receiverBase": "connection",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function (exchange) {\n    exchange.on('basic-return', function (args) {\n        fired = true;\n        replyCode = args['replyCode'];\n        replyText = args['replyText'];\n        clearTimeout(fire);\n        followup();\n    });\n    exchange.publish('', 'hello', { mandatory: true });\n}",
    "receiverBase": "connection",
    "receiverCallee": "exchange"
  },
  {
    "callback": "function (args) {\n    fired = true;\n    replyCode = args['replyCode'];\n    replyText = args['replyText'];\n    clearTimeout(fire);\n    followup();\n}",
    "receiverBase": "exchange",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    followup();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    addEventListener('DOMContentLoaded', function (event) {\n        document.body.addEventListener('iui.focus', trackEvent, false);\n    }, false);\n    function trackEvent(e) {\n        _gaq.push([\n            '_trackEvent',\n            'iUI',\n            'focus',\n            e.target.tagName + '#' + e.target.id\n        ]);\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (event) {\n    document.body.addEventListener('iui.focus', trackEvent, false);\n}",
    "receiverBase": "",
    "receiverCallee": "addEventListener"
  }
]