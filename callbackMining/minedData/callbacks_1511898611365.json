[
  {
    "callback": "function (prop) {\n    assert.isTrue(!!~source.indexOf(prop));\n}",
    "receiverBase": "target",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (p) {\n    return p.substring(1, p.length - 1);\n}",
    "receiverBase": "match",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    $('<span class=\"count' + this + '\">').html('<span class=\"digit-wrapper\">                        <span class=\"digit\">0</span>                    </span>                    <span class=\"digit-wrapper\">                        <span class=\"digit\">0</span>                    </span>').appendTo(element);\n    if (this != 'Seconds') {\n        element.append('<span class=\"divider\"></span>');\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    that.tick();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    digit.remove();\n}",
    "receiverBase": "removeClass",
    "receiverCallee": "animate"
  },
  {
    "callback": "function () {\n    $('[data-role=times]').times();\n}",
    "receiverBase": "",
    "receiverCallee": "$"
  },
  {
    "callback": "function (Y) {\n    var suite = new Y.Test.Suite(moduleName + ' test suite');\n    suite.add(new Y.Test.Case({\n        name: 'Example Tests',\n        'this test should eventually do something': function () {\n            Y.Assert.pass();\n        }\n    }));\n    Y.Test.Runner.add(suite);\n}",
    "receiverBase": "YUI",
    "receiverCallee": "add"
  },
  {
    "callback": "function (name) {\n    el.classList.add(name);\n}",
    "receiverBase": "split",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    var vector1 = new THREE.Vector3();\n    var vector2 = new THREE.Vector3();\n    return function (vectorA, vectorB, vectorC) {\n        vector1.subVectors(vectorB, vectorA);\n        vector2.subVectors(vectorC, vectorA);\n        vector1.cross(vector2);\n        return 0.5 * vector1.length();\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (x) {\n    return require(x);\n}",
    "receiverBase": "deps",
    "receiverCallee": "map"
  }
]