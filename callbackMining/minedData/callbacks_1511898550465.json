[
  {
    "callback": "function () {\n    this.unbind(ev, arguments.callee);\n    return callback.apply(this, arguments);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (item) {\n    return Helpers.serializeObject(item);\n}",
    "receiverBase": "Helpers",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    return _this.length = _this.list.length;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    return _this._triggerChangesTo([name]);\n}",
    "receiverBase": "attributes",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (item) {\n    return get(item, 'id');\n}",
    "receiverBase": "get",
    "receiverCallee": "map"
  },
  {
    "callback": "function (id) {\n    return attributes.as().find(id);\n}",
    "receiverBase": "",
    "receiverCallee": "map"
  },
  {
    "callback": "function (value) {\n    return _this.update();\n}",
    "receiverBase": "_base",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (value) {\n    return _this.update();\n}",
    "receiverBase": "_base",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    return _this.textNode.nodeValue = _this.get();\n}",
    "receiverBase": "model",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    return _this.rebuild();\n}",
    "receiverBase": "collection",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    return _this.rebuild();\n}",
    "receiverBase": "collection",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (item) {\n    return _this.appendItem(item);\n}",
    "receiverBase": "collection",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (index) {\n    return _this['delete'](index);\n}",
    "receiverBase": "collection",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (item) {\n    return _this.appendItem(item);\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    $$[$0 - 2].classes.push($$[$0]);\n    return $$[$0 - 2];\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    $$[$0 - 3].properties = $$[$0 - 1];\n    return $$[$0 - 3];\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    $$[$0 - 2].children = $$[$0 - 2].children.concat($$[$0]);\n    return $$[$0 - 2];\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    $$[$0 - 3].children = $$[$0 - 3].children.concat($$[$0 - 1]);\n    return $$[$0 - 3];\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    $$[$0].scope = $$[$0 - 2];\n    return $$[$0];\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    $$[$0 - 2]['arguments'].push($$[$0].value);\n    return $$[$0 - 2];\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    $$[$0 - 3].children = $$[$0 - 1];\n    return $$[$0 - 3];\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    return _this._triggerChangesTo([name]);\n}",
    "receiverBase": "attributes",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (prop) {\n    return '' + deferName + '.' + prop;\n}",
    "receiverBase": "",
    "receiverCallee": "map"
  },
  {
    "callback": "function (_super) {\n    __extends(New, _super);\n    New.name = 'New';\n    New.modelName = name;\n    function New() {\n        New.__super__.constructor.apply(this, arguments);\n        if (ctor)\n            ctor.apply(this, arguments);\n    }\n    return New;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    return Cache.store(_this.constructor, _this.get('id'), _this);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    return Cache.store(_this.constructor, _this.get('id'), _this);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    return Serenade;\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function (Modernizr, testAllProps) {\n    Modernizr.addTest('cssreflections', testAllProps('boxReflect', 'above', true));\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function () {\n    $('.leaflet-control-Geolocate').before(self.$container);\n}",
    "receiverBase": "event",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    if ($(this).hasClass('btn-primary')) {\n        $('#smap-share-btn').show();\n        self._addLayer();\n        self._startRefresh();\n    } else {\n        self._stopShare();\n        self.deactivate();\n    }\n    return false;\n}",
    "receiverBase": "$",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    var isActive = $(this).hasClass('btn-danger');\n    if (!isActive) {\n        self.dialog.modal('show');\n    } else {\n        $(this).removeClass('btn-danger');\n        self._stopShare();\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    $(this).focus();\n}",
    "receiverBase": "find",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    $('#smap-share-btn').addClass('btn-danger');\n    self.dialog.modal('hide');\n    var uName = $.trim(self.dialog.find('input[type=\\'text\\']').val());\n    self._startShare(uName);\n}",
    "receiverBase": "find",
    "receiverCallee": "on"
  },
  {
    "callback": "function (childNode) {\n    return childNode.container;\n}",
    "receiverBase": "children",
    "receiverCallee": "map"
  },
  {
    "callback": "function (childNode) {\n    childNode.debug_DumpTree(indent + 1);\n}",
    "receiverBase": "children",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (bar, baz) {\n    return {\n        name: 'foo',\n        bar: bar,\n        baz: baz\n    };\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function () {\n    var expectedLengths = [1];\n    var frequencies = [1];\n    HuffmanAllocator.allocateHuffmanCodeLengths(frequencies, 32);\n    assert.deepEqual(expectedLengths, frequencies);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var expectedLengths = [\n            1,\n            1\n        ];\n    var frequencies = [\n            1,\n            1\n        ];\n    HuffmanAllocator.allocateHuffmanCodeLengths(frequencies, 32);\n    assert.deepEqual(expectedLengths, frequencies);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var expectedLengths = [\n            3,\n            3,\n            2,\n            2,\n            2\n        ];\n    var frequencies = [\n            1,\n            1,\n            1,\n            1,\n            1\n        ];\n    HuffmanAllocator.allocateHuffmanCodeLengths(frequencies, 32);\n    assert.deepEqual(expectedLengths, frequencies);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var expectedLengths = [\n            3,\n            3,\n            3,\n            3,\n            2,\n            2\n        ];\n    var frequencies = [\n            0,\n            0,\n            1,\n            1,\n            1,\n            1\n        ];\n    HuffmanAllocator.allocateHuffmanCodeLengths(frequencies, 3);\n    assert.deepEqual(expectedLengths, frequencies);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    bs2.init(config, done);\n}",
    "receiverBase": "bs",
    "receiverCallee": "init"
  },
  {
    "callback": "function () {\n    browserSync.get('first').cleanup();\n    browserSync.get('second').cleanup();\n}",
    "receiverBase": "",
    "receiverCallee": "after"
  },
  {
    "callback": "function () {\n    sinon.assert.calledOnce(plugin1spy);\n    sinon.assert.calledOnce(plugin2spy);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (a, b) {\n    return a.ts >= b.ts ? 1 : -1;\n}",
    "receiverBase": "events",
    "receiverCallee": "sort"
  },
  {
    "callback": "function (event) {\n    return event.pid === processId && event.name === event_name && typeof event.args !== 'undefined' && typeof event.args.data !== 'undefined';\n}",
    "receiverBase": "events",
    "receiverCallee": "filter"
  }
]