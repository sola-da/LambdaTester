[
  {
    "callback": "function (n, i, f, t, v, w, within) {\n    return n == 1 ? 'one' : 'other';\n}",
    "receiverBase": "Util",
    "receiverCallee": "getPluralCategory"
  },
  {
    "callback": "function () {\n    this.xhrPool_.releaseObject(xhrIo);\n}",
    "receiverBase": "events",
    "receiverCallee": "listenOnce"
  },
  {
    "callback": "function (value, key) {\n    value.dispose();\n}",
    "receiverBase": "structs",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (match, protectedAddress, rest) {\n    return 'mailto:' + String.fromCharCode.apply(String, protectedAddress.split(',')) + (rest && unescapeSingleQuote(rest));\n}",
    "receiverBase": "href",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (match, funcName, params) {\n    compiledProtectionFunction.name = funcName;\n    compiledProtectionFunction.params = [];\n    params.replace(/[^,\\s]+/g, function (param) {\n        compiledProtectionFunction.params.push(param);\n    });\n}",
    "receiverBase": "emailProtection",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (param) {\n    compiledProtectionFunction.params.push(param);\n}",
    "receiverBase": "params",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (Y) {\n    var YAHOO = Y.YUI2;\n    {\n    }\n}",
    "receiverBase": "YUI",
    "receiverCallee": "add"
  },
  {
    "callback": "function (r) {\n    return r.sel == true;\n}",
    "receiverBase": "_",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (r) {\n    return r.sel == true;\n}",
    "receiverBase": "_",
    "receiverCallee": "reject"
  },
  {
    "callback": "function (r) {\n    r.line = i;\n    dt.push(r);\n    i++;\n}",
    "receiverBase": "rc",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (data) {\n    if (data.length == 1) {\n        $scope.dt_current.ten_kh = data[0].ten_kh;\n        $scope.dt_current.dia_chi = data[0].dia_chi;\n        $scope.dt_current.ma_so_thue = data[0].ma_so_thue;\n    }\n}",
    "receiverBase": "list",
    "receiverCallee": "success"
  },
  {
    "callback": "function (r) {\n    return r.line == line;\n}",
    "receiverBase": "_",
    "receiverCallee": "find"
  },
  {
    "callback": "function () {\n    $timeout(function () {\n        $scope.status.isOpened = true;\n    }, 100);\n}",
    "receiverBase": "opened",
    "receiverCallee": "then"
  },
  {
    "callback": "function () {\n    $scope.status.isOpened = true;\n}",
    "receiverBase": "",
    "receiverCallee": "$timeout"
  },
  {
    "callback": "function (result) {\n    $scope.status.isOpened = false;\n}",
    "receiverBase": "result",
    "receiverCallee": "then"
  },
  {
    "callback": "function (newData) {\n    if (scope.status.isOpened) {\n        scope.dt_current.t_thue_nt = scope.dt_current.t_tien_nt * scope.dt_current.thue_suat / 100;\n        scope.dt_current.t_thue = scope.dt_current.t_thue_nt * scope.ngMasterData.ty_gia;\n    }\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function (newData) {\n    if (scope.status.isOpened) {\n        scope.dt_current.t_thue = scope.dt_current.t_thue_nt * scope.ngMasterData.ty_gia;\n    }\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function (newData) {\n    if (scope.status.isOpened) {\n        scope.dt_current.t_tien = scope.dt_current.t_tien_nt * scope.ngMasterData.ty_gia;\n        scope.dt_current.t_thue_nt = scope.dt_current.t_tien_nt * scope.dt_current.thue_suat / 100;\n        scope.dt_current.t_thue = scope.dt_current.t_thue_nt * scope.ngMasterData.ty_gia;\n    }\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function (newData) {\n    if (scope.status.isOpened) {\n        scope.dt_current.t_thue = scope.dt_current.t_tien * scope.dt_current.thue_suat / 100;\n    }\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function () {\n    $liveSelector.mCustomScrollbar(options);\n    if (options.live === 'once' && $liveSelector.length) {\n        removeLiveTimers(liveSelector);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    var $this = $(this);\n    if ($this.data(pluginPfx)) {\n        functions._stop.call(null, $this);\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var $this = $(this);\n    if ($this.data(pluginPfx)) {\n        var d = $this.data(pluginPfx), o = d.opt;\n        functions._autoUpdate.call(this, 'remove');\n        functions._unbindEvents.call(this);\n        if (r) {\n            functions._resetContentPosition.call(this);\n        }\n        functions._scrollbarVisibility.call(this, true);\n        $this.addClass('mCS_disabled');\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    return $(this).outerWidth(true);\n}",
    "receiverBase": "el",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    if (!$.event.special.mousewheel) {\n        _mwt();\n    } else {\n        clearTimeout(mousewheelTimeout);\n        functions._mousewheel.call($this[0]);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    $(this).unbind('.' + namespace);\n}",
    "receiverBase": "sel",
    "receiverCallee": "each"
  },
  {
    "callback": "function (e) {\n    e.stopImmediatePropagation();\n    e.preventDefault();\n    var offset = draggable.offset(), y = functions._coordinates(e)[0] - offset.top, x = functions._coordinates(e)[1] - offset.left;\n    _drag(dragY, dragX, y, x);\n}",
    "receiverBase": "bind",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (e) {\n    if (draggable) {\n        var offset = draggable.offset(), y = functions._coordinates(e)[0] - offset.top, x = functions._coordinates(e)[1] - offset.left;\n        if (dragY === y) {\n            return;\n        }\n        _drag(dragY, dragX, y, x);\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (e) {\n    if (draggable) {\n        functions._onDragClasses(draggable, 'active', o.autoExpandScrollbar);\n        draggable = null;\n    }\n    touchActive = false;\n    if (oldIE) {\n        document.onselectstart = null;\n    }\n    _iframe(true);\n}",
    "receiverBase": "add",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (e) {\n    if (!functions._pointerTouch(e) || touchActive) {\n        return;\n    }\n    var offset = mCSB_container.offset();\n    dragY = functions._coordinates(e)[0] - offset.top;\n    dragX = functions._coordinates(e)[1] - offset.left;\n}",
    "receiverBase": "mCSB_container",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (e) {\n    if (!functions._pointerTouch(e) || touchActive) {\n        return;\n    }\n    e.stopImmediatePropagation();\n    functions._stop($this);\n    startTime = functions._getTime();\n    var offset = mCustomScrollBox.offset();\n    touchStartY = functions._coordinates(e)[0] - offset.top;\n    touchStartX = functions._coordinates(e)[1] - offset.left;\n    touchMoveY = [];\n    touchMoveX = [];\n}",
    "receiverBase": "mCustomScrollBox",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (e) {\n    touchActive = true;\n}",
    "receiverBase": "mCSB_draggerContainer",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (e) {\n    touchActive = false;\n}",
    "receiverBase": "bind",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (e) {\n    wrapper.scrollTop(0).scrollLeft(0);\n}",
    "receiverBase": "wrapper",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    _start();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    imgLoader(this.src);\n}",
    "receiverBase": "find",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    total += $(this).height() + $(this).width();\n}",
    "receiverBase": "sel",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    functions._stopTween.call(this);\n}",
    "receiverBase": "sel",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    $(defaultSelector)[pluginNS]();\n}",
    "receiverBase": "$",
    "receiverCallee": "load"
  },
  {
    "callback": "function (require) {\n    return function (dep) {\n        return new util.Promise(function (resolve) {\n            require([dep], function (module) {\n                resolve(module);\n            });\n        });\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (module) {\n    resolve(module);\n}",
    "receiverBase": "",
    "receiverCallee": "require"
  },
  {
    "callback": "function (nodeRequest) {\n    var parser = new formidable.IncomingForm();\n    parser.parse(nodeRequest, function (err, fields, files) {\n        if (err) {\n            reject(err);\n        }\n        for (var key in files) {\n            fields[key] = files[key];\n        }\n        resolve(fields);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "nodeWrapper"
  },
  {
    "callback": "function (err, fields, files) {\n    if (err) {\n        reject(err);\n    }\n    for (var key in files) {\n        fields[key] = files[key];\n    }\n    resolve(fields);\n}",
    "receiverBase": "parser",
    "receiverCallee": "parse"
  },
  {
    "callback": "function (files) {\n    return util.map(files, function (filename) {\n        return require('./' + filename.slice(0, -3)).then(function (module) {\n            var name = filename.slice(0, -11);\n            return {\n                regexp: new RegExp('^/' + name.replace(/\\//g, '\\\\/') + '(\\\\/.*)?$'),\n                module: module\n            };\n        });\n    });\n}",
    "receiverBase": "call",
    "receiverCallee": "then"
  },
  {
    "callback": "function (filename) {\n    return require('./' + filename.slice(0, -3)).then(function (module) {\n        var name = filename.slice(0, -11);\n        return {\n            regexp: new RegExp('^/' + name.replace(/\\//g, '\\\\/') + '(\\\\/.*)?$'),\n            module: module\n        };\n    });\n}",
    "receiverBase": "util",
    "receiverCallee": "map"
  },
  {
    "callback": "function (module) {\n    var name = filename.slice(0, -11);\n    return {\n        regexp: new RegExp('^/' + name.replace(/\\//g, '\\\\/') + '(\\\\/.*)?$'),\n        module: module\n    };\n}",
    "receiverBase": "require",
    "receiverCallee": "then"
  },
  {
    "callback": "function (service) {\n    var match = serviceURL.match(service.regexp);\n    if (match) {\n        request.urlInfo.pathname = match[1];\n        response = service.module.call(null, request);\n        return true;\n    }\n}",
    "receiverBase": "services",
    "receiverCallee": "some"
  },
  {
    "callback": "function (data) {\n    return data;\n}",
    "receiverBase": "response",
    "receiverCallee": "then"
  },
  {
    "callback": "function (error) {\n    if (error instanceof CancelError) {\n        return { body: [''] };\n    }\n    throw error;\n}",
    "receiverBase": "response",
    "receiverCallee": "then"
  },
  {
    "callback": "function (request, response) {\n    if (request.url.indexOf('/__services/') === 0) {\n        servicesHandler(request, response);\n    } else {\n        proxy.proxyRequest(request, response, {\n            host: 'localhost',\n            port: 9000\n        });\n    }\n}",
    "receiverBase": "http",
    "receiverCallee": "createServer"
  },
  {
    "callback": "function (packet) {\n    self.log.debug(self.name + ' received data packet', packet);\n    self.onMessage(parser.decodePacket(packet));\n}",
    "receiverBase": "parser",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    self.end();\n}",
    "receiverBase": "parser",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    self.end();\n}",
    "receiverBase": "parser",
    "receiverCallee": "on"
  },
  {
    "callback": "function (data) {\n    if (waitingForNonce) {\n        headBuffer += data;\n        if (headBuffer.length < 8) {\n            return;\n        }\n        self.socket.setEncoding('utf8');\n        waitingForNonce = false;\n        self.req.head = headBuffer.substr(0, 8);\n        headBuffer = '';\n        if (self.proveReception(headers)) {\n            self.flush();\n        }\n        return;\n    }\n    self.parser.add(data);\n}",
    "receiverBase": "socket",
    "receiverCallee": "on"
  },
  {
    "callback": "function (k) {\n    var n = parseInt(k.replace(/[^\\d]/g, '')), spaces = k.replace(/[^ ]/g, '').length;\n    if (spaces === 0 || n % spaces !== 0) {\n        self.log.warn('Invalid ' + self.name + ' key: \"' + k + '\".');\n        self.end();\n        return false;\n    }\n    n /= spaces;\n    md5.update(String.fromCharCode(n >> 24 & 255, n >> 16 & 255, n >> 8 & 255, n & 255));\n}",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    self.outerApi.onInnerClose();\n}",
    "receiverBase": "$",
    "receiverCallee": "click"
  },
  {
    "callback": "function () {\n    if (this.value && this.name == name) {\n        empty = false;\n        return false;\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function (data) {\n    if (self.outerApi.onInnerOk(data.html) !== false) {\n        setTimeout(function () {\n            self.outerApi.onInnerClose();\n        }, 32);\n    }\n}",
    "receiverBase": "self",
    "receiverCallee": "doPost"
  },
  {
    "callback": "function () {\n    self.outerApi.onInnerClose();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    $(this).find('input,select').each(function () {\n        var name = $(this).attr('name');\n        if (name) {\n            $(this).removeAttr('name');\n            $(this).attr('no_submit_name', name);\n        }\n    });\n}",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var name = $(this).attr('name');\n    if (name) {\n        $(this).removeAttr('name');\n        $(this).attr('no_submit_name', name);\n    }\n}",
    "receiverBase": "find",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    noSubmitParameterFormElements();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    if ($(this).attr('checked')) {\n        checks.attr('checked', false);\n        $(this).attr('checked', true);\n    }\n}",
    "receiverBase": "checks",
    "receiverCallee": "change"
  },
  {
    "callback": "function () {\n    var name = $(this).attr('no_submit_name');\n    if (name) {\n        $(this).removeAttr('no_submit_name');\n        $(this).attr('name', name);\n    }\n}",
    "receiverBase": "find",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var con = $('#cache_con');\n    if ($(this).attr('checked')) {\n        var input = con.show().find('input').focus();\n        if (!input.val()) {\n            input.val('120');\n        }\n    } else {\n        con.hide();\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "change"
  },
  {
    "callback": "function () {\n    if (this.Name.toLowerCase() == name) {\n        dataItem = this;\n        return false;\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    if (value.indexOf(sep + $(this).val().toLowerCase() + sep) !== -1) {\n        this.checked = true;\n    } else {\n        this.checked = false;\n    }\n}",
    "receiverBase": "valueInput",
    "receiverCallee": "each"
  },
  {
    "callback": "function (ix, it) {\n    selOptions.filter('[value=\\'' + it + '\\']').attr('selected', 'selected');\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function (e) {\n    $(window.parent.document).find('iframe').toggleClass('fullscreen');\n}",
    "receiverBase": "ed",
    "receiverCallee": "on"
  },
  {
    "callback": "function (e) {\n    e.format = 'raw';\n}",
    "receiverBase": "ed",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    urls.push(this.href);\n}",
    "receiverBase": "sheets",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    cssText.push(this.textContent || this.innerHTML);\n}",
    "receiverBase": "styles",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var t = self.resultType();\n    var tp = $('#top_con'), uk = $('#userkey_con');\n    if (t.val() == 'List') {\n        tp.show().find('input').focus();\n        uk.hide();\n    } else if (top) {\n        uk.show().find('input').focus();\n        tp.hide();\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "change"
  },
  {
    "callback": "function () {\n    if ($(this).attr('checked')) {\n        ret = $(this);\n        return false;\n    }\n}",
    "receiverBase": "inputs",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    if ($(this).val() == type) {\n        $(this).attr('checked', true);\n        $(this).trigger('change');\n        return false;\n    }\n}",
    "receiverBase": "inputs",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    if ($(this).text() == entryName) {\n        $(this).attr('selected', 'selected');\n    }\n}",
    "receiverBase": "find",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    if ($(this).attr('checked')) {\n        checks.attr('checked', false);\n        $(this).attr('checked', true);\n    }\n}",
    "receiverBase": "checks",
    "receiverCallee": "change"
  },
  {
    "callback": "function (index, op) {\n    optionsHtml.push('<option action=\\'' + op.EntryAction + '\\' controller=\\'' + op.EntryController + '\\' values=\\'' + ko.toJSON(op.Values) + '\\' linkToEntryName=\\'' + op.LinkToEntryName + '\\'>' + op.Name + '</option>');\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var op = $(this).children().eq(this.selectedIndex);\n    var action = op.attr('action'), controller = op.attr('controller');\n    var values = op.attr('values');\n    self.LinkToEntryNameInput.val(op.attr('linkToEntryName'));\n    self.EntryActionInput.val(action);\n    self.EntryControllerInput.val(controller);\n    self.ValuesTemplate.data('KO_ViewModel').renew($.parseJSON(values));\n}",
    "receiverBase": "EntryOptionsSelect",
    "receiverCallee": "change"
  },
  {
    "callback": "function () {\n    if ($(this).attr('checked')) {\n        checks.attr('checked', false);\n        $(this).attr('checked', true);\n    }\n}",
    "receiverBase": "checks",
    "receiverCallee": "change"
  },
  {
    "callback": "function () {\n    var con = $('#cache_con');\n    if ($(this).attr('checked')) {\n        var input = con.show().find('input').focus();\n        if (!input.val()) {\n            input.val('120');\n        }\n    } else {\n        con.hide();\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "change"
  },
  {
    "callback": "function () {\n    window.__rid = Math.random().toString();\n    var frm, frms = window.parent.document.getElementsByTagName('iframe');\n    for (var i = 0; i < frms.length; i++) {\n        if (frms[i].contentWindow.__rid == window.__rid) {\n            frm = frms[i];\n            break;\n        }\n    }\n    return frm;\n}",
    "receiverBase": ""
  }
]