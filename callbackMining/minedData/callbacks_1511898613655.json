[
  {
    "callback": "function (require, exports, module) {\n    CreateBackgroundService('com.yournamespace.yourappname.MyService', require, exports, module);\n}",
    "receiverBase": "cordova",
    "receiverCallee": "define"
  },
  {
    "callback": "function () {\n    that.schedule();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    if (!keepData) {\n        if (!selector || $.filter(selector, [this]).length) {\n            $('*', this).add([this]).each(function () {\n                $(this).triggerHandler('remove');\n            });\n        }\n    }\n    return _remove.call($(this), selector, keepData);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    $(this).triggerHandler('remove');\n}",
    "receiverBase": "add",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var instance = $.data(this, name), methodValue = instance && $.isFunction(instance[options]) ? instance[options].apply(instance, args) : instance;\n    if (methodValue !== instance && methodValue !== undefined) {\n        returnValue = methodValue;\n        return false;\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var instance = $.data(this, name);\n    if (instance) {\n        if (options) {\n            instance.option(options);\n        }\n        instance._init();\n    } else {\n        $.data(this, name, new object(options, this));\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    self.destroy();\n}",
    "receiverBase": "element",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (key, value) {\n    self._setOption(key, value);\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function (el) {\n    if (!el.href || !el.href.match(/^[a-z]+:/)) {\n        el.href = 'http://' + el.href;\n    }\n    el.target = '_blank';\n}",
    "receiverBase": "getElements",
    "receiverCallee": "each"
  },
  {
    "callback": "function (math) {\n    var equ = math.get('html').replace(/&amp;/g, '&');\n    var script = new Element('script').setProperties({ type: 'math/tex; mode=display' }).set('html', equ);\n    script.inject(math, 'after');\n    math.destroy();\n}",
    "receiverBase": "maths",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    'use strict';\n    global.KEYFRAMES = KEYFRAMES = CLASS({\n        init: function () {\n        }\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "OVERRIDE"
  },
  {
    "callback": "function () {\n    this.resume(function () {\n        window.setTimeout(function () {\n            image.destroy();\n        });\n    });\n}",
    "receiverBase": "image",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function () {\n    window.setTimeout(function () {\n        image.destroy();\n    });\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "resume"
  },
  {
    "callback": "function () {\n    image.destroy();\n}",
    "receiverBase": "window",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    this.resume(function () {\n        window.setTimeout(function () {\n            image.destroy();\n        });\n    });\n}",
    "receiverBase": "image",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function () {\n    window.setTimeout(function () {\n        image.destroy();\n    });\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "resume"
  },
  {
    "callback": "function () {\n    image.destroy();\n}",
    "receiverBase": "window",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    image.resetSource();\n    image.setSource(source);\n}",
    "receiverBase": "image",
    "receiverCallee": "addListenerOnce"
  },
  {
    "callback": "function () {\n    image.destroy();\n}",
    "receiverBase": "window",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    image.resetSource();\n    image.setSource(source);\n}",
    "receiverBase": "image",
    "receiverCallee": "addListenerOnce"
  },
  {
    "callback": "function () {\n    image.destroy();\n}",
    "receiverBase": "window",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    image.resetSource();\n    image.setSource(source);\n    image.resetSource();\n    image.setSource(source);\n}",
    "receiverBase": "image",
    "receiverCallee": "addListenerOnce"
  },
  {
    "callback": "function () {\n    image.destroy();\n}",
    "receiverBase": "window",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    return 2;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "stub"
  },
  {
    "callback": "function () {\n    return 2;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "stub"
  },
  {
    "callback": "function (cs1, cs2) {\n    return cs1.offset - cs2.offset;\n}",
    "receiverBase": "stops",
    "receiverCallee": "sort"
  },
  {
    "callback": "function (Backbone, AssetModel) {\n    return Backbone.Collection.extend({\n        model: AssetModel,\n        url: 'library',\n        initialize: function () {\n            'use strict';\n            this.on('remove', function (asset) {\n                asset.destroy();\n            });\n        },\n        destroy: function () {\n            'use strict';\n            this.each(function (asset) {\n                asset.destroy();\n            });\n        }\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function (asset) {\n    asset.destroy();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "on"
  },
  {
    "callback": "function (asset) {\n    asset.destroy();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (require, exports, module) {\n    'use strict';\n    exports.snippetText = require('../requirejs/text!./autohotkey.snippets');\n    exports.scope = 'autohotkey';\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function (i, el) {\n    $.get(el.src, function (data) {\n        TypedJS.run_tests_on_string(data, redefine);\n    });\n}",
    "receiverBase": "scripts",
    "receiverCallee": "each"
  },
  {
    "callback": "function (data) {\n    TypedJS.run_tests_on_string(data, redefine);\n}",
    "receiverBase": "$",
    "receiverCallee": "get"
  },
  {
    "callback": "function () {\n    Ext.deprecateProperty(this, 'animationDuration', null, 'Ext.slider.Slider.animationDuration has been removed');\n}",
    "receiverBase": "Ext",
    "receiverCallee": "define"
  },
  {
    "callback": "function () {\n    return mite;\n}",
    "receiverBase": "fail",
    "receiverCallee": "then"
  },
  {
    "callback": "function (e, errPath) {\n    var localPath = errPath.replace(mite.config.miteRoot, '');\n    if (localPath[0] === '/') {\n        localPath = localPath.slice(1);\n    }\n    reporter.err('Submodule Context Error: %s : %s', e.code, localPath);\n}",
    "receiverBase": "subProvider",
    "receiverCallee": "on"
  },
  {
    "callback": "function (s) {\n    return upOrder.indexOf(s.name);\n}",
    "receiverBase": "_",
    "receiverCallee": "sortBy"
  },
  {
    "callback": "function (p, sub) {\n    return p.then(function () {\n        reporter.log('Submodule: ' + sub.name);\n        reporter.indent();\n        var subConfig = JSON.parse(JSON.stringify(mite.config));\n        subConfig = cliUtil.applySubmoduleToConfig(subConfig, sub);\n        var m = new Mite(subConfig);\n        return self._up(m).then(function () {\n            console.log();\n            reporter.outdent();\n        });\n    });\n}",
    "receiverBase": "submodules",
    "receiverCallee": "reduce"
  },
  {
    "callback": "function () {\n    reporter.log('Submodule: ' + sub.name);\n    reporter.indent();\n    var subConfig = JSON.parse(JSON.stringify(mite.config));\n    subConfig = cliUtil.applySubmoduleToConfig(subConfig, sub);\n    var m = new Mite(subConfig);\n    return self._up(m).then(function () {\n        console.log();\n        reporter.outdent();\n    });\n}",
    "receiverBase": "p",
    "receiverCallee": "then"
  },
  {
    "callback": "function () {\n    console.log();\n    reporter.outdent();\n}",
    "receiverBase": "_up",
    "receiverCallee": "then"
  },
  {
    "callback": "function () {\n    return self._up(mite);\n}",
    "receiverBase": "pSubUps",
    "receiverCallee": "then"
  },
  {
    "callback": "function (upStatus) {\n    if (!upStatus.updated && upStatus.wasClean) {\n        reporter.warn('no migrations executed. status is clean.');\n    } else if (!upStatus.updated && upStatus.dirtyMigrations) {\n        printMigrationList('no migrations executed. there are dirty migrations. fix it.', 'err', upStatus.dirtyMigrations, 'err');\n    } else if (upStatus.updated) {\n        reporter.success('complete');\n    }\n}",
    "receiverBase": "up",
    "receiverCallee": "then"
  },
  {
    "callback": "function () {\n    mite.removeListener('migrationExecuted', notifier);\n}",
    "receiverBase": "p",
    "receiverCallee": "finally"
  },
  {
    "callback": "function (req, res) {\n    res.writeHead(200, { 'Content-Type': 'text/plain; charset=utf-8' });\n    var input = fs.createReadStream('test.dat').on('error', function () {\n            res.end();\n        }).on('end', function () {\n            res.end();\n        }).on('close', function () {\n            res.end();\n        }).on('readable', function () {\n            res.write(input.read());\n        });\n}",
    "receiverBase": "http",
    "receiverCallee": "createServer"
  },
  {
    "callback": "function () {\n    res.end();\n}",
    "receiverBase": "createReadStream",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    res.end();\n}",
    "receiverBase": "on",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    res.end();\n}",
    "receiverBase": "on",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    res.write(input.read());\n}",
    "receiverBase": "on",
    "receiverCallee": "on"
  },
  {
    "callback": "function (err, recs) {\n    async.each(recs, function (rec, done) {\n        logger.debug('srv match:', rec);\n        query.addAnswer(domain, rec);\n        done();\n    }, function () {\n        server.send(query);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "findMatchingSRVRecords"
  },
  {
    "callback": "function (rec, done) {\n    logger.debug('srv match:', rec);\n    query.addAnswer(domain, rec);\n    done();\n}",
    "receiverBase": "async",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    server.send(query);\n}",
    "receiverBase": "async",
    "receiverCallee": "each"
  },
  {
    "callback": "function (d, done) {\n    if (d.match(rx)) {\n        logger.debug('match:', d);\n        ret = _.union(ret, _recs.srv[d]);\n    }\n    done();\n}",
    "receiverBase": "async",
    "receiverCallee": "each"
  },
  {
    "callback": "function (err) {\n    ret = _.uniq(ret, 'target');\n    cb(err, ret);\n}",
    "receiverBase": "async",
    "receiverCallee": "each"
  },
  {
    "callback": "function (error) {\n    logger.error('there was a clientError: ', error);\n}",
    "receiverBase": "server",
    "receiverCallee": "on"
  },
  {
    "callback": "function (error) {\n    logger.error('there was an excepton: ', error.message);\n}",
    "receiverBase": "server",
    "receiverCallee": "on"
  },
  {
    "callback": "function (a, done) {\n    _recs.a[a.fqdn] = new named.ARecord(a.ip);\n    done();\n}",
    "receiverBase": "async",
    "receiverCallee": "each"
  },
  {
    "callback": "function (cname, done) {\n    _recs.cname[cname.fqdn] = new named.CNAMERecord(cname.a);\n    done();\n}",
    "receiverBase": "async",
    "receiverCallee": "each"
  },
  {
    "callback": "function (srv, done) {\n    logger.debug('servicename: ', srv.name);\n    if (!_recs.srv[srv.fqdn]) {\n        _recs.srv[srv.fqdn] = [];\n    }\n    _recs.srv[srv.fqdn].push(new named.SRVRecord(srv.name, srv.port));\n    done();\n}",
    "receiverBase": "async",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    logger.info('listening for dns queries on', config.node_named.bindip, config.node_named.port);\n}",
    "receiverBase": "server",
    "receiverCallee": "listen"
  },
  {
    "callback": "function () {\n    self.saveFormData();\n}",
    "receiverBase": "form",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function (e) {\n    e.preventDefault();\n    self.saveFormData();\n}",
    "receiverBase": "form",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function (data) {\n    for (var i = 0; i < self.elements.length; i++) {\n        var element = self.elements[i];\n        if (element.name) {\n            var val = data ? data[element.name] || '' : '';\n            if (element.type === 'checkbox') {\n                element.checked = !!val;\n            } else {\n                element.value = val;\n            }\n        }\n    }\n}",
    "receiverBase": "get",
    "receiverCallee": "then"
  }
]