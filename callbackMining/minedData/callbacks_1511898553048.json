[
  {
    "callback": "function () {\n    updateTime(momentInstance);\n}",
    "receiverBase": "$window",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (value) {\n    if (typeof value === 'undefined' || value === null || value === '') {\n        cancelTimer();\n        if (currentValue) {\n            element.text('');\n            currentValue = null;\n        }\n        return;\n    }\n    if (angular.isNumber(value)) {\n        value = new Date(value);\n    }\n    currentValue = value;\n    updateMoment();\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function (value) {\n    if (typeof value === 'boolean') {\n        withoutSuffix = value;\n        updateMoment();\n    } else {\n        withoutSuffix = amTimeAgoConfig.withoutSuffix;\n    }\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function (format) {\n    currentFormat = format;\n    if (currentValue) {\n        updateMoment();\n    }\n}",
    "receiverBase": "attr",
    "receiverCallee": "$observe"
  },
  {
    "callback": "function () {\n    cancelTimer();\n}",
    "receiverBase": "scope",
    "receiverCallee": "$on"
  },
  {
    "callback": "function () {\n    var upper = '[A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde]', lower = '[a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff]+';\n    return RegExp(upper + '{2,}(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    try {\n        var func = isNative(func = context.Float64Array) && func, result = new func(new ArrayBuffer(10), 0, 1) && func;\n    } catch (e) {\n    }\n    return result;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (x) {\n    support.funcDecomp = !isNative(context.WinRTError) && reThis.test(runInContext);\n    support.funcNames = typeof Function.name == 'string';\n    try {\n        support.dom = document.createDocumentFragment().nodeType === 11;\n    } catch (e) {\n        support.dom = false;\n    }\n    try {\n        support.nonEnumArgs = !propertyIsEnumerable.call(arguments, 1);\n    } catch (e) {\n        support.nonEnumArgs = true;\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (subValue, key) {\n    result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    function Object() {\n    }\n    return function (prototype) {\n        if (isObject(prototype)) {\n            Object.prototype = prototype;\n            var result = new Object();\n            Object.prototype = null;\n        }\n        return result || context.Object();\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    func.apply(undefined, baseSlice(args, fromIndex));\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (value, index, collection) {\n    result = !!predicate(value, index, collection);\n    return result;\n}",
    "receiverBase": "",
    "receiverCallee": "baseEach"
  },
  {
    "callback": "function (value, index, collection) {\n    if (predicate(value, index, collection)) {\n        result.push(value);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "baseEach"
  },
  {
    "callback": "function (value, key, collection) {\n    if (predicate(value, key, collection)) {\n        result = retKey ? key : value;\n        return false;\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "eachFunc"
  },
  {
    "callback": "function (value) {\n    var func = isFunc ? methodName : value != null && value[methodName];\n    result[++index] = func ? func.apply(value, args) : undefined;\n}",
    "receiverBase": "",
    "receiverCallee": "baseEach"
  },
  {
    "callback": "function (value, key, collection) {\n    result.push(iteratee(value, key, collection));\n}",
    "receiverBase": "",
    "receiverCallee": "baseEach"
  },
  {
    "callback": "function (value, index, collection) {\n    accumulator = initFromCollection ? (initFromCollection = false, value) : iteratee(accumulator, value, index, collection);\n}",
    "receiverBase": "",
    "receiverCallee": "eachFunc"
  },
  {
    "callback": "function (value, index, collection) {\n    result = predicate(value, index, collection);\n    return !result;\n}",
    "receiverBase": "",
    "receiverCallee": "baseEach"
  },
  {
    "callback": "function (value, key, collection) {\n    setter(result, value, iteratee(value, key, collection), collection);\n}",
    "receiverBase": "",
    "receiverCallee": "baseEach"
  },
  {
    "callback": "function (value, index, collection) {\n    var current = iteratee(value, index, collection);\n    if ((isMin ? current < computed : current > computed) || current === exValue && current === result) {\n        computed = current;\n        result = value;\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "baseEach"
  },
  {
    "callback": "function (value, key, object) {\n    if (predicate(value, key, object)) {\n        result[key] = value;\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "baseForIn"
  },
  {
    "callback": "function () {\n    var count = 0, lastCalled = 0;\n    return function (key, value) {\n        var stamp = now(), remaining = HOT_SPAN - (stamp - lastCalled);\n        lastCalled = stamp;\n        if (remaining > 0) {\n            if (++count >= HOT_COUNT) {\n                return key;\n            }\n        } else {\n            count = 0;\n        }\n        return baseSetData(key, value);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (subValue, key) {\n    result = key;\n}",
    "receiverBase": "",
    "receiverCallee": "baseForIn"
  },
  {
    "callback": "function (value) {\n    return value.reverse();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "thru"
  },
  {
    "callback": "function (result, value, key) {\n    hasOwnProperty.call(result, key) ? ++result[key] : result[key] = 1;\n}",
    "receiverBase": "",
    "receiverCallee": "createAggregator"
  },
  {
    "callback": "function (result, value, key) {\n    if (hasOwnProperty.call(result, key)) {\n        result[key].push(value);\n    } else {\n        result[key] = [value];\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "createAggregator"
  },
  {
    "callback": "function (result, value, key) {\n    result[key] = value;\n}",
    "receiverBase": "",
    "receiverCallee": "createAggregator"
  },
  {
    "callback": "function (result, value, key) {\n    result[key ? 0 : 1].push(value);\n}",
    "receiverBase": "",
    "receiverCallee": "createAggregator"
  },
  {
    "callback": "function () {\n    return [\n        [],\n        []\n    ];\n}",
    "receiverBase": "",
    "receiverCallee": "createAggregator"
  },
  {
    "callback": "function (value, index, collection) {\n    return !predicate(value, index, collection);\n}",
    "receiverBase": "",
    "receiverCallee": "func"
  },
  {
    "callback": "function (value, key, collection) {\n    result[++index] = {\n        'criteria': iteratee(value, key, collection),\n        'index': index,\n        'value': value\n    };\n}",
    "receiverBase": "",
    "receiverCallee": "baseEach"
  },
  {
    "callback": "function (value) {\n    var length = props.length, criteria = Array(length);\n    while (length--) {\n        criteria[length] = value == null ? undefined : value[props[length]];\n    }\n    result[++index] = {\n        'criteria': criteria,\n        'index': index,\n        'value': value\n    };\n}",
    "receiverBase": "",
    "receiverCallee": "baseEach"
  },
  {
    "callback": "function (value, key, object) {\n    result[key] = iteratee(value, key, object);\n}",
    "receiverBase": "",
    "receiverCallee": "baseForOwn"
  },
  {
    "callback": "function (value, key, object) {\n    return !predicate(value, key, object);\n}",
    "receiverBase": "",
    "receiverCallee": "pickByCallback"
  },
  {
    "callback": "function (value, index, object) {\n    return iteratee(accumulator, value, index, object);\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (result, word, index) {\n    word = word.toLowerCase();\n    return result + (index ? word.charAt(0).toUpperCase() + word.slice(1) : word);\n}",
    "receiverBase": "",
    "receiverCallee": "createCompounder"
  },
  {
    "callback": "function (result, word, index) {\n    return result + (index ? '-' : '') + word.toLowerCase();\n}",
    "receiverBase": "",
    "receiverCallee": "createCompounder"
  },
  {
    "callback": "function (result, word, index) {\n    return result + (index ? '_' : '') + word.toLowerCase();\n}",
    "receiverBase": "",
    "receiverCallee": "createCompounder"
  },
  {
    "callback": "function (result, word, index) {\n    return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));\n}",
    "receiverBase": "",
    "receiverCallee": "createCompounder"
  },
  {
    "callback": "function () {\n    return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);\n}",
    "receiverBase": "",
    "receiverCallee": "attempt"
  },
  {
    "callback": "function () {\n    var source = {};\n    baseForOwn(lodash, function (func, methodName) {\n        if (!lodash.prototype[methodName]) {\n            source[methodName] = func;\n        }\n    });\n    return source;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (func, methodName) {\n    if (!lodash.prototype[methodName]) {\n        source[methodName] = func;\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "baseForOwn"
  },
  {
    "callback": "function (value) {\n    return sample(value, n);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "thru"
  },
  {
    "callback": "function (methodName) {\n    lodash[methodName].placeholder = lodash;\n}",
    "receiverBase": "",
    "receiverCallee": "arrayEach"
  },
  {
    "callback": "function (methodName, index) {\n    var takeName = 'take' + (index ? 'Right' : '');\n    LazyWrapper.prototype[methodName] = function () {\n        return this[takeName](1).value()[0];\n    };\n}",
    "receiverBase": "",
    "receiverCallee": "arrayEach"
  },
  {
    "callback": "function (methodName, index) {\n    var dropName = 'drop' + (index ? '' : 'Right');\n    LazyWrapper.prototype[methodName] = function () {\n        return this[dropName](1);\n    };\n}",
    "receiverBase": "",
    "receiverCallee": "arrayEach"
  },
  {
    "callback": "function (methodName, index) {\n    var operationName = index ? 'filter' : 'map', createCallback = index ? baseMatches : baseProperty;\n    LazyWrapper.prototype[methodName] = function (value) {\n        return this[operationName](createCallback(value));\n    };\n}",
    "receiverBase": "",
    "receiverCallee": "arrayEach"
  },
  {
    "callback": "function (value, index, array) {\n    return done || (done = !predicate(value, index, array));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (value, index, array) {\n    return !predicate(value, index, array);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (methodName) {\n    var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru', retUnwrapped = /^(?:join|pop|shift)$/.test(methodName);\n    lodash.prototype[methodName] = function () {\n        var args = arguments;\n        if (retUnwrapped && !this.__chain__) {\n            return func.apply(this.value(), args);\n        }\n        return this[chainName](function (value) {\n            return func.apply(value, args);\n        });\n    };\n}",
    "receiverBase": "",
    "receiverCallee": "arrayEach"
  },
  {
    "callback": "function (value) {\n    return func.apply(value, args);\n}",
    "receiverBase": "",
    "receiverCallee": "LIT:this"
  },
  {
    "callback": "function () {\n    return _;\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function (__global) {\n    var tmp0, tmp1;\n    tmp1 = function g() {\n        return;\n    };\n    tmp0 = 'f';\n    __global[tmp0] = tmp1;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    'use strict';\n    beaker.bkoDirective('Image', function () {\n        return {\n            template: '<img />',\n            link: function (scope, element, attrs) {\n                var img = element.find('img').first();\n                if (scope.model.getCellModel()) {\n                    img.attr('src', 'data:image/png;base64,' + scope.model.getCellModel().imageData);\n                }\n            }\n        };\n    });\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    return {\n        template: '<img />',\n        link: function (scope, element, attrs) {\n            var img = element.find('img').first();\n            if (scope.model.getCellModel()) {\n                img.attr('src', 'data:image/png;base64,' + scope.model.getCellModel().imageData);\n            }\n        }\n    };\n}",
    "receiverBase": "beaker",
    "receiverCallee": "bkoDirective"
  },
  {
    "callback": "function (global, factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        module.exports = global.document ? factory(global, true) : function (w) {\n            if (!w.document) {\n                throw new Error('jQuery requires a window with a document');\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (elem, i) {\n    return callback.call(elem, i, elem);\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "map"
  },
  {
    "callback": "function (i, name) {\n    class2type['[object ' + name + ']'] = name.toLowerCase();\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (argument) {\n    argument = +argument;\n    return markFunction(function (seed, matches) {\n        var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;\n        while (i--) {\n            if (seed[j = matchIndexes[i]]) {\n                seed[j] = !(matches[j] = seed[j]);\n            }\n        }\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "markFunction"
  },
  {
    "callback": "function (seed, matches) {\n    var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;\n    while (i--) {\n        if (seed[j = matchIndexes[i]]) {\n            seed[j] = !(matches[j] = seed[j]);\n        }\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "markFunction"
  },
  {
    "callback": "function () {\n    setDocument();\n}",
    "receiverBase": "parent",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function () {\n    setDocument();\n}",
    "receiverBase": "parent",
    "receiverCallee": "attachEvent"
  },
  {
    "callback": "function (div) {\n    div.className = 'i';\n    return !div.getAttribute('className');\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (div) {\n    div.appendChild(doc.createComment(''));\n    return !div.getElementsByTagName('*').length;\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (div) {\n    div.innerHTML = '<div class=\\'a\\'></div><div class=\\'a i\\'></div>';\n    div.firstChild.className = 'i';\n    return div.getElementsByClassName('i').length === 2;\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (div) {\n    docElem.appendChild(div).id = expando;\n    return !doc.getElementsByName || !doc.getElementsByName(expando).length;\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (div) {\n    div.innerHTML = '<select t=\\'\\'><option selected=\\'\\'></option></select>';\n    if (div.querySelectorAll('[t^=\\'\\']').length) {\n        rbuggyQSA.push('[*^$]=' + whitespace + '*(?:\\'\\'|\"\")');\n    }\n    if (!div.querySelectorAll('[selected]').length) {\n        rbuggyQSA.push('\\\\[' + whitespace + '*(?:value|' + booleans + ')');\n    }\n    if (!div.querySelectorAll(':checked').length) {\n        rbuggyQSA.push(':checked');\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (div) {\n    var input = doc.createElement('input');\n    input.setAttribute('type', 'hidden');\n    div.appendChild(input).setAttribute('name', 'D');\n    if (div.querySelectorAll('[name=d]').length) {\n        rbuggyQSA.push('name' + whitespace + '*[*^$|!~]?=');\n    }\n    if (!div.querySelectorAll(':enabled').length) {\n        rbuggyQSA.push(':enabled', ':disabled');\n    }\n    div.querySelectorAll('*,:x');\n    rbuggyQSA.push(',.*:');\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (div) {\n    support.disconnectedMatch = matches.call(div, 'div');\n    matches.call(div, '[s!=\\'\\']:x');\n    rbuggyMatches.push('!=', pseudos);\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (elem) {\n    return pattern.test(typeof elem.className === 'string' && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute('class') || '');\n}",
    "receiverBase": "",
    "receiverCallee": "classCache"
  },
  {
    "callback": "function (seed, matches) {\n    var idx, matched = fn(seed, argument), i = matched.length;\n    while (i--) {\n        idx = indexOf.call(seed, matched[i]);\n        seed[idx] = !(matches[idx] = matched[i]);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "markFunction"
  },
  {
    "callback": "function (seed, matches, context, xml) {\n    var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;\n    while (i--) {\n        if (elem = unmatched[i]) {\n            seed[i] = !(matches[i] = elem);\n        }\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "markFunction"
  },
  {
    "callback": "function (selector) {\n    return function (elem) {\n        return Sizzle(selector, elem).length > 0;\n    };\n}",
    "receiverBase": "",
    "receiverCallee": "markFunction"
  },
  {
    "callback": "function (text) {\n    return function (elem) {\n        return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;\n    };\n}",
    "receiverBase": "",
    "receiverCallee": "markFunction"
  },
  {
    "callback": "function () {\n    return [0];\n}",
    "receiverBase": "",
    "receiverCallee": "createPositionalPseudo"
  },
  {
    "callback": "function (matchIndexes, length) {\n    return [length - 1];\n}",
    "receiverBase": "",
    "receiverCallee": "createPositionalPseudo"
  },
  {
    "callback": "function (matchIndexes, length, argument) {\n    return [argument < 0 ? argument + length : argument];\n}",
    "receiverBase": "",
    "receiverCallee": "createPositionalPseudo"
  },
  {
    "callback": "function (matchIndexes, length) {\n    var i = 0;\n    for (; i < length; i += 2) {\n        matchIndexes.push(i);\n    }\n    return matchIndexes;\n}",
    "receiverBase": "",
    "receiverCallee": "createPositionalPseudo"
  },
  {
    "callback": "function (matchIndexes, length) {\n    var i = 1;\n    for (; i < length; i += 2) {\n        matchIndexes.push(i);\n    }\n    return matchIndexes;\n}",
    "receiverBase": "",
    "receiverCallee": "createPositionalPseudo"
  },
  {
    "callback": "function (matchIndexes, length, argument) {\n    var i = argument < 0 ? argument + length : argument;\n    for (; --i >= 0;) {\n        matchIndexes.push(i);\n    }\n    return matchIndexes;\n}",
    "receiverBase": "",
    "receiverCallee": "createPositionalPseudo"
  },
  {
    "callback": "function (matchIndexes, length, argument) {\n    var i = argument < 0 ? argument + length : argument;\n    for (; ++i < length;) {\n        matchIndexes.push(i);\n    }\n    return matchIndexes;\n}",
    "receiverBase": "",
    "receiverCallee": "createPositionalPseudo"
  },
  {
    "callback": "function (elem) {\n    return elem === checkContext;\n}",
    "receiverBase": "",
    "receiverCallee": "addCombinator"
  },
  {
    "callback": "function (elem) {\n    return indexOf.call(checkContext, elem) > -1;\n}",
    "receiverBase": "",
    "receiverCallee": "addCombinator"
  },
  {
    "callback": "function (div1) {\n    return div1.compareDocumentPosition(document.createElement('div')) & 1;\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (div) {\n    div.innerHTML = '<a href=\\'#\\'></a>';\n    return div.firstChild.getAttribute('href') === '#';\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (elem, name, isXML) {\n    if (!isXML) {\n        return elem.getAttribute(name, name.toLowerCase() === 'type' ? 1 : 2);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "addHandle"
  },
  {
    "callback": "function (div) {\n    div.innerHTML = '<input/>';\n    div.firstChild.setAttribute('value', '');\n    return div.firstChild.getAttribute('value') === '';\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (elem, name, isXML) {\n    if (!isXML && elem.nodeName.toLowerCase() === 'input') {\n        return elem.defaultValue;\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "addHandle"
  },
  {
    "callback": "function (div) {\n    return div.getAttribute('disabled') == null;\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (elem, name, isXML) {\n    var val;\n    if (!isXML) {\n        return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "addHandle"
  },
  {
    "callback": "function (elem, i) {\n    return !!qualifier.call(elem, i, elem) !== not;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function (elem) {\n    return elem === qualifier !== not;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function (elem) {\n    return jQuery.inArray(elem, qualifier) >= 0 !== not;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function (elem) {\n    return elem.nodeType === 1;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function () {\n    for (i = 0; i < len; i++) {\n        if (jQuery.contains(self[i], this)) {\n            return true;\n        }\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "filter"
  },
  {
    "callback": "function () {\n    for (i = 0; i < len; i++) {\n        if (jQuery.contains(this, targets[i])) {\n            return true;\n        }\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (_, flag) {\n    object[flag] = true;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function add(args) {\n    jQuery.each(args, function (_, arg) {\n        var type = jQuery.type(arg);\n        if (type === 'function') {\n            if (!options.unique || !self.has(arg)) {\n                list.push(arg);\n            }\n        } else if (arg && arg.length && type !== 'string') {\n            add(arg);\n        }\n    });\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_, arg) {\n    var type = jQuery.type(arg);\n    if (type === 'function') {\n        if (!options.unique || !self.has(arg)) {\n            list.push(arg);\n        }\n    } else if (arg && arg.length && type !== 'string') {\n        add(arg);\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (_, arg) {\n    var index;\n    while ((index = jQuery.inArray(arg, list, index)) > -1) {\n        list.splice(index, 1);\n        if (firing) {\n            if (index <= firingLength) {\n                firingLength--;\n            }\n            if (index <= firingIndex) {\n                firingIndex--;\n            }\n        }\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, tuple) {\n    var fn = jQuery.isFunction(fns[i]) && fns[i];\n    deferred[tuple[1]](function () {\n        var returned = fn && fn.apply(this, arguments);\n        if (returned && jQuery.isFunction(returned.promise)) {\n            returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);\n        } else {\n            newDefer[tuple[0] + 'With'](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);\n        }\n    });\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var returned = fn && fn.apply(this, arguments);\n    if (returned && jQuery.isFunction(returned.promise)) {\n        returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);\n    } else {\n        newDefer[tuple[0] + 'With'](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "deferred"
  },
  {
    "callback": "function (i, tuple) {\n    var list = tuple[2], stateString = tuple[3];\n    promise[tuple[1]] = list.add;\n    if (stateString) {\n        list.add(function () {\n            state = stateString;\n        }, tuples[i ^ 1][2].disable, tuples[2][2].lock);\n    }\n    deferred[tuple[0]] = function () {\n        deferred[tuple[0] + 'With'](this === deferred ? promise : this, arguments);\n        return this;\n    };\n    deferred[tuple[0] + 'With'] = list.fireWith;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    state = stateString;\n}",
    "receiverBase": "list",
    "receiverCallee": "add"
  },
  {
    "callback": "function doScrollCheck() {\n    if (!jQuery.isReady) {\n        try {\n            top.doScroll('left');\n        } catch (e) {\n            return setTimeout(doScrollCheck, 50);\n        }\n        detach();\n        jQuery.ready();\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    var div = document.createElement('div');\n    if (support.deleteExpando == null) {\n        support.deleteExpando = true;\n        try {\n            delete div.test;\n        } catch (e) {\n            support.deleteExpando = false;\n        }\n    }\n    div = null;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    jQuery.data(this, key);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.data(this, key, value);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.removeData(this, key);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery._removeData(elem, type + 'queue');\n    jQuery._removeData(elem, key);\n}",
    "receiverBase": "Callbacks",
    "receiverCallee": "add"
  },
  {
    "callback": "function () {\n    var queue = jQuery.queue(this, type, data);\n    jQuery._queueHooks(this, type);\n    if (type === 'fx' && queue[0] !== 'inprogress') {\n        jQuery.dequeue(this, type);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.dequeue(this, type);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    support.noCloneEvent = false;\n}",
    "receiverBase": "div",
    "receiverCallee": "attachEvent"
  },
  {
    "callback": "function () {\n    var i, eventName, div = document.createElement('div');\n    for (i in {\n            submit: true,\n            change: true,\n            focusin: true\n        }) {\n        eventName = 'on' + i;\n        if (!(support[i + 'Bubbles'] = eventName in window)) {\n            div.setAttribute(eventName, 't');\n            support[i + 'Bubbles'] = div.attributes[eventName].expando === false;\n        }\n    }\n    div = null;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (e) {\n    var elem = e.target, form = jQuery.nodeName(elem, 'input') || jQuery.nodeName(elem, 'button') ? elem.form : undefined;\n    if (form && !jQuery._data(form, 'submitBubbles')) {\n        jQuery.event.add(form, 'submit._submit', function (event) {\n            event._submit_bubble = true;\n        });\n        jQuery._data(form, 'submitBubbles', true);\n    }\n}",
    "receiverBase": "event",
    "receiverCallee": "add"
  },
  {
    "callback": "function (event) {\n    event._submit_bubble = true;\n}",
    "receiverBase": "event",
    "receiverCallee": "add"
  },
  {
    "callback": "function (event) {\n    if (event.originalEvent.propertyName === 'checked') {\n        this._just_changed = true;\n    }\n}",
    "receiverBase": "event",
    "receiverCallee": "add"
  },
  {
    "callback": "function (event) {\n    if (this._just_changed && !event.isTrigger) {\n        this._just_changed = false;\n    }\n    jQuery.event.simulate('change', this, event, true);\n}",
    "receiverBase": "event",
    "receiverCallee": "add"
  },
  {
    "callback": "function (e) {\n    var elem = e.target;\n    if (rformElems.test(elem.nodeName) && !jQuery._data(elem, 'changeBubbles')) {\n        jQuery.event.add(elem, 'change._change', function (event) {\n            if (this.parentNode && !event.isSimulated && !event.isTrigger) {\n                jQuery.event.simulate('change', this.parentNode, event, true);\n            }\n        });\n        jQuery._data(elem, 'changeBubbles', true);\n    }\n}",
    "receiverBase": "event",
    "receiverCallee": "add"
  },
  {
    "callback": "function (event) {\n    if (this.parentNode && !event.isSimulated && !event.isTrigger) {\n        jQuery.event.simulate('change', this.parentNode, event, true);\n    }\n}",
    "receiverBase": "event",
    "receiverCallee": "add"
  },
  {
    "callback": "function () {\n    jQuery.event.add(this, types, fn, data, selector);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.event.remove(this, types, fn, selector);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.event.trigger(type, data, this);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (value) {\n    return value === undefined ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));\n}",
    "receiverBase": "",
    "receiverCallee": "access"
  },
  {
    "callback": "function (elem) {\n    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n        var target = manipulationTarget(this, elem);\n        target.appendChild(elem);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function (elem) {\n    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n        var target = manipulationTarget(this, elem);\n        target.insertBefore(elem, target.firstChild);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function (elem) {\n    if (this.parentNode) {\n        this.parentNode.insertBefore(elem, this);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function (elem) {\n    if (this.parentNode) {\n        this.parentNode.insertBefore(elem, this.nextSibling);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function () {\n    return jQuery.clone(this, dataAndEvents, deepDataAndEvents);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "map"
  },
  {
    "callback": "function (elem) {\n    arg = this.parentNode;\n    jQuery.cleanData(getAll(this));\n    if (arg) {\n        arg.replaceChild(elem, this);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function (index) {\n    var self = set.eq(index);\n    if (isFunction) {\n        args[0] = value.call(this, index, self.html());\n    }\n    self.domManip(args, callback);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (name, original) {\n    jQuery.fn[name] = function (selector) {\n        var elems, i = 0, ret = [], insert = jQuery(selector), last = insert.length - 1;\n        for (; i <= last; i++) {\n            elems = i === last ? this : this.clone(true);\n            jQuery(insert[i])[original](elems);\n            push.apply(ret, elems.get());\n        }\n        return this.pushStack(ret);\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (next, hooks) {\n    var timeout = setTimeout(next, time);\n    hooks.stop = function () {\n        clearTimeout(timeout);\n    };\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "queue"
  },
  {
    "callback": "function (value) {\n    return value == null ? '' : value + '';\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    jQuery.valHooks[this] = {\n        set: function (elem, value) {\n            if (jQuery.isArray(value)) {\n                return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;\n            }\n        }\n    };\n    if (!support.checkOn) {\n        jQuery.valHooks[this].get = function (elem) {\n            return elem.getAttribute('value') === null ? 'on' : elem.value;\n        };\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.removeAttr(this, name);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, name) {\n    jQuery.attrHooks[name] = {\n        set: function (elem, value) {\n            if (value === '') {\n                elem.setAttribute(name, 'auto');\n                return value;\n            }\n        }\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    try {\n        this[name] = undefined;\n        delete this[name];\n    } catch (e) {\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, name) {\n    jQuery.propHooks[name] = {\n        get: function (elem) {\n            return elem.getAttribute(name, 4);\n        }\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.propFix[this.toLowerCase()] = this;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (j) {\n    jQuery(this).addClass(value.call(this, j, this.className));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (j) {\n    jQuery(this).removeClass(value.call(this, j, this.className));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i) {\n    jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, name) {\n    jQuery.fn[name] = function (data, fn) {\n        return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (token, comma, open, close) {\n    if (requireNonComma && comma) {\n        depth = 0;\n    }\n    if (depth === 0) {\n        return token;\n    }\n    requireNonComma = open || comma;\n    depth += !close - !open;\n    return '';\n}",
    "receiverBase": "str",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (_, prefilterOrFactory) {\n    var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);\n    if (typeof dataTypeOrTransport === 'string' && !seekingTransport && !inspected[dataTypeOrTransport]) {\n        options.dataTypes.unshift(dataTypeOrTransport);\n        inspect(dataTypeOrTransport);\n        return false;\n    } else if (seekingTransport) {\n        return !(selected = dataTypeOrTransport);\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jqXHR.abort('timeout');\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (i, method) {\n    jQuery[method] = function (url, data, callback, type) {\n        if (jQuery.isFunction(data)) {\n            type = type || callback;\n            callback = data;\n            data = undefined;\n        }\n        return jQuery.ajax({\n            url: url,\n            type: method,\n            dataType: type,\n            data: data,\n            success: callback\n        });\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, type) {\n    jQuery.fn[type] = function (fn) {\n        return this.on(type, fn);\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, v) {\n    if (traditional || rbracket.test(prefix)) {\n        add(prefix, v);\n    } else {\n        buildParams(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, traditional, add);\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    add(this.name, this.value);\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var elements = jQuery.prop(this, 'elements');\n    return elements ? jQuery.makeArray(elements) : this;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    var type = this.type;\n    return this.name && !jQuery(this).is(':disabled') && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));\n}",
    "receiverBase": "map",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (i, elem) {\n    var val = jQuery(this).val();\n    return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {\n        return {\n            name: elem.name,\n            value: val.replace(rCRLF, '\\r\\n')\n        };\n    }) : {\n        name: elem.name,\n        value: val.replace(rCRLF, '\\r\\n')\n    };\n}",
    "receiverBase": "filter",
    "receiverCallee": "map"
  },
  {
    "callback": "function (val) {\n    return {\n        name: elem.name,\n        value: val.replace(rCRLF, '\\r\\n')\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    for (var key in xhrCallbacks) {\n        xhrCallbacks[key](undefined, true);\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "on"
  },
  {
    "callback": "function (s) {\n    if (s.cache === undefined) {\n        s.cache = false;\n    }\n    if (s.crossDomain) {\n        s.type = 'GET';\n        s.global = false;\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "ajaxPrefilter"
  },
  {
    "callback": "function () {\n    window[callbackName] = overwritten;\n    if (s[callbackName]) {\n        s.jsonpCallback = originalSettings.jsonpCallback;\n        oldCallbacks.push(callbackName);\n    }\n    if (responseContainer && jQuery.isFunction(overwritten)) {\n        overwritten(responseContainer[0]);\n    }\n    responseContainer = overwritten = undefined;\n}",
    "receiverBase": "jqXHR",
    "receiverCallee": "always"
  },
  {
    "callback": "function (responseText) {\n    response = arguments;\n    self.html(selector ? jQuery('<div>').append(jQuery.parseHTML(responseText)).find(selector) : responseText);\n}",
    "receiverBase": "ajax",
    "receiverCallee": "done"
  },
  {
    "callback": "function () {\n    return jQuery;\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function (req, res, next) {\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header('Access-Control-Allow-Headers', 'Content-Type');\n    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, PATCH, DELETE');\n    return next();\n}",
    "receiverBase": "app",
    "receiverCallee": "use"
  },
  {
    "callback": "function (req, res) {\n    res.statusCode = Number(req.params.status);\n    return res.send('Success');\n}",
    "receiverBase": "app",
    "receiverCallee": "all"
  },
  {
    "callback": "function (req, res) {\n    return res.send('Hello ' + (req.query.name || 'World') + '!');\n}",
    "receiverBase": "app",
    "receiverCallee": "all"
  },
  {
    "callback": "function (req, res) {\n    return fs.createReadStream(join(__dirname, 'lorem.txt')).pipe(res);\n}",
    "receiverBase": "app",
    "receiverCallee": "all"
  },
  {
    "callback": "function (req, res) {\n    return res.send(req.originalUrl);\n}",
    "receiverCallee": "all"
  },
  {
    "callback": "function (req, res) {\n    if (req.headers['content-type']) {\n        res.setHeader('Content-Type', req.headers['content-type']);\n    }\n    return req.pipe(res);\n}",
    "receiverBase": "all",
    "receiverCallee": "all"
  },
  {
    "callback": "function (req, res) {\n    return res.send(req.query);\n}",
    "receiverBase": "all",
    "receiverCallee": "all"
  },
  {
    "callback": "function (req, res) {\n    res.header('Access-Control-Allow-Headers', 'Authorization, X-Default-Header, X-Custom-Header');\n    return res.send(req.headers);\n}",
    "receiverBase": "all",
    "receiverCallee": "all"
  },
  {
    "callback": "function (req, res) {\n    return res.send('text');\n}",
    "receiverBase": "app",
    "receiverCallee": "all"
  },
  {
    "callback": "function (req, res) {\n    return res.send({ json: true });\n}",
    "receiverBase": "app",
    "receiverCallee": "all"
  },
  {
    "callback": "function (req, res) {\n    res.setHeader('Content-Type', 'application/x-www-form-urlencoded');\n    return res.send('key=value');\n}",
    "receiverBase": "app",
    "receiverCallee": "all"
  },
  {
    "callback": "function (req, res) {\n    res.setHeader('Content-Type', 'application/x-www-form-urlencoded');\n    return res.send('key=1&key=2&key=3');\n}",
    "receiverBase": "app",
    "receiverCallee": "all"
  },
  {
    "callback": "function (req, res) {\n    res.setHeader('Content-Type', 'application/x-www-form-urlencoded');\n    return res.send(qs.stringify({ key: 'Hello, world!' }));\n}",
    "receiverBase": "app",
    "receiverCallee": "all"
  },
  {
    "callback": "function () {\n    console.log('Express running at http://localhost:' + port);\n}",
    "receiverBase": "app",
    "receiverCallee": "listen"
  },
  {
    "callback": "function (elem, i) {\n    return callback.call(elem, i, elem);\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "map"
  },
  {
    "callback": "function (i, name) {\n    class2type['[object ' + name + ']'] = name.toLowerCase();\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (argument) {\n    argument = +argument;\n    return markFunction(function (seed, matches) {\n        var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;\n        while (i--) {\n            if (seed[j = matchIndexes[i]]) {\n                seed[j] = !(matches[j] = seed[j]);\n            }\n        }\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "markFunction"
  },
  {
    "callback": "function (seed, matches) {\n    var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;\n    while (i--) {\n        if (seed[j = matchIndexes[i]]) {\n            seed[j] = !(matches[j] = seed[j]);\n        }\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "markFunction"
  },
  {
    "callback": "function () {\n    setDocument();\n}",
    "receiverBase": "parent",
    "receiverCallee": "attachEvent"
  },
  {
    "callback": "function (div) {\n    div.className = 'i';\n    return !div.getAttribute('className');\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (div) {\n    div.appendChild(doc.createComment(''));\n    return !div.getElementsByTagName('*').length;\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (div) {\n    div.innerHTML = '<div class=\\'a\\'></div><div class=\\'a i\\'></div>';\n    div.firstChild.className = 'i';\n    return div.getElementsByClassName('i').length === 2;\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (div) {\n    docElem.appendChild(div).id = expando;\n    return !doc.getElementsByName || !doc.getElementsByName(expando).length;\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (div) {\n    div.innerHTML = '<select><option selected=\\'\\'></option></select>';\n    if (!div.querySelectorAll('[selected]').length) {\n        rbuggyQSA.push('\\\\[' + whitespace + '*(?:value|' + booleans + ')');\n    }\n    if (!div.querySelectorAll(':checked').length) {\n        rbuggyQSA.push(':checked');\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (div) {\n    var input = doc.createElement('input');\n    input.setAttribute('type', 'hidden');\n    div.appendChild(input).setAttribute('t', '');\n    if (div.querySelectorAll('[t^=\\'\\']').length) {\n        rbuggyQSA.push('[*^$]=' + whitespace + '*(?:\\'\\'|\"\")');\n    }\n    if (!div.querySelectorAll(':enabled').length) {\n        rbuggyQSA.push(':enabled', ':disabled');\n    }\n    div.querySelectorAll('*,:x');\n    rbuggyQSA.push(',.*:');\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (div) {\n    support.disconnectedMatch = matches.call(div, 'div');\n    matches.call(div, '[s!=\\'\\']:x');\n    rbuggyMatches.push('!=', pseudos);\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (elem) {\n    return pattern.test(typeof elem.className === 'string' && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute('class') || '');\n}",
    "receiverBase": "",
    "receiverCallee": "classCache"
  },
  {
    "callback": "function (seed, matches) {\n    var idx, matched = fn(seed, argument), i = matched.length;\n    while (i--) {\n        idx = indexOf.call(seed, matched[i]);\n        seed[idx] = !(matches[idx] = matched[i]);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "markFunction"
  },
  {
    "callback": "function (seed, matches, context, xml) {\n    var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;\n    while (i--) {\n        if (elem = unmatched[i]) {\n            seed[i] = !(matches[i] = elem);\n        }\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "markFunction"
  },
  {
    "callback": "function (selector) {\n    return function (elem) {\n        return Sizzle(selector, elem).length > 0;\n    };\n}",
    "receiverBase": "",
    "receiverCallee": "markFunction"
  },
  {
    "callback": "function (text) {\n    return function (elem) {\n        return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;\n    };\n}",
    "receiverBase": "",
    "receiverCallee": "markFunction"
  },
  {
    "callback": "function () {\n    return [0];\n}",
    "receiverBase": "",
    "receiverCallee": "createPositionalPseudo"
  },
  {
    "callback": "function (matchIndexes, length) {\n    return [length - 1];\n}",
    "receiverBase": "",
    "receiverCallee": "createPositionalPseudo"
  },
  {
    "callback": "function (matchIndexes, length, argument) {\n    return [argument < 0 ? argument + length : argument];\n}",
    "receiverBase": "",
    "receiverCallee": "createPositionalPseudo"
  },
  {
    "callback": "function (matchIndexes, length) {\n    var i = 0;\n    for (; i < length; i += 2) {\n        matchIndexes.push(i);\n    }\n    return matchIndexes;\n}",
    "receiverBase": "",
    "receiverCallee": "createPositionalPseudo"
  },
  {
    "callback": "function (matchIndexes, length) {\n    var i = 1;\n    for (; i < length; i += 2) {\n        matchIndexes.push(i);\n    }\n    return matchIndexes;\n}",
    "receiverBase": "",
    "receiverCallee": "createPositionalPseudo"
  },
  {
    "callback": "function (matchIndexes, length, argument) {\n    var i = argument < 0 ? argument + length : argument;\n    for (; --i >= 0;) {\n        matchIndexes.push(i);\n    }\n    return matchIndexes;\n}",
    "receiverBase": "",
    "receiverCallee": "createPositionalPseudo"
  },
  {
    "callback": "function (matchIndexes, length, argument) {\n    var i = argument < 0 ? argument + length : argument;\n    for (; ++i < length;) {\n        matchIndexes.push(i);\n    }\n    return matchIndexes;\n}",
    "receiverBase": "",
    "receiverCallee": "createPositionalPseudo"
  },
  {
    "callback": "function (elem) {\n    return elem === checkContext;\n}",
    "receiverBase": "",
    "receiverCallee": "addCombinator"
  },
  {
    "callback": "function (elem) {\n    return indexOf.call(checkContext, elem) > -1;\n}",
    "receiverBase": "",
    "receiverCallee": "addCombinator"
  },
  {
    "callback": "function (div1) {\n    return div1.compareDocumentPosition(document.createElement('div')) & 1;\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (div) {\n    div.innerHTML = '<a href=\\'#\\'></a>';\n    return div.firstChild.getAttribute('href') === '#';\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (elem, name, isXML) {\n    if (!isXML) {\n        return elem.getAttribute(name, name.toLowerCase() === 'type' ? 1 : 2);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "addHandle"
  },
  {
    "callback": "function (div) {\n    div.innerHTML = '<input/>';\n    div.firstChild.setAttribute('value', '');\n    return div.firstChild.getAttribute('value') === '';\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (elem, name, isXML) {\n    if (!isXML && elem.nodeName.toLowerCase() === 'input') {\n        return elem.defaultValue;\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "addHandle"
  },
  {
    "callback": "function (div) {\n    return div.getAttribute('disabled') == null;\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (elem, name, isXML) {\n    var val;\n    if (!isXML) {\n        return (val = elem.getAttributeNode(name)) && val.specified ? val.value : elem[name] === true ? name.toLowerCase() : null;\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "addHandle"
  },
  {
    "callback": "function (_, flag) {\n    object[flag] = true;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function add(args) {\n    jQuery.each(args, function (_, arg) {\n        var type = jQuery.type(arg);\n        if (type === 'function') {\n            if (!options.unique || !self.has(arg)) {\n                list.push(arg);\n            }\n        } else if (arg && arg.length && type !== 'string') {\n            add(arg);\n        }\n    });\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_, arg) {\n    var type = jQuery.type(arg);\n    if (type === 'function') {\n        if (!options.unique || !self.has(arg)) {\n            list.push(arg);\n        }\n    } else if (arg && arg.length && type !== 'string') {\n        add(arg);\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (_, arg) {\n    var index;\n    while ((index = jQuery.inArray(arg, list, index)) > -1) {\n        list.splice(index, 1);\n        if (firing) {\n            if (index <= firingLength) {\n                firingLength--;\n            }\n            if (index <= firingIndex) {\n                firingIndex--;\n            }\n        }\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, tuple) {\n    var action = tuple[0], fn = jQuery.isFunction(fns[i]) && fns[i];\n    deferred[tuple[1]](function () {\n        var returned = fn && fn.apply(this, arguments);\n        if (returned && jQuery.isFunction(returned.promise)) {\n            returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);\n        } else {\n            newDefer[action + 'With'](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);\n        }\n    });\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var returned = fn && fn.apply(this, arguments);\n    if (returned && jQuery.isFunction(returned.promise)) {\n        returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);\n    } else {\n        newDefer[action + 'With'](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "deferred"
  },
  {
    "callback": "function (i, tuple) {\n    var list = tuple[2], stateString = tuple[3];\n    promise[tuple[1]] = list.add;\n    if (stateString) {\n        list.add(function () {\n            state = stateString;\n        }, tuples[i ^ 1][2].disable, tuples[2][2].lock);\n    }\n    deferred[tuple[0]] = function () {\n        deferred[tuple[0] + 'With'](this === deferred ? promise : this, arguments);\n        return this;\n    };\n    deferred[tuple[0] + 'With'] = list.fireWith;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    state = stateString;\n}",
    "receiverBase": "list",
    "receiverCallee": "add"
  },
  {
    "callback": "function () {\n    support.boxSizing = div.offsetWidth === 4;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "swap"
  },
  {
    "callback": "function () {\n    data_user.set(this, key);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var data = data_user.get(this, camelKey);\n    data_user.set(this, camelKey, value);\n    if (key.indexOf('-') !== -1 && data !== undefined) {\n        data_user.set(this, key, value);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    data_user.remove(this, key);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    data_priv.remove(elem, [\n        type + 'queue',\n        key\n    ]);\n}",
    "receiverBase": "Callbacks",
    "receiverCallee": "add"
  },
  {
    "callback": "function () {\n    var queue = jQuery.queue(this, type, data);\n    jQuery._queueHooks(this, type);\n    if (type === 'fx' && queue[0] !== 'inprogress') {\n        jQuery.dequeue(this, type);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.dequeue(this, type);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (next, hooks) {\n    var timeout = setTimeout(next, time);\n    hooks.stop = function () {\n        clearTimeout(timeout);\n    };\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "queue"
  },
  {
    "callback": "function () {\n    jQuery.removeAttr(this, name);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    delete this[jQuery.propFix[name] || name];\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (j) {\n    jQuery(this).addClass(value.call(this, j, this.className));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (j) {\n    jQuery(this).removeClass(value.call(this, j, this.className));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i) {\n    jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (value) {\n    return value == null ? '' : value + '';\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "map"
  },
  {
    "callback": "function (i, name) {\n    var getter = jQuery.expr.attrHandle[name] || jQuery.find.attr;\n    jQuery.expr.attrHandle[name] = function (elem, name, isXML) {\n        var fn = jQuery.expr.attrHandle[name], ret = isXML ? undefined : (jQuery.expr.attrHandle[name] = undefined) != getter(elem, name, isXML) ? name.toLowerCase() : null;\n        jQuery.expr.attrHandle[name] = fn;\n        return ret;\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.propFix[this.toLowerCase()] = this;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.valHooks[this] = {\n        set: function (elem, value) {\n            if (jQuery.isArray(value)) {\n                return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;\n            }\n        }\n    };\n    if (!jQuery.support.checkOn) {\n        jQuery.valHooks[this].get = function (elem) {\n            return elem.getAttribute('value') === null ? 'on' : elem.value;\n        };\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.event.add(this, types, fn, data, selector);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.event.remove(this, types, fn, selector);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.event.trigger(type, data, this);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    for (i = 0; i < len; i++) {\n        if (jQuery.contains(self[i], this)) {\n            return true;\n        }\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "filter"
  },
  {
    "callback": "function () {\n    var i = 0;\n    for (; i < l; i++) {\n        if (jQuery.contains(this, targets[i])) {\n            return true;\n        }\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (elem) {\n    return elem.nodeType === 1;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function (elem, i) {\n    return !!qualifier.call(elem, i, elem) !== not;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function (elem) {\n    return elem === qualifier !== not;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function (elem) {\n    return core_indexOf.call(qualifier, elem) >= 0 !== not;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function (value) {\n    return value === undefined ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "access"
  },
  {
    "callback": "function (elem) {\n    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n        var target = manipulationTarget(this, elem);\n        target.appendChild(elem);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function (elem) {\n    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n        var target = manipulationTarget(this, elem);\n        target.insertBefore(elem, target.firstChild);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function (elem) {\n    if (this.parentNode) {\n        this.parentNode.insertBefore(elem, this);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function (elem) {\n    if (this.parentNode) {\n        this.parentNode.insertBefore(elem, this.nextSibling);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function () {\n    return jQuery.clone(this, dataAndEvents, deepDataAndEvents);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "map"
  },
  {
    "callback": "function (elem) {\n    return [\n        elem.nextSibling,\n        elem.parentNode\n    ];\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "map"
  },
  {
    "callback": "function (elem) {\n    var next = args[i++], parent = args[i++];\n    if (parent) {\n        if (next && next.parentNode !== parent) {\n            next = this.nextSibling;\n        }\n        jQuery(this).remove();\n        parent.insertBefore(elem, next);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function (index) {\n    var self = set.eq(index);\n    if (isFunction) {\n        args[0] = value.call(this, index, self.html());\n    }\n    self.domManip(args, callback, allowIntersection);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (name, original) {\n    jQuery.fn[name] = function (selector) {\n        var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;\n        for (; i <= last; i++) {\n            elems = i === last ? this : this.clone(true);\n            jQuery(insert[i])[original](elems);\n            core_push.apply(ret, elems.get());\n        }\n        return this.pushStack(ret);\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (elem, name, value) {\n    var styles, len, map = {}, i = 0;\n    if (jQuery.isArray(name)) {\n        styles = getStyles(elem);\n        len = name.length;\n        for (; i < len; i++) {\n            map[name[i]] = jQuery.css(elem, name[i], false, styles);\n        }\n        return map;\n    }\n    return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "access"
  },
  {
    "callback": "function () {\n    if (isHidden(this)) {\n        jQuery(this).show();\n    } else {\n        jQuery(this).hide();\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    return getWidthOrHeight(elem, name, extra);\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "swap"
  },
  {
    "callback": "function (i, prop) {\n    jQuery.cssHooks[prop] = {\n        get: function (elem, computed) {\n            if (computed) {\n                computed = curCSS(elem, prop);\n                return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + 'px' : computed;\n            }\n        }\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var elements = jQuery.prop(this, 'elements');\n    return elements ? jQuery.makeArray(elements) : this;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    var type = this.type;\n    return this.name && !jQuery(this).is(':disabled') && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !manipulation_rcheckableType.test(type));\n}",
    "receiverBase": "map",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (i, elem) {\n    var val = jQuery(this).val();\n    return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {\n        return {\n            name: elem.name,\n            value: val.replace(rCRLF, '\\r\\n')\n        };\n    }) : {\n        name: elem.name,\n        value: val.replace(rCRLF, '\\r\\n')\n    };\n}",
    "receiverBase": "filter",
    "receiverCallee": "map"
  },
  {
    "callback": "function (val) {\n    return {\n        name: elem.name,\n        value: val.replace(rCRLF, '\\r\\n')\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    add(this.name, this.value);\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, v) {\n    if (traditional || rbracket.test(prefix)) {\n        add(prefix, v);\n    } else {\n        buildParams(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, traditional, add);\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (_, prefilterOrFactory) {\n    var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);\n    if (typeof dataTypeOrTransport === 'string' && !seekingTransport && !inspected[dataTypeOrTransport]) {\n        options.dataTypes.unshift(dataTypeOrTransport);\n        inspect(dataTypeOrTransport);\n        return false;\n    } else if (seekingTransport) {\n        return !(selected = dataTypeOrTransport);\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (responseText) {\n    response = arguments;\n    self.html(selector ? jQuery('<div>').append(jQuery.parseHTML(responseText)).find(selector) : responseText);\n}",
    "receiverBase": "ajax",
    "receiverCallee": "done"
  },
  {
    "callback": "function (i, type) {\n    jQuery.fn[type] = function (fn) {\n        return this.on(type, fn);\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jqXHR.abort('timeout');\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (i, method) {\n    jQuery[method] = function (url, data, callback, type) {\n        if (jQuery.isFunction(data)) {\n            type = type || callback;\n            callback = data;\n            data = undefined;\n        }\n        return jQuery.ajax({\n            url: url,\n            type: method,\n            dataType: type,\n            data: data,\n            success: callback\n        });\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (s) {\n    if (s.cache === undefined) {\n        s.cache = false;\n    }\n    if (s.crossDomain) {\n        s.type = 'GET';\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "ajaxPrefilter"
  },
  {
    "callback": "function () {\n    window[callbackName] = overwritten;\n    if (s[callbackName]) {\n        s.jsonpCallback = originalSettings.jsonpCallback;\n        oldCallbacks.push(callbackName);\n    }\n    if (responseContainer && jQuery.isFunction(overwritten)) {\n        overwritten(responseContainer[0]);\n    }\n    responseContainer = overwritten = undefined;\n}",
    "receiverBase": "jqXHR",
    "receiverCallee": "always"
  },
  {
    "callback": "function () {\n    for (var key in xhrCallbacks) {\n        xhrCallbacks[key]();\n    }\n    xhrCallbacks = undefined;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "on"
  },
  {
    "callback": "function (elem, type, value) {\n    var doc;\n    if (jQuery.isWindow(elem)) {\n        return elem.document.documentElement['client' + name];\n    }\n    if (elem.nodeType === 9) {\n        doc = elem.documentElement;\n        return Math.max(elem.body['scroll' + name], doc['scroll' + name], elem.body['offset' + name], doc['offset' + name], doc['client' + name]);\n    }\n    return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra);\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "access"
  },
  {
    "callback": "function () {\n    return jQuery;\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function (file) {\n    if (file.id === id) {\n        tmp = file;\n        return false;\n    }\n}",
    "receiverBase": "angular",
    "receiverCallee": "forEach"
  }
]