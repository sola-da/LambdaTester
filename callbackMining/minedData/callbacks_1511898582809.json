[
  {
    "callback": "function () {\n    $(function () {\n        doh.is('epsilon', $('body').epsilon());\n        doh.is('epsilon', $('body').epsilon());\n        readyFired();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function () {\n    doh.is('epsilon', $('body').epsilon());\n    doh.is('epsilon', $('body').epsilon());\n    readyFired();\n}",
    "receiverBase": "",
    "receiverCallee": "$"
  },
  {
    "callback": "function () {\n    if (document.documentMode) {\n        return document.documentMode;\n    } else {\n        for (var i = 7; i > 4; i--) {\n            var div = document.createElement('div');\n            div.innerHTML = '<!--[if IE ' + i + ']><span></span><![endif]-->';\n            if (div.getElementsByTagName('span').length) {\n                div = null;\n                return i;\n            }\n        }\n    }\n    return undefined;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    var timeLast = 0;\n    return window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (callback) {\n        var timeCurrent = new Date().getTime(), timeDelta;\n        timeDelta = Math.max(0, 16 - (timeCurrent - timeLast));\n        timeLast = timeCurrent + timeDelta;\n        return setTimeout(function () {\n            callback(timeCurrent + timeDelta);\n        }, timeDelta);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    callback(timeCurrent + timeDelta);\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (i, name) {\n    baseEasings[name] = function (p) {\n        return Math.pow(p, i + 2);\n    };\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function (name, easeIn) {\n    $.velocity.Easings['easeIn' + name] = easeIn;\n    $.velocity.Easings['easeOut' + name] = function (p) {\n        return 1 - easeIn(1 - p);\n    };\n    $.velocity.Easings['easeInOut' + name] = function (p) {\n        return p < 0.5 ? easeIn(p * 2) / 2 : 1 - easeIn(p * -2 + 2) / 2;\n    };\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function (m, r, g, b) {\n    return r + r + g + g + b + b;\n}",
    "receiverBase": "hex",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (match, subMatch) {\n    return subMatch.toUpperCase();\n}",
    "receiverBase": "property",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (match) {\n    return match.toUpperCase();\n}",
    "receiverBase": "property",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (elementIndex, element) {\n    $.velocity.Sequences[propertiesMap].call(element, element, options || {}, elementIndex, elementsLength);\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function (next) {\n    $.velocity.queueEntryFlag = true;\n    setTimeout(next, parseFloat(opts.delay));\n}",
    "receiverBase": "$",
    "receiverCallee": "queue"
  },
  {
    "callback": "function (match) {\n    unitType = match;\n    return '';\n}",
    "receiverBase": "toLowerCase",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (match, subMatch) {\n    operator = subMatch;\n    return '';\n}",
    "receiverBase": "separatedValue",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (next) {\n    $.velocity.queueEntryFlag = true;\n    buildQueue(next);\n}",
    "receiverBase": "$",
    "receiverCallee": "queue"
  },
  {
    "callback": "function () {\n    requestAnimationFrame(tick);\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (appWindow) {\n    webview = appWindow.contentWindow;\n}",
    "receiverBase": "window",
    "receiverCallee": "create"
  },
  {
    "callback": "function () {\n    clipHelper.contentWindow.openWindow(url);\n}",
    "receiverBase": "",
    "receiverCallee": "createClipboardHelper"
  },
  {
    "callback": "function (appWindow) {\n    clipHelper = appWindow;\n    clipHelper.contentWindow.addEventListener('DOMContentLoaded', function () {\n        callback();\n    });\n}",
    "receiverBase": "window",
    "receiverCallee": "create"
  },
  {
    "callback": "function () {\n    callback();\n}",
    "receiverBase": "contentWindow",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function () {\n    chrome.socket.read(self.socketId, self._onDataRead.bind(self));\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (request, sender, sendResponse) {\n    if (request.action && request.action == 'status') {\n        sendResponse({ 'result': true });\n        return;\n    }\n}",
    "receiverBase": "onMessageExternal",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function (x) {\n    return x.charCodeAt(0);\n}",
    "receiverBase": "split",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    doCopy(msg.data);\n}",
    "receiverBase": "",
    "receiverCallee": "createClipboardHelper"
  },
  {
    "callback": "function () {\n    var err = chrome.runtime.lastError;\n    if (err)\n        console.log(err);\n}",
    "receiverBase": "local",
    "receiverCallee": "clear"
  },
  {
    "callback": "function () {\n    var err = chrome.runtime.lastError;\n    if (err)\n        console.log(err);\n}",
    "receiverBase": "sync",
    "receiverCallee": "clear"
  },
  {
    "callback": "function () {\n    clipHelper.contentWindow.openWindow(msg.data);\n}",
    "receiverBase": "",
    "receiverCallee": "createClipboardHelper"
  },
  {
    "callback": "function (msg) {\n    if (clipHelper) {\n        clipHelper.close();\n        clipHelper = null;\n    }\n    if (port.so) {\n        port.so.disconnect();\n        port.so = null;\n    }\n}",
    "receiverBase": "onDisconnect",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function (uri, isImage) {\n    return !/^unsafe/.test($$sanitizeUri(uri, isImage));\n}",
    "receiverBase": "",
    "receiverCallee": "htmlSanitizeWriter"
  },
  {
    "callback": "function (all, text) {\n    text = text.replace(COMMENT_REGEXP, '$1').replace(CDATA_REGEXP, '$1');\n    if (handler.chars)\n        handler.chars(decodeEntities(text));\n    return '';\n}",
    "receiverBase": "html",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (match, name, doubleQuotedValue, singleQuotedValue, unquotedValue) {\n    var value = doubleQuotedValue || singleQuotedValue || unquotedValue || '';\n    attrs[name] = decodeEntities(value);\n}",
    "receiverBase": "rest",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (value) {\n    var hi = value.charCodeAt(0);\n    var low = value.charCodeAt(1);\n    return '&#' + ((hi - 55296) * 1024 + (low - 56320) + 65536) + ';';\n}",
    "receiverBase": "replace",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (value) {\n    return '&#' + value.charCodeAt(0) + ';';\n}",
    "receiverBase": "replace",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (value, key) {\n    var lkey = angular.lowercase(key);\n    var isImage = tag === 'img' && lkey === 'src' || lkey === 'background';\n    if (validAttrs[lkey] === true && (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {\n        out(' ');\n        out(key);\n        out('=\"');\n        out(encodeEntities(value));\n        out('\"');\n    }\n}",
    "receiverBase": "angular",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (url) {\n    output += options.fn({ url: url });\n}",
    "receiverBase": "urls",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (item) {\n    return extend({}, item, { isActive: item.id === itemId });\n}",
    "receiverBase": "nav",
    "receiverCallee": "map"
  },
  {
    "callback": "function (item) {\n    return extend({}, item, { isActive: item.id === options.hash.active });\n}",
    "receiverBase": "items",
    "receiverCallee": "map"
  },
  {
    "callback": "function (guest) {\n    return !!guest.name && (attending ? guest.is_attending : true);\n}",
    "receiverBase": "guests",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (guest) {\n    return guest.name.split(' ')[0];\n}",
    "receiverBase": "filter",
    "receiverCallee": "map"
  },
  {
    "callback": "function (output, guest) {\n    guest = extend({}, guest, { mealOptions: options.hash.meals });\n    return output + options.fn(guest);\n}",
    "receiverBase": "guests",
    "receiverCallee": "reduce"
  },
  {
    "callback": "function (meal) {\n    if (meal.id === this.meal) {\n        mealLabel = meal.label;\n        return true;\n    }\n}",
    "receiverBase": "mealOptions",
    "receiverCallee": "some"
  },
  {
    "callback": "function (rule) {\n    rule.attach(node);\n}",
    "receiverBase": "rules",
    "receiverCallee": "each"
  },
  {
    "callback": "function (rule) {\n    rule.detach(node);\n}",
    "receiverBase": "rules",
    "receiverCallee": "each"
  },
  {
    "callback": "function (bit) {\n    return bit + 'px';\n}",
    "receiverBase": "value",
    "receiverCallee": "map"
  },
  {
    "callback": "function (parsed) {\n    var classes = [\n            '',\n            'lsd'\n        ];\n    if (parsed.tag)\n        classes.push(parsed.tag);\n    if (parsed.id)\n        classes.push('id-' + parsed.id);\n    if (parsed.pseudos) {\n        parsed.pseudos.each(function (pseudo) {\n            classes.push(pseudo.key);\n        });\n    }\n    ;\n    return classes.join('.');\n}",
    "receiverBase": "expressions",
    "receiverCallee": "map"
  },
  {
    "callback": "function (pseudo) {\n    classes.push(pseudo.key);\n}",
    "receiverBase": "pseudos",
    "receiverCallee": "each"
  },
  {
    "callback": "function (chunk) {\n    if (chunk.tag && chunk.tag != '*')\n        specificity++;\n    if (chunk.id)\n        specificity += 100;\n    for (var i in chunk.attributes)\n        specificity++;\n    specificity += (chunk.pseudos || []).length;\n    specificity += (chunk.classes || []).length * 10;\n}",
    "receiverBase": "expressions",
    "receiverCallee": "each"
  },
  {
    "callback": "function (bit, i) {\n    if (bit.call) {\n        return 'value[' + i + '].call(this, property)';\n    } else {\n        return bit;\n    }\n}",
    "receiverBase": "value",
    "receiverCallee": "map"
  },
  {
    "callback": "function (selector) {\n    return new LSD.Sheet.Rule(LSD.Slick.parse(selector), style);\n}",
    "receiverBase": "split",
    "receiverCallee": "map"
  },
  {
    "callback": "function (name, definition) {\n    if (typeof module != 'undefined' && module.exports)\n        module.exports = definition();\n    else if (typeof define == 'function' && define.amd)\n        define(definition);\n    else\n        this[name] = definition();\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (el) {\n    return !fn(el);\n}",
    "receiverBase": "",
    "receiverCallee": "every"
  },
  {
    "callback": "function loading(path, force) {\n    if (path === null)\n        return callback();\n    path = !force && path.indexOf('.js') === -1 && !/^https?:\\/\\//.test(path) && scriptpath ? scriptpath + path + '.js' : path;\n    if (scripts[path]) {\n        if (id)\n            ids[id] = 1;\n        return scripts[path] == 2 ? callback() : setTimeout(function () {\n            loading(path, true);\n        }, 0);\n    }\n    scripts[path] = 1;\n    if (id)\n        ids[id] = 1;\n    create(path, callback);\n}",
    "receiverBase": "",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    loading(path, true);\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function callback(s) {\n    s = scripts.shift();\n    !scripts.length ? $script(s, id, done) : $script(s, callback);\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (dep) {\n    list[dep] || missing[push](dep);\n}",
    "receiverBase": "",
    "receiverCallee": "each"
  },
  {
    "callback": "function (dep) {\n    return list[dep];\n}",
    "receiverBase": "",
    "receiverCallee": "every"
  },
  {
    "callback": "function (key) {\n    delay[key] = delay[key] || [];\n    delay[key][push](ready);\n    req && req(missing);\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(['angular'], function (angular) {\n            return factory(angular, document);\n        });\n    } else {\n        factory(angular, document);\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (angular) {\n    return factory(angular, document);\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function (value) {\n    return !_.contains(rest, value);\n}",
    "receiverBase": "_",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (value, index, list) {\n    if (predicate(value, index, list)) {\n        result = value;\n        return true;\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "any"
  },
  {
    "callback": "function (value, index, list) {\n    if (predicate(value, index, list))\n        results.push(value);\n}",
    "receiverBase": "angular",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (obj) {\n    if (obj !== dst && _.isObject(obj)) {\n        for (var key in obj) {\n            if (!_defineAccessor(dst, obj, key)) {\n                dst[key] = _deepClone(obj[key], _extendWithGetSet);\n            }\n        }\n    }\n}",
    "receiverBase": "angular",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (item) {\n    return !!item;\n}",
    "receiverBase": "_",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (param) {\n    param = param.replace(/\\:*/, '');\n    if (params[param] === undefined && !ignoreMissing)\n        _error('No parameter \"' + param + '\" is available for URL ' + url);\n    return params[param];\n}",
    "receiverBase": "url",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (fieldError) {\n    var attrName = fieldError.field, message = fieldError.message;\n    if (!_.isArray(errors[attrName]))\n        errors[attrName] = [];\n    errors[attrName].push(message);\n}",
    "receiverBase": "fieldErrors",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    tracked.splice(tracked.indexOf(deferred), 1);\n}",
    "receiverBase": "promise",
    "receiverCallee": "finally"
  },
  {
    "callback": "function success(value) {\n    deferred.resolve(value);\n    return value;\n}",
    "receiverBase": "promise",
    "receiverCallee": "then"
  },
  {
    "callback": "function error(value) {\n    deferred.reject(value);\n    return $q.reject(value);\n}",
    "receiverBase": "promise",
    "receiverCallee": "then"
  },
  {
    "callback": "function (res) {\n    if (hasFuture)\n        _.extend(_future, res.data);\n    deferred.resolve(fullResponse ? res : res.data);\n}",
    "receiverBase": "$http",
    "receiverCallee": "then"
  },
  {
    "callback": "function (res) {\n    deferred.reject(res);\n}",
    "receiverBase": "$http",
    "receiverCallee": "then"
  },
  {
    "callback": "function () {\n    return true;\n}",
    "receiverBase": "delete",
    "receiverCallee": "then"
  },
  {
    "callback": "function (res) {\n    var data = options.parse ? _this.parse(res.data, options) : res.data;\n    _this.set(data, options);\n    _this._setRemoteState(null, options);\n    if (_.isFunction(options.onSuccess))\n        options.onSuccess.call(_this, res);\n    return fullResponse ? res : rawData ? res.data : _this;\n}",
    "receiverBase": "get",
    "receiverCallee": "then"
  },
  {
    "callback": "function (res) {\n    if (_.isFunction(options.onError))\n        options.onError.call(_this, res);\n    $q.reject(res);\n}",
    "receiverBase": "get",
    "receiverCallee": "then"
  },
  {
    "callback": "function (resData) {\n    if (resData && _.isObject(resData)) {\n        var serverAttrs = _this.parse(resData, options);\n        _this.set(serverAttrs);\n    }\n    _this._setRemoteState(null, options);\n    return _this;\n}",
    "receiverBase": "$request",
    "receiverCallee": "then"
  },
  {
    "callback": "function (response) {\n    if (response.status === 422 && response.data && _this.parseModelErrors) {\n        _this.clearModelErrors();\n        _this.addModelErrors(_this.parseModelErrors(response.data));\n    }\n    return $q.reject(response);\n}",
    "receiverBase": "then",
    "receiverCallee": "catch"
  },
  {
    "callback": "function () {\n    if (options.wait && !options.keepInCollections)\n        removeFromCollections();\n    _this.$destroyed = true;\n    return _this;\n}",
    "receiverBase": "delete",
    "receiverCallee": "then"
  },
  {
    "callback": "function (res) {\n    var method = options.reset ? 'reset' : 'set', data = options.parse && _this.parse ? _this.parse(res.data, options) : res.data;\n    _this[method](data, options);\n    if (_.isFunction(options.onSuccess))\n        options.onSuccess.call(_this, res);\n    return fullResponse ? res : rawData ? res.data : _this;\n}",
    "receiverBase": "get",
    "receiverCallee": "then"
  },
  {
    "callback": "function (res) {\n    if (_.isFunction(options.onError))\n        options.onError.call(_this, res);\n    $q.reject(res);\n}",
    "receiverBase": "get",
    "receiverCallee": "then"
  },
  {
    "callback": "function (model) {\n    for (var key in attrs) {\n        if (attrs[key] !== model[key])\n            return false;\n    }\n    return true;\n}",
    "receiverBase": "",
    "receiverCallee": "_"
  },
  {
    "callback": "function () {\n    if (options.wait)\n        _this.add(model, options);\n}",
    "receiverBase": "savePromise",
    "receiverCallee": "then"
  },
  {
    "callback": "function (model) {\n    return model.serialize(options);\n}",
    "receiverBase": "_",
    "receiverCallee": "map"
  },
  {
    "callback": "function (res) {\n    if (rawData) {\n        _.extend(_future, res.data);\n    } else {\n        _future.set(res.data, options);\n    }\n    if (_.isFunction(options.onSuccess))\n        options.onSuccess.call(_this, res);\n    return fullResponse ? res : _future;\n}",
    "receiverBase": "get",
    "receiverCallee": "then"
  },
  {
    "callback": "function (res) {\n    if (_.isFunction(options.onError))\n        options.onError.call(_this, res);\n    $q.reject(res);\n}",
    "receiverBase": "get",
    "receiverCallee": "then"
  },
  {
    "callback": "function (res) {\n    if (rawData) {\n        Array.prototype.push.apply(_future, res.data);\n    } else {\n        _future.reset(res.data, options);\n    }\n    if (_.isFunction(options.onSuccess))\n        options.onSuccess.call(_this, res);\n    return fullResponse ? res : _future;\n}",
    "receiverBase": "get",
    "receiverCallee": "then"
  },
  {
    "callback": "function (res) {\n    if (_.isFunction(options.onError))\n        options.onError.call(_this, res);\n    $q.reject(res);\n}",
    "receiverBase": "get",
    "receiverCallee": "then"
  },
  {
    "callback": "function (attrValue) {\n    var isInvalid = attrValue || _.isArray(attrValue) && attrValue.length > 0;\n    ngModelCtrl.$setValidity('modelError', !isInvalid);\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function () {\n    var servo = new five.Servo({\n            pin: 'D0',\n            type: 'continuous'\n        });\n    board.repl.inject({ servo: servo });\n    servo.cw(0.5);\n}",
    "receiverBase": "board",
    "receiverCallee": "on"
  }
]