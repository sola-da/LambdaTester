[
  {
    "callback": "function () {\n    var text = getDocument();\n    QUnit.expect(1);\n    QUnit.equal(base64_encode_with_native_fallback(text), base64_encode(text));\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function (data) {\n    var hash = data.key.slice(self.prefix.length);\n    self._addIndex(hash, data.value.ts, data.value.height);\n}",
    "receiverBase": "s",
    "receiverCallee": "on"
  },
  {
    "callback": "function (err) {\n    self.emit('error', err);\n}",
    "receiverBase": "s",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    self.loading = false;\n    self.emit('load');\n}",
    "receiverBase": "s",
    "receiverCallee": "on"
  },
  {
    "callback": "function (err) {\n    if (err)\n        self.emit('error', err);\n}",
    "receiverBase": "storage",
    "receiverCallee": "put"
  },
  {
    "callback": "function (err) {\n    if (err)\n        self.emit('error', err);\n}",
    "receiverBase": "storage",
    "receiverCallee": "del"
  },
  {
    "callback": "function () {\n    this.add(block);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "once"
  },
  {
    "callback": "function () {\n    this.has(hash, noProbe, cb);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "once"
  },
  {
    "callback": "function () {\n    cb(block);\n}",
    "receiverBase": "utils",
    "receiverCallee": "nextTick"
  },
  {
    "callback": "function () {\n    this.hashesInRange(start, end, cb);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "once"
  },
  {
    "callback": "function (a, b) {\n    return a.height - b.height;\n}",
    "receiverBase": "zip",
    "receiverCallee": "sort"
  },
  {
    "callback": "function (a) {\n    return a.hash;\n}",
    "receiverBase": "zip",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    this.getLast(cb);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "once"
  },
  {
    "callback": "function (dir) {\n    var directory = dir + '/public';\n    if (fileLoader.fileExists(directory)) {\n        app.use(connect.static(directory, configuration.publicStaticOptions));\n    }\n}",
    "receiverBase": "appDirs",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (req, res, next) {\n    req.body = {};\n    if (req.method == 'GET' || req.method == 'HEAD')\n        return next();\n    return jsonParser(req, res, next);\n}",
    "receiverBase": "app",
    "receiverCallee": "use"
  },
  {
    "callback": "function (dir) {\n    var filename = dir + '/config/routes.js';\n    if (!fileLoader.fileExists(filename))\n        return;\n    try {\n        router.init(app, require(filename)(app));\n    } catch (e) {\n        console.error('Error initializing routes', e.stack);\n        throw e;\n    }\n}",
    "receiverBase": "appDirs",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (dir) {\n    var d = dir + '/' + type;\n    if (!fsutils.isDirectory(d))\n        return;\n    fs.readdirSync(d).forEach(function (file) {\n        if (fsutils.isDirectory(d + '/' + file))\n            return;\n        if (file.charAt(0) == '.')\n            return;\n        if (file.substr(file.length - 3) === '.js')\n            file = file.substr(0, file.length - 3);\n        fileLoader.loadFile(type, file, dir);\n    });\n}",
    "receiverBase": "appDirs",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (file) {\n    if (fsutils.isDirectory(d + '/' + file))\n        return;\n    if (file.charAt(0) == '.')\n        return;\n    if (file.substr(file.length - 3) === '.js')\n        file = file.substr(0, file.length - 3);\n    fileLoader.loadFile(type, file, dir);\n}",
    "receiverBase": "readdirSync",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    return previous.advice(this, arguments);\n}",
    "receiverBase": "",
    "receiverCallee": "advice"
  },
  {
    "callback": "function (res) {\n    assert.deepEqual(res, [\n        1,\n        1,\n        1,\n        5,\n        [\n            { a: 1 },\n            { a: 2 },\n            { a: 3 },\n            { a: 4 },\n            { a: 5 }\n        ],\n        1\n    ]);\n    done();\n}",
    "receiverBase": "",
    "receiverCallee": "alasql"
  },
  {
    "callback": "function (auth) {\n    auth.hookEvents();\n}",
    "receiverBase": "module",
    "receiverCallee": "run"
  },
  {
    "callback": "function (array) {\n    return Array.isArray(array) ? fulfilled.apply(null, array) : fulfilled(array);\n}",
    "receiverBase": "promise",
    "receiverCallee": "then"
  },
  {
    "callback": "function () {\n    fn.apply(null, argsCall);\n}",
    "receiverBase": "authUtils",
    "receiverCallee": "safeApply"
  },
  {
    "callback": "function (anEvent) {\n    config['add' + authUtilsProvider.capitalize(anEvent) + 'Handler'] = function (handler) {\n        config.on(anEvent, handler);\n    };\n}",
    "receiverBase": "angular",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (handler) {\n    $injector.invoke(handler, auth, locals);\n}",
    "receiverBase": "angular",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (err, ssoData) {\n    if (ssoData.sso) {\n        auth.signin({\n            popup: false,\n            connection: ssoData.lastUsedConnection.name\n        }, null, null, 'Auth0');\n    }\n}",
    "receiverBase": "authUtils",
    "receiverCallee": "applied"
  },
  {
    "callback": "function () {\n    forbidden();\n}",
    "receiverBase": "$rootScope",
    "receiverCallee": "$on"
  },
  {
    "callback": "function (e, nextRoute) {\n    if (!config.initialized) {\n        return;\n    }\n    if (nextRoute.$$route && nextRoute.$$route.requiresLogin) {\n        if (!auth.isAuthenticated && !auth.refreshTokenPromise) {\n            $location.path(config.loginUrl);\n        }\n    }\n}",
    "receiverBase": "$rootScope",
    "receiverCallee": "$on"
  },
  {
    "callback": "function (e, to) {\n    if (!config.initialized) {\n        return;\n    }\n    if (to.data && to.data.requiresLogin) {\n        if (!auth.isAuthenticated && !auth.refreshTokenPromise) {\n            e.preventDefault();\n            $injector.get('$state').go(config.loginState);\n        }\n    }\n}",
    "receiverBase": "$rootScope",
    "receiverCallee": "$on"
  },
  {
    "callback": "function (delegationResult) {\n    return delegationResult.id_token;\n}",
    "receiverBase": "refreshTokenAsync",
    "receiverCallee": "then"
  },
  {
    "callback": "function () {\n    auth.refreshTokenPromise = null;\n}",
    "receiverBase": "",
    "receiverCallee": "then"
  },
  {
    "callback": "function (delegationResult) {\n    return delegationResult.id_token;\n}",
    "receiverBase": "renewIdTokenAsync",
    "receiverCallee": "then"
  },
  {
    "callback": "function (profile) {\n    if (successCallback) {\n        successCallback(profile, idToken, accessToken, state, refreshToken);\n    }\n}",
    "receiverBase": "onSigninOk",
    "receiverCallee": "then"
  },
  {
    "callback": "function (profile) {\n    if (successCallback) {\n        successCallback(profile, idToken, accessToken, state, refreshToken);\n    }\n}",
    "receiverBase": "onSigninOk",
    "receiverCallee": "then"
  },
  {
    "callback": "function (profile) {\n    auth.profile = profile;\n    return profile;\n}",
    "receiverBase": "profilePromise",
    "receiverCallee": "then"
  },
  {
    "callback": "function (err, mailboxes) {\n    test.ifError(err);\n    test.equal(mailboxes.length, 3);\n    test.equal(mailboxes[0].path, 'INBOX');\n    test.equal(mailboxes[1].path, 'TRASH');\n    test.equal(mailboxes[2].name, 'SENT');\n    test.done();\n}",
    "receiverBase": "client",
    "receiverCallee": "listMailboxes"
  },
  {
    "callback": "function (err, mailbox) {\n    test.ifError(err);\n    test.equal(Object.keys(mailbox).length, 4);\n    test.equal(mailbox.type, 'Sent');\n    test.equal(mailbox.delimiter, '/');\n    test.done();\n}",
    "receiverBase": "client",
    "receiverCallee": "getMailbox"
  },
  {
    "callback": "function (err, mailbox) {\n    test.ifError(err);\n    test.equal(mailbox.count, 9);\n    test.equal(mailbox.UIDValidity, '1');\n    test.equal(mailbox.UIDNext, '10');\n    test.done();\n}",
    "receiverBase": "client",
    "receiverCallee": "openMailbox"
  },
  {
    "callback": "function (err, mailbox) {\n    test.ok(err);\n    test.ok(!mailbox);\n    test.done();\n}",
    "receiverBase": "client",
    "receiverCallee": "openMailbox"
  },
  {
    "callback": "function (err, mailbox) {\n    test.ok(err);\n    test.ok(!mailbox);\n    test.done();\n}",
    "receiverBase": "client",
    "receiverCallee": "openMailbox"
  },
  {
    "callback": "function (err, messages) {\n    test.ifError(err);\n    test.equal(messages.length, 3);\n    for (var i = 0; i < messages.length; i++) {\n        test.equal(messages[i].UIDValidity, 1);\n        test.equal(messages[i].UID, i + 2);\n    }\n    test.equal(messages[2].from.address, 'sender@example.com');\n    test.done();\n}",
    "receiverBase": "client",
    "receiverCallee": "listMessagesByUID"
  },
  {
    "callback": "function (err, messages) {\n    test.ifError(err);\n    test.equal(messages.length, 9);\n    for (var i = 0; i < messages.length; i++) {\n        test.equal(messages[i].flags.length, i === 1 ? 1 : 0);\n    }\n    test.done();\n}",
    "receiverBase": "client",
    "receiverCallee": "listFlags"
  },
  {
    "callback": "function (err, message) {\n    test.ifError(err);\n    test.equal(Object.keys(message).length, 12);\n    test.equal(message.title, 'hello 4');\n    test.ok(message.references);\n    test.equal(message.from.address, 'sender@example.com');\n    test.equal(message.to[0].name, 'Receiver name');\n    test.done();\n}",
    "receiverBase": "client",
    "receiverCallee": "fetchData"
  },
  {
    "callback": "function (chunk) {\n    chunks.push(chunk);\n    chunklength += chunk.length;\n}",
    "receiverBase": "messageStream",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    test.equal(Buffer.concat(chunks, chunklength).toString(), 'Subject: hello 1\\r\\n\\r\\nWorld 1!');\n    test.done();\n}",
    "receiverBase": "messageStream",
    "receiverCallee": "on"
  },
  {
    "callback": "function (err, message) {\n    test.ifError(err);\n    test.equal(message.from.name, '');\n    test.done();\n}",
    "receiverBase": "client",
    "receiverCallee": "fetchData"
  },
  {
    "callback": "function () {\n}",
    "receiverBase": "messageStream",
    "receiverCallee": "on"
  },
  {
    "callback": "function (err, messages) {\n    test.ifError(err);\n    test.equal(messages[0].UID, 2);\n    test.done();\n}",
    "receiverBase": "client",
    "receiverCallee": "listMessagesByUID"
  },
  {
    "callback": "function (err, flags) {\n    test.ifError(err);\n    test.equal(flags.length, 1);\n    test.equal(flags[0], '\\\\Seen');\n    test.done();\n}",
    "receiverBase": "client",
    "receiverCallee": "fetchFlags"
  },
  {
    "callback": "function (err, flags) {\n    test.ifError(err);\n    test.equal(flags.length, 2);\n    test.equal(flags[0], '\\\\Seen');\n    test.equal(flags[1], 'Test');\n    test.done();\n}",
    "receiverBase": "client",
    "receiverCallee": "addFlags"
  },
  {
    "callback": "function (err, flags) {\n    test.ifError(err);\n    test.equal(flags.length, 0);\n    test.done();\n}",
    "receiverBase": "client",
    "receiverCallee": "removeFlags"
  },
  {
    "callback": "function (err, mailbox) {\n    test.equal(mailbox.count, 10);\n    test.done();\n}",
    "receiverBase": "client",
    "receiverCallee": "openMailbox"
  },
  {
    "callback": "function (err, mailbox) {\n    test.ifError(err);\n    test.equal(mailbox.count, 1);\n    test.equal(mailbox.UIDNext, 2);\n    test.done();\n}",
    "receiverBase": "client",
    "receiverCallee": "openMailbox"
  },
  {
    "callback": "function (err, mailbox) {\n    test.ifError(err);\n    test.equal(mailbox.count, 8);\n    test.done();\n}",
    "receiverBase": "client",
    "receiverCallee": "openMailbox"
  },
  {
    "callback": "function (message) {\n    test.ok(message);\n    test.done();\n}",
    "receiverBase": "client",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n}",
    "receiverBase": "client",
    "receiverCallee": "storeMessage"
  },
  {
    "callback": "function (err, mailbox) {\n    test.ifError(err);\n    test.equal(mailbox.path, 'NEW-MAILBOX');\n    test.equal(mailbox.type, 'Normal');\n    test.equal(mailbox.delimiter, '/');\n    self.client.openMailbox('NEW-MAILBOX', function (err, mailbox) {\n        test.ifError(err);\n        test.equal(mailbox.count, 0);\n        test.equal(mailbox.UIDValidity, '1');\n        test.equal(mailbox.UIDNext, '1');\n        test.done();\n    });\n}",
    "receiverBase": "client",
    "receiverCallee": "createMailbox"
  },
  {
    "callback": "function (err, mailbox) {\n    test.ifError(err);\n    test.equal(mailbox.count, 0);\n    test.equal(mailbox.UIDValidity, '1');\n    test.equal(mailbox.UIDNext, '1');\n    test.done();\n}",
    "receiverBase": "client",
    "receiverCallee": "openMailbox"
  },
  {
    "callback": "function (err, mailbox) {\n    self.client.deleteMailbox('NEW-MAILBOX', function (err, status) {\n        test.ifError(err);\n        test.equal(status, 'OK');\n        self.client.openMailbox('NEW-MAILBOX', function (err, mailbox) {\n            test.ok(err);\n            test.ok(!mailbox);\n            test.done();\n        });\n    });\n}",
    "receiverBase": "client",
    "receiverCallee": "createMailbox"
  },
  {
    "callback": "function (err, status) {\n    test.ifError(err);\n    test.equal(status, 'OK');\n    self.client.openMailbox('NEW-MAILBOX', function (err, mailbox) {\n        test.ok(err);\n        test.ok(!mailbox);\n        test.done();\n    });\n}",
    "receiverBase": "client",
    "receiverCallee": "deleteMailbox"
  },
  {
    "callback": "function (err, mailbox) {\n    test.ok(err);\n    test.ok(!mailbox);\n    test.done();\n}",
    "receiverBase": "client",
    "receiverCallee": "openMailbox"
  },
  {
    "callback": "function (err, mailboxes) {\n    test.ifError(err);\n    test.equal(mailboxes.length, 3);\n    test.equal(mailboxes[0].path, 'INBOX');\n    test.equal(mailboxes[1].path, 'TRASH');\n    test.equal(mailboxes[2].name, 'SENT');\n    test.done();\n}",
    "receiverBase": "client",
    "receiverCallee": "listMailboxes"
  },
  {
    "callback": "function (c) {\n    return c.schema.indexOf(catalog) >= 0;\n}",
    "receiverBase": "_",
    "receiverCallee": "find"
  },
  {
    "callback": "function (d) {\n    return d.name == dimension;\n}",
    "receiverBase": "_",
    "receiverCallee": "find"
  },
  {
    "callback": "function (hier) {\n    return hier.name == hierarchyName;\n}",
    "receiverBase": "_",
    "receiverCallee": "find"
  },
  {
    "callback": "function (level) {\n    return level.name == levelName;\n}",
    "receiverBase": "_",
    "receiverCallee": "find"
  },
  {
    "callback": "function (json) {\n    var members = json.members;\n    wd.debug('Got results for paginatedLevelMembers: ' + _(members).pluck('name').join(', '));\n    if (callback) {\n        callback(json);\n    }\n}",
    "receiverBase": "myself",
    "receiverCallee": "callOlapUtils"
  }
]