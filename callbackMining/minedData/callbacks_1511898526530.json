[
  {
    "callback": "function (x) {\n    return x * OIMO.INV_SCALE;\n}",
    "receiverBase": "p",
    "receiverCallee": "map"
  },
  {
    "callback": "function (x) {\n    return x * OIMO.INV_SCALE;\n}",
    "receiverBase": "s",
    "receiverCallee": "map"
  },
  {
    "callback": "function (x) {\n    return x * OIMO.TO_RAD;\n}",
    "receiverBase": "rot",
    "receiverCallee": "map"
  },
  {
    "callback": "function (x) {\n    return x * OIMO.INV_SCALE;\n}",
    "receiverBase": "massPos",
    "receiverCallee": "map"
  },
  {
    "callback": "function (x) {\n    return x * OIMO.TO_RAD;\n}",
    "receiverBase": "massRot",
    "receiverCallee": "map"
  },
  {
    "callback": "function (x) {\n    return x * OIMO.INV_SCALE;\n}",
    "receiverBase": "pos1",
    "receiverCallee": "map"
  },
  {
    "callback": "function (x) {\n    return x * OIMO.INV_SCALE;\n}",
    "receiverBase": "pos2",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    var q = new OIMO.Quat();\n    return function (newOrder) {\n        q.setFromEuler(this);\n        this.setFromQuaternion(q, newOrder);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (event) {\n    event.preventDefault();\n    $('html,body').animate({ scrollTop: 0 }, 500);\n}",
    "receiverBase": "$",
    "receiverCallee": "click"
  },
  {
    "callback": "function () {\n    setTimeout(function () {\n        if ($(window).scrollTop() < 20) {\n            window.scrollTo(0, 1);\n        }\n    }, 0);\n}",
    "receiverBase": "$",
    "receiverCallee": "load"
  },
  {
    "callback": "function () {\n    if ($(window).scrollTop() < 20) {\n        window.scrollTo(0, 1);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    var ft = new FastClick(document.body);\n}",
    "receiverBase": "window",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function () {\n    var input = $(this);\n    if (input.val() == input.attr('placeholder')) {\n        input.val('');\n        input.removeClass('placeholder');\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "focus"
  },
  {
    "callback": "function () {\n    var input = $(this);\n    if (input.val() == '' || input.val() == input.attr('placeholder')) {\n        input.addClass('placeholder');\n        input.val(input.attr('placeholder'));\n    }\n}",
    "receiverBase": "focus",
    "receiverCallee": "blur"
  },
  {
    "callback": "function () {\n    $(this).find('[placeholder]').each(function () {\n        var input = $(this);\n        if (input.val() == input.attr('placeholder')) {\n            input.val('');\n        }\n    });\n}",
    "receiverBase": "parents",
    "receiverCallee": "submit"
  },
  {
    "callback": "function () {\n    var input = $(this);\n    if (input.val() == input.attr('placeholder')) {\n        input.val('');\n    }\n}",
    "receiverBase": "find",
    "receiverCallee": "each"
  },
  {
    "callback": "function (e) {\n    e.preventDefault();\n    var sForm = $('.header-search-form');\n    sForm.submit();\n}",
    "receiverBase": "$",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    justifiedMenu($('nav#menu'));\n}",
    "receiverBase": "$",
    "receiverCallee": "resize"
  },
  {
    "callback": "function (e) {\n    e.preventDefault();\n    if ($('.form-contact-us').valid()) {\n        $('.form-contact-us').submit();\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    $(this).parent().remove();\n}",
    "receiverBase": "$",
    "receiverCallee": "on"
  },
  {
    "callback": "function (e) {\n    e.preventDefault();\n    var sForm = $('.header-search-form');\n    var sInput = $('.header-search-form .search');\n    sForm.toggleClass('active');\n    if (sForm.hasClass('active')) {\n        sInput.focus();\n        if ($('.toggleBtn.menu').hasClass('active')) {\n            $('.toggleBtn.menu').removeClass('active');\n            $('#menu').removeClass('active');\n        }\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "on"
  },
  {
    "callback": "function (e) {\n    e.preventDefault();\n    $menulink.toggleClass('active');\n    $menu.toggleClass('active');\n    if ($('.header-search-form').hasClass('active')) {\n        $('.header-search-form').removeClass('active');\n    }\n}",
    "receiverBase": "$menulink",
    "receiverCallee": "on"
  },
  {
    "callback": "function (e) {\n    var $this = $(this);\n}",
    "receiverBase": "$menuTrigger",
    "receiverCallee": "on"
  },
  {
    "callback": "function (i) {\n    totalWidth += $(this).outerWidth(true);\n}",
    "receiverBase": "navChildrens",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i) {\n    width = roundedExpand + $(this).outerWidth(true);\n    if (i === numOfNavChildrens - 1) {\n        width += remainder;\n    }\n    $(this).css({ width: width + 'px' });\n}",
    "receiverBase": "navAnchors",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    $('.footerlinks ul').hide();\n    $(this).parent().siblings('ul').show();\n    return false;\n}",
    "receiverBase": "$",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    var listContent = $(this).html();\n    if (listContent.search('span') < 0) {\n        $(this).html('<span>' + listContent + '</span>');\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var iColumnHeight = $(this).height();\n    if (iColumnHeight > iMaxHeight)\n        iMaxHeight = iColumnHeight;\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    $(this).height('auto');\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function ($scope, $route, $routeParams, $location) {\n    $scope.$route = $route;\n    $scope.$location = $location;\n    $scope.$routeParams = $routeParams;\n}",
    "receiverBase": "module",
    "receiverCallee": "controller"
  },
  {
    "callback": "function ($scope, $routeParams) {\n    $scope.name = 'BookController';\n    $scope.params = $routeParams;\n}",
    "receiverBase": "controller",
    "receiverCallee": "controller"
  },
  {
    "callback": "function ($scope, $routeParams) {\n    $scope.name = 'ChapterController';\n    $scope.params = $routeParams;\n}",
    "receiverBase": "controller",
    "receiverCallee": "controller"
  },
  {
    "callback": "function (v) {\n    v.deleteObjectStore('TempBookList');\n    console.info('Object Store deleted');\n}",
    "receiverBase": "indexedDB",
    "receiverCallee": "then"
  },
  {
    "callback": "function (t) {\n    t.objectStore('BookList').add(data()).then(console.info, console.error);\n    t.objectStore('OldBookList').add(data(), new Date().getTime()).then(console.info, console.error);\n}",
    "receiverBase": "transaction",
    "receiverCallee": "progress"
  },
  {
    "callback": "function (val) {\n    book.id = val;\n    console.info(val);\n}",
    "receiverBase": "add",
    "receiverCallee": "then"
  },
  {
    "callback": "function (elem) {\n    if (elem.value && elem.value.price % 2) {\n        console.info('Deleting', elem.value);\n        elem['delete']();\n        return true;\n    }\n}",
    "receiverBase": "objectStore",
    "receiverCallee": "each"
  },
  {
    "callback": "function (elem) {\n    if (elem.value && elem.value.price % 2) {\n        console.info('Updating', elem.value);\n        elem.value['modifiedCursor-' + Math.random()] = true;\n        elem.update(elem.value);\n    }\n}",
    "receiverBase": "objectStore",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    return bower();\n}",
    "receiverBase": "gulp",
    "receiverCallee": "task"
  },
  {
    "callback": "function () {\n}",
    "receiverBase": "gulp",
    "receiverCallee": "task"
  },
  {
    "callback": "function (cb) {\n}",
    "receiverBase": "gulp",
    "receiverCallee": "task"
  },
  {
    "callback": "function () {\n    return gulp.src(['html/lib'], { read: false }).pipe(clean());\n}",
    "receiverBase": "gulp",
    "receiverCallee": "task"
  },
  {
    "callback": "function () {\n}",
    "receiverBase": "gulp",
    "receiverCallee": "task"
  },
  {
    "callback": "function () {\n    gulp.start('dependencies', 'styles', 'apps');\n}",
    "receiverBase": "gulp",
    "receiverCallee": "task"
  },
  {
    "callback": "function (listener) {\n    var callback = listener.callback;\n    var path = [\n            '_events',\n            listener.eventName,\n            listener.eventIndex,\n            'callback'\n        ].join('.');\n    data.push({\n        context: listener.context,\n        name: callback.key || callback.inspect,\n        path: path,\n        eventName: listener.eventName\n    });\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (response) {\n    var data = JSON.parse(response.data);\n    if (data.error) {\n        throw new bla.ApiError('GEOLOCATION_ERROR', data.error);\n    }\n    return data.position;\n}",
    "receiverBase": "asker",
    "receiverCallee": "then"
  },
  {
    "callback": "function (error) {\n    if (error.data && error.data.statusCode === 404) {\n        throw new bla.ApiError(bla.ApiError.NOT_FOUND, 'Cannot detect your location');\n    } else {\n        throw new bla.ApiError(bla.ApiError.INTERNAL_ERROR, error.message);\n    }\n}",
    "receiverBase": "then",
    "receiverCallee": "fail"
  },
  {
    "callback": "function () {\n    JSON.parse(undefined);\n}",
    "receiverBase": "process",
    "receiverCallee": "nextTick"
  },
  {
    "callback": "function () {\n    argParser = new ArgParser().addOption('s', 'strict', true, 'Throw error on invalid input.', false, trueFalse).addOption('n', 'name', true, 'The name of the project.', false);\n    ourOptions = argParser.parse([\n        '-s',\n        'true',\n        '-n',\n        'true'\n    ]);\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    expect(ArgParser).toBeDefined();\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(typeof ArgParser).toBe('function');\n    expect(new ArgParser() instanceof ArgParser).toBe(true);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(argParser.addIgnoredOption).toBeDefined();\n    expect(typeof argParser.addIgnoredOption).toBe('function');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(argParser.addOption).toBeDefined();\n    expect(typeof argParser.addOption).toBe('function');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(argParser.help).toBeDefined();\n    expect(typeof argParser.help).toBe('function');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(argParser.parse).toBeDefined();\n    expect(typeof argParser.parse).toBe('function');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    it('should be chainable', function () {\n        expect(argParser.addIgnoredOption({})).toBe(argParser);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "describe"
  },
  {
    "callback": "function () {\n    expect(argParser.addIgnoredOption({})).toBe(argParser);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    it('should be chainable', function () {\n        expect(argParser.addOption('a', null, false, 'Option')).toBe(argParser);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "describe"
  },
  {
    "callback": "function () {\n    expect(argParser.addOption('a', null, false, 'Option')).toBe(argParser);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    process.stdout.columns = 80;\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    process.stdout.columns = columns;\n}",
    "receiverBase": "",
    "receiverCallee": "afterEach"
  },
  {
    "callback": "function () {\n    expect(typeof ourOptions).toBe('object');\n    expect(ourOptions.strict).toBe(true);\n    expect(ourOptions.name).toBe('true');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var defaults = {\n            strict: false,\n            name: 'Hello world!'\n        };\n    ourOptions = argParser.parse([\n        '-s',\n        true\n    ], defaults);\n    expect(ourOptions.strict).toBe(true);\n    expect(ourOptions.name).toBe(defaults.name);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    argParser.addOption(null, 'multi', true, '', true);\n    ourOptions = argParser.parse([\n        '--multi',\n        'value1',\n        '--multi',\n        'value2',\n        '--multi',\n        'value3'\n    ]);\n    expect(Array.isArray(ourOptions.multi)).toBe(true);\n    expect(ourOptions.multi.length).toBe(3);\n    expect(ourOptions.multi[0]).toBe('value1');\n    expect(ourOptions.multi[1]).toBe('value2');\n    expect(ourOptions.multi[2]).toBe('value3');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    function badShortOption() {\n        argParser.parse(['-w']);\n    }\n    expect(badShortOption).toThrow();\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    function badLongOption() {\n        argParser.parse(['--whatever']);\n    }\n    expect(badLongOption).toThrow();\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    function missingValue() {\n        argParser.parse(['--requires-value']);\n    }\n    argParser.addOption(null, 'requires-value', true, '');\n    expect(missingValue).toThrow();\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(ourOptions.strict).toBeDefined();\n    expect(ourOptions.strict).toBe(true);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(ourOptions.name).toBeDefined();\n    expect(ourOptions.name).toBe('true');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    tmpdir = tmp.in(tmproot);\n    process.chdir(tmpdir);\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function (done) {\n    process.chdir(root);\n    remove(tmproot, done);\n}",
    "receiverBase": "",
    "receiverCallee": "afterEach"
  },
  {
    "callback": "function () {\n    return runCommand(ember, 'generate', 'blueprint', 'component', '--silent');\n}",
    "receiverBase": "runCommand",
    "receiverCallee": "then"
  },
  {
    "callback": "function () {\n    return runCommand(ember, 'help', 'generate', '--verbose', {\n        onOutput: function (string) {\n            output += string;\n        }\n    });\n}",
    "receiverBase": "then",
    "receiverCallee": "then"
  },
  {
    "callback": "function () {\n    return runCommand(ember, 'help', 'generate', 'model', {\n        onOutput: function (string) {\n            output += string;\n        }\n    });\n}",
    "receiverBase": "runCommand",
    "receiverCallee": "then"
  },
  {
    "callback": "function () {\n    return runCommand(ember, 'generate', 'model', '--help', {\n        onOutput: function (string) {\n            output += string;\n        }\n    });\n}",
    "receiverBase": "runCommand",
    "receiverCallee": "then"
  },
  {
    "callback": "function () {\n    return runCommand(ember, 'generate', 'model', '-h', {\n        onOutput: function (string) {\n            output += string;\n        }\n    });\n}",
    "receiverBase": "runCommand",
    "receiverCallee": "then"
  }
]