[
  {
    "callback": "function (Backbone) {\n    Backbone.history.start();\n}",
    "receiverBase": "",
    "receiverCallee": "require"
  },
  {
    "callback": "function (err, games) {\n    res.render('index', {\n        title: 'Twitch Express Games List',\n        games: games\n    });\n}",
    "receiverBase": "client",
    "receiverCallee": "games"
  },
  {
    "callback": "function () {\n    throw declarationError;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "it"
  },
  {
    "callback": "function (_super) {\n    __extends(Spec, _super);\n    function Spec(env, suite, description) {\n        this.exclusive_ = suite.exclusive_;\n        Spec.__super__.constructor.call(this, env, suite, description);\n    }\n    return Spec;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_super) {\n    __extends(Suite, _super);\n    function Suite(env, suite, specDefinitions, parentSuite) {\n        this.exclusive_ = parentSuite && parentSuite.exclusive_ || 0;\n        Suite.__super__.constructor.call(this, env, suite, specDefinitions, parentSuite);\n    }\n    return Suite;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    var i, j, t, table = [];\n    for (i = 0; i < 256; i++) {\n        t = i;\n        for (j = 0; j < 8; j++)\n            if (t & 1)\n                t = t >>> 1 ^ 3988292384;\n            else\n                t = t >>> 1;\n        table[i] = t;\n    }\n    return table;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    that.size = blobReader.size;\n    callback();\n}",
    "receiverBase": "blobReader",
    "receiverCallee": "init"
  },
  {
    "callback": "function () {\n    if (!that.size)\n        that.size = Number(request.getResponseHeader('Content-Length'));\n    that.data = new Uint8Array(request.response);\n    callback();\n}",
    "receiverBase": "request",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function () {\n    that.size = Number(request.getResponseHeader('Content-Length'));\n    callback();\n}",
    "receiverBase": "request",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function () {\n    callback(new Uint8Array(that.data.subarray(index, index + length)));\n}",
    "receiverBase": "",
    "receiverCallee": "getData"
  },
  {
    "callback": "function () {\n    that.size = Number(request.getResponseHeader('Content-Length'));\n    if (request.getResponseHeader('Accept-Ranges') == 'bytes')\n        callback();\n    else\n        onerror(ERR_HTTP_RANGE);\n}",
    "receiverBase": "request",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function () {\n    callback(request.response);\n}",
    "receiverBase": "request",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function (arraybuffer) {\n    callback(new Uint8Array(arraybuffer));\n}",
    "receiverBase": "",
    "receiverCallee": "readArrayBuffer"
  },
  {
    "callback": "function (fileWriter) {\n    writer = fileWriter;\n    callback();\n}",
    "receiverBase": "fileEntry",
    "receiverCallee": "createWriter"
  },
  {
    "callback": "function () {\n    onappend(false, data);\n    step();\n}",
    "receiverBase": "writer",
    "receiverCallee": "writeUint8Array"
  },
  {
    "callback": "function () {\n    onappend(false, data);\n    onflush();\n}",
    "receiverBase": "writer",
    "receiverCallee": "writeUint8Array"
  },
  {
    "callback": "function (array) {\n    worker.postMessage({\n        append: true,\n        data: array\n    });\n    chunkIndex++;\n    if (onprogress)\n        onprogress(index, size);\n    onappend(true, array);\n}",
    "receiverBase": "reader",
    "receiverCallee": "readUint8Array"
  },
  {
    "callback": "function (inputData) {\n    var outputData = process.append(inputData, function () {\n            if (onprogress)\n                onprogress(offset + index, size);\n        });\n    outputSize += outputData.length;\n    onappend(true, inputData);\n    writer.writeUint8Array(outputData, function () {\n        onappend(false, outputData);\n        chunkIndex++;\n        setTimeout(step, 1);\n    }, onwriteerror);\n    if (onprogress)\n        onprogress(index, size);\n}",
    "receiverBase": "reader",
    "receiverCallee": "readUint8Array"
  },
  {
    "callback": "function () {\n    if (onprogress)\n        onprogress(offset + index, size);\n}",
    "receiverBase": "process",
    "receiverCallee": "append"
  },
  {
    "callback": "function () {\n    onappend(false, outputData);\n    chunkIndex++;\n    setTimeout(step, 1);\n}",
    "receiverBase": "writer",
    "receiverCallee": "writeUint8Array"
  },
  {
    "callback": "function () {\n    onappend(false, outputData);\n    onend(outputSize);\n}",
    "receiverBase": "writer",
    "receiverCallee": "writeUint8Array"
  },
  {
    "callback": "function (array) {\n    if (computeCrc32)\n        crc32.append(array);\n    if (onprogress)\n        onprogress(index, size, array);\n    writer.writeUint8Array(array, function () {\n        chunkIndex++;\n        step();\n    }, onwriteerror);\n}",
    "receiverBase": "reader",
    "receiverCallee": "readUint8Array"
  },
  {
    "callback": "function () {\n    chunkIndex++;\n    step();\n}",
    "receiverBase": "writer",
    "receiverCallee": "writeUint8Array"
  },
  {
    "callback": "function (data) {\n    terminate(onend, data);\n}",
    "receiverBase": "writer",
    "receiverCallee": "getData"
  },
  {
    "callback": "function (error) {\n    onerror(error);\n    return;\n}",
    "receiverBase": "",
    "receiverCallee": "readCommonHeader"
  },
  {
    "callback": "function () {\n    if (that.compressionMethod === 0)\n        copy(reader, writer, dataOffset, that.compressedSize, checkCrc32, getWriterData, onprogress, onreaderror, onwriteerror);\n    else\n        worker = inflate(reader, writer, dataOffset, that.compressedSize, checkCrc32, getWriterData, onprogress, onreaderror, onwriteerror);\n}",
    "receiverBase": "writer",
    "receiverCallee": "init"
  },
  {
    "callback": "function (bytes) {\n    var dataView = getDataHelper(bytes.length, bytes).view;\n    if (dataView.getUint32(0) != 1347093766) {\n        seekEOCDR(offset + 1, entriesCallback);\n    } else {\n        entriesCallback(dataView);\n    }\n}",
    "receiverBase": "reader",
    "receiverCallee": "readUint8Array"
  },
  {
    "callback": "function () {\n    onerror(ERR_READ);\n}",
    "receiverBase": "reader",
    "receiverCallee": "readUint8Array"
  },
  {
    "callback": "function (error) {\n    onerror(error);\n    return;\n}",
    "receiverBase": "",
    "receiverCallee": "readCommonHeader"
  },
  {
    "callback": "function () {\n    onerror(ERR_READ);\n}",
    "receiverBase": "reader",
    "receiverCallee": "readUint8Array"
  },
  {
    "callback": "function () {\n    datalength += 16;\n    terminate(onend);\n}",
    "receiverBase": "writer",
    "receiverCallee": "writeUint8Array"
  },
  {
    "callback": "function () {\n    if (reader)\n        if (dontDeflate || options.level == 0)\n            copy(reader, writer, 0, reader.size, true, writeFooter, onprogress, onreaderror, onwriteerror);\n        else\n            worker = deflate(reader, writer, options.level, writeFooter, onprogress, onreaderror, onwriteerror);\n    else\n        writeFooter();\n}",
    "receiverBase": "",
    "receiverCallee": "writeHeader"
  },
  {
    "callback": "function (name) {\n    var file = files[name];\n    length += 46 + file.filename.length + file.comment.length;\n}",
    "receiverBase": "filenames",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    terminate(function () {\n        writer.getData(callback);\n    });\n}",
    "receiverBase": "writer",
    "receiverCallee": "writeUint8Array"
  },
  {
    "callback": "function () {\n    writer.getData(callback);\n}",
    "receiverBase": "",
    "receiverCallee": "terminate"
  },
  {
    "callback": "function () {\n    callback(createZipReader(reader, onerror));\n}",
    "receiverBase": "reader",
    "receiverCallee": "init"
  },
  {
    "callback": "function () {\n    callback(createZipWriter(writer, onerror, dontDeflate));\n}",
    "receiverBase": "writer",
    "receiverCallee": "init"
  },
  {
    "callback": "function () {\n    var obj = { counter: 0 };\n    _.extend(obj, Backbone.Events);\n    obj.on('event', function () {\n        obj.counter += 1;\n    });\n    obj.trigger('event');\n    equal(obj.counter, 1, 'counter should be incremented.');\n    obj.trigger('event');\n    obj.trigger('event');\n    obj.trigger('event');\n    obj.trigger('event');\n    equal(obj.counter, 5, 'counter should be incremented five times.');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    obj.counter += 1;\n}",
    "receiverBase": "obj",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    var obj = { counter: 0 };\n    _.extend(obj, Backbone.Events);\n    obj.on('a b c', function () {\n        obj.counter += 1;\n    });\n    obj.trigger('a');\n    equal(obj.counter, 1);\n    obj.trigger('a b');\n    equal(obj.counter, 3);\n    obj.trigger('c');\n    equal(obj.counter, 4);\n    obj.off('a c');\n    obj.trigger('a b c');\n    equal(obj.counter, 5);\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    obj.counter += 1;\n}",
    "receiverBase": "obj",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    var a = _.extend({}, Backbone.Events);\n    var b = _.extend({}, Backbone.Events);\n    a.listenTo(b, 'all', function () {\n        ok(true);\n    });\n    b.trigger('anything');\n    a.listenTo(b, 'all', function () {\n        ok(false);\n    });\n    a.stopListening();\n    b.trigger('anything');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    ok(true);\n}",
    "receiverBase": "a",
    "receiverCallee": "listenTo"
  },
  {
    "callback": "function () {\n    ok(false);\n}",
    "receiverBase": "a",
    "receiverCallee": "listenTo"
  },
  {
    "callback": "function () {\n    var a = _.extend({}, Backbone.Events);\n    var b = _.extend({}, Backbone.Events);\n    var cb = function () {\n        ok(true);\n    };\n    a.listenTo(b, { event: cb });\n    b.trigger('event');\n    a.listenTo(b, { event2: cb });\n    b.on('event2', cb);\n    a.stopListening(b, { event2: cb });\n    b.trigger('event event2');\n    a.stopListening();\n    b.trigger('event event2');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var a = _.extend({}, Backbone.Events);\n    var b = _.extend({}, Backbone.Events);\n    var cb = function () {\n        ok(true);\n    };\n    a.listenTo(b, 'event', cb);\n    b.on('event', cb);\n    a.listenTo(b, 'event2', cb);\n    a.stopListening(null, { event: cb });\n    b.trigger('event event2');\n    b.off();\n    a.listenTo(b, 'event event2', cb);\n    a.stopListening(null, 'event');\n    a.stopListening();\n    b.trigger('event2');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var a = _.extend({}, Backbone.Events);\n    var b = _.extend({}, Backbone.Events);\n    a.listenToOnce(b, 'all', function () {\n        ok(true);\n    });\n    b.trigger('anything');\n    b.trigger('anything');\n    a.listenToOnce(b, 'all', function () {\n        ok(false);\n    });\n    a.stopListening();\n    b.trigger('anything');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    ok(true);\n}",
    "receiverBase": "a",
    "receiverCallee": "listenToOnce"
  },
  {
    "callback": "function () {\n    ok(false);\n}",
    "receiverBase": "a",
    "receiverCallee": "listenToOnce"
  },
  {
    "callback": "function () {\n    var a = _.extend({}, Backbone.Events);\n    var b = _.extend({}, Backbone.Events);\n    a.listenToOnce(b, 'all', function () {\n        ok(true);\n    });\n    b.trigger('anything');\n    b.trigger('anything');\n    a.listenTo(b, 'all', function () {\n        ok(false);\n    });\n    a.stopListening();\n    b.trigger('anything');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    ok(true);\n}",
    "receiverBase": "a",
    "receiverCallee": "listenToOnce"
  },
  {
    "callback": "function () {\n    ok(false);\n}",
    "receiverBase": "a",
    "receiverCallee": "listenTo"
  },
  {
    "callback": "function () {\n    var a = _.extend({}, Backbone.Events);\n    var b = _.extend({}, Backbone.Events);\n    a.listenTo(b, {\n        change: function () {\n            ok(true);\n        }\n    });\n    b.trigger('change');\n    a.listenTo(b, {\n        change: function () {\n            ok(false);\n        }\n    });\n    a.stopListening();\n    b.trigger('change');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var e = _.extend({}, Backbone.Events);\n    e.listenTo(e, 'foo', function () {\n        ok(true);\n    });\n    e.trigger('foo');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    ok(true);\n}",
    "receiverBase": "e",
    "receiverCallee": "listenTo"
  },
  {
    "callback": "function () {\n    var e = _.extend({}, Backbone.Events);\n    e.listenTo(e, 'foo', function () {\n        ok(true);\n    });\n    e.trigger('foo');\n    e.stopListening();\n    e.trigger('foo');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    ok(true);\n}",
    "receiverBase": "e",
    "receiverCallee": "listenTo"
  },
  {
    "callback": "function () {\n    var a = _.extend({}, Backbone.Events);\n    var b = _.extend({}, Backbone.Events);\n    a.listenTo(b, 'all', function () {\n        ok(true);\n    });\n    b.trigger('anything');\n    a.listenTo(b, 'other', function () {\n        ok(false);\n    });\n    a.stopListening(b, 'other');\n    a.stopListening(b, 'all');\n    equal(_.keys(a._listeningTo).length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    ok(true);\n}",
    "receiverBase": "a",
    "receiverCallee": "listenTo"
  },
  {
    "callback": "function () {\n    ok(false);\n}",
    "receiverBase": "a",
    "receiverCallee": "listenTo"
  },
  {
    "callback": "function () {\n    var a = _.extend({}, Backbone.Events);\n    var b = _.extend({}, Backbone.Events);\n    a.listenToOnce(b, 'all', function () {\n        ok(true);\n    });\n    b.trigger('anything');\n    equal(_.keys(a._listeningTo).length, 0);\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    ok(true);\n}",
    "receiverBase": "a",
    "receiverCallee": "listenToOnce"
  },
  {
    "callback": "function () {\n    var a = _.extend({}, Backbone.Events);\n    var b = _.extend({}, Backbone.Events);\n    a.listenToOnce(b, {\n        one: function () {\n            ok(true);\n        },\n        two: function () {\n            ok(false);\n        }\n    });\n    b.trigger('one');\n    equal(_.keys(a._listeningTo).length, 1);\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var a = _.extend({}, Backbone.Events);\n    var b = _.extend({}, Backbone.Events);\n    a.listenToOnce(b, {\n        one: function () {\n            ok(this === a);\n        },\n        two: function () {\n            ok(false);\n        }\n    });\n    b.trigger('one');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var e = _.extend({}, Backbone.Events);\n    e.listenTo(e, 'foo', null);\n    e.trigger('foo');\n    ok(true);\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var a, b, obj = { counter: 0 };\n    _.extend(obj, Backbone.Events);\n    obj.on('all', function (event) {\n        obj.counter++;\n        if (event == 'a')\n            a = true;\n        if (event == 'b')\n            b = true;\n    }).trigger('a b');\n    ok(a);\n    ok(b);\n    equal(obj.counter, 2);\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function (event) {\n    obj.counter++;\n    if (event == 'a')\n        a = true;\n    if (event == 'b')\n        b = true;\n}",
    "receiverBase": "obj",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    var obj = { counter: 0 };\n    _.extend(obj, Backbone.Events);\n    var callback = function () {\n        obj.counter += 1;\n    };\n    obj.on('event', callback);\n    obj.trigger('event');\n    obj.off('event');\n    obj.trigger('event');\n    equal(obj.counter, 1, 'counter should have only been incremented once.');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    obj.counterB += 1;\n}",
    "receiverBase": "obj",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    var obj = { counter: 0 };\n    _.extend(obj, Backbone.Events);\n    var callback = function () {\n        obj.counter += 1;\n        obj.off('event', callback);\n    };\n    obj.on('event', callback);\n    obj.trigger('event');\n    obj.trigger('event');\n    obj.trigger('event');\n    equal(obj.counter, 1, 'the callback should have been unbound.');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var TestClass = function () {\n        return this;\n    };\n    TestClass.prototype.assertTrue = function () {\n        ok(true, '`this` was bound to the callback');\n    };\n    var obj = _.extend({}, Backbone.Events);\n    obj.on('event', function () {\n        this.assertTrue();\n    }, new TestClass());\n    obj.trigger('event');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    this.assertTrue();\n}",
    "receiverBase": "obj",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    var obj = { counter: 0 };\n    _.extend(obj, Backbone.Events);\n    var incr1 = function () {\n        obj.counter += 1;\n        obj.off('event', incr1);\n        obj.trigger('event');\n    };\n    var incr2 = function () {\n        obj.counter += 1;\n    };\n    obj.on('event', incr1);\n    obj.on('event', incr2);\n    obj.trigger('event');\n    equal(obj.counter, 3, 'counter should have been incremented three times');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    obj.on('event', incr).on('all', incr);\n}",
    "receiverBase": "obj",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    obj.off('event', incr).off('all', incr);\n}",
    "receiverBase": "off",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    var counter = 0;\n    var obj = _.extend({}, Backbone.Events);\n    var incr = function () {\n        counter++;\n    };\n    obj.on('x', function () {\n        obj.on('y', incr).on('all', incr);\n    }).trigger('x y');\n    strictEqual(counter, 2);\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    obj.on('y', incr).on('all', incr);\n}",
    "receiverBase": "obj",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    _.extend({}, Backbone.Events).on('test').trigger('test');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var view = _.extend({}, Backbone.Events).on('test', 'noop');\n    raises(function () {\n        view.trigger('test');\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    view.trigger('test');\n}",
    "receiverBase": "",
    "receiverCallee": "raises"
  },
  {
    "callback": "function () {\n    var obj = _.extend({}, Backbone.Events);\n    obj.on('x y all', function () {\n        ok(true);\n    });\n    obj.on('x y all', function () {\n        ok(false);\n    }, obj);\n    obj.off(null, null, obj);\n    obj.trigger('x y');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    ok(true);\n}",
    "receiverBase": "obj",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    ok(false);\n}",
    "receiverBase": "obj",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    var obj = _.extend({}, Backbone.Events);\n    var success = function () {\n        ok(true);\n    };\n    var fail = function () {\n        ok(false);\n    };\n    obj.on('x y all', success);\n    obj.on('x y all', fail);\n    obj.off(null, fail);\n    obj.trigger('x y');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var obj = _.extend({}, Backbone.Events);\n    obj.on('event', function () {\n        ok(false);\n    }, obj);\n    obj.on('event', function () {\n        ok(false);\n    }, obj);\n    obj.off(null, null, obj);\n    obj.trigger('event');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    ok(false);\n}",
    "receiverBase": "obj",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    ok(false);\n}",
    "receiverBase": "obj",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    var f = function () {\n        ok(true);\n    };\n    var a = _.extend({}, Backbone.Events).once('event', f);\n    var b = _.extend({}, Backbone.Events).on('event', f);\n    a.trigger('event');\n    b.trigger('event');\n    b.trigger('event');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var f = function () {\n        ok(true);\n    };\n    var obj = _.extend({}, Backbone.Events);\n    obj.once('event', f).on('event', f).trigger('event').trigger('event');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var f = function () {\n        ok(true);\n    };\n    var obj = _.extend({}, Backbone.Events);\n    obj.once('event', f);\n    obj.off('event', f);\n    obj.trigger('event');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var obj = { counter: 0 };\n    _.extend(obj, Backbone.Events);\n    var increment = function () {\n        this.counter += 1;\n    };\n    obj.once({\n        a: increment,\n        b: increment,\n        c: increment\n    }, obj);\n    obj.trigger('a');\n    equal(obj.counter, 1);\n    obj.trigger('a b');\n    equal(obj.counter, 2);\n    obj.trigger('c');\n    equal(obj.counter, 3);\n    obj.trigger('a b c');\n    equal(obj.counter, 3);\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var context = {};\n    var obj = _.extend({}, Backbone.Events);\n    obj.once('event', function () {\n        ok(false);\n    }, context);\n    obj.off(null, null, context);\n    obj.trigger('event');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    ok(false);\n}",
    "receiverBase": "obj",
    "receiverCallee": "once"
  },
  {
    "callback": "function () {\n    ok(Backbone.on === Backbone.Events.on);\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var func = _.debounce(function () {\n            ok(true);\n            start();\n        }, 50);\n    var obj = _.extend({}, Backbone.Events).once('async', func);\n    obj.trigger('async');\n    obj.trigger('async');\n}",
    "receiverBase": "",
    "receiverCallee": "asyncTest"
  },
  {
    "callback": "function () {\n    ok(true);\n    start();\n}",
    "receiverBase": "_",
    "receiverCallee": "debounce"
  },
  {
    "callback": "function () {\n    var obj = _.extend({}, Backbone.Events);\n    obj.once('x y', function () {\n        ok(true);\n    });\n    obj.trigger('x y');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    ok(true);\n}",
    "receiverBase": "obj",
    "receiverCallee": "once"
  },
  {
    "callback": "function () {\n    var obj = _.extend({}, Backbone.Events);\n    var f = function () {\n        this.off('event', f);\n    };\n    obj.on('event', f);\n    obj.once('event', function () {\n    });\n    obj.on('event', function () {\n        ok(true);\n    });\n    obj.trigger('event');\n    obj.trigger('event');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n}",
    "receiverBase": "obj",
    "receiverCallee": "once"
  },
  {
    "callback": "function () {\n    ok(true);\n}",
    "receiverBase": "obj",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    Backbone.once('all', function () {\n        ok(true);\n        Backbone.trigger('all');\n    });\n    Backbone.trigger('all');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    ok(true);\n    Backbone.trigger('all');\n}",
    "receiverBase": "Backbone",
    "receiverCallee": "once"
  },
  {
    "callback": "function () {\n    _.extend({}, Backbone.Events).once('event').trigger('event');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var obj = _.extend({}, Backbone.Events);\n    obj.listenToOnce(obj, 'event').trigger('event');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function ($http, API_BASE_URL) {\n    var service = {};\n    service.get = function (path) {\n        return $http.get(API_BASE_URL + path).then(function (response) {\n            return response.data;\n        });\n    };\n    service.post = function (path, data) {\n        return $http.post(API_BASE_URL + path, data);\n    };\n    service.put = function (path, id, data) {\n        return $http.put(API_BASE_URL + path + '/' + id, data);\n    };\n    return service;\n}",
    "receiverBase": "module",
    "receiverCallee": "factory"
  },
  {
    "callback": "function (response) {\n    return response.data;\n}",
    "receiverBase": "get",
    "receiverCallee": "then"
  },
  {
    "callback": "function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('JsonSchemaComponent', ['jquery'], factory);\n    } else {\n        window.JsonSchemaComponent = factory(jQuery);\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (property) {\n    form.find('#' + property + '-error').hide();\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function (_, input) {\n    var checked;\n    if (property_type === 'array') {\n        checked = value.indexOf(input.value) !== -1;\n    } else {\n        checked = value === true;\n    }\n    if (checked) {\n        $(input).attr('checked', 'checked');\n    } else {\n        $(input).removeAttr('checked');\n    }\n}",
    "receiverBase": "input",
    "receiverCallee": "each"
  },
  {
    "callback": "function (_, i) {\n    return i !== pos;\n}",
    "receiverBase": "$",
    "receiverCallee": "grep"
  },
  {
    "callback": "function (e) {\n    var tag_name = e.target.tagName.toLowerCase();\n    var target = $(e.target);\n    var input_type;\n    if (tag_name === 'select') {\n        input_type = 'select';\n    } else {\n        input_type = target.attr('type') || 'text';\n    }\n    var name = target.attr('name');\n    var value = target.val();\n    var selected = target.attr('checked') === 'checked';\n    form_in(input_type, name, value, selected);\n}",
    "receiverBase": "form",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    var xyz;\n}",
    "receiverBase": "LIT:/xyz/",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    if (this.spec)\n        return this.spec;\n    var spec = [\n            this.id ? 1 : 0,\n            this.classes.length + this.attrs.length + this.pseudo_classes.length,\n            (this.tag && this.tag != '*' ? 1 : 0) + this.pseudo_els.length\n        ];\n    $.each(this.nots, function (i, not) {\n        var ns = not.specifity();\n        spec[0] += ns[0];\n        spec[1] += ns[1];\n        spec[2] += ns[2];\n    });\n    return this.spec = spec;\n}",
    "receiverBase": "SimpleSelector",
    "receiverCallee": "addMethod"
  },
  {
    "callback": "function (i, not) {\n    var ns = not.specifity();\n    spec[0] += ns[0];\n    spec[1] += ns[1];\n    spec[2] += ns[2];\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    if (this.spec)\n        return this.spec;\n    var spec = [\n            0,\n            0,\n            0\n        ];\n    $.each(this.parts, function (i, part) {\n        if (i % 2)\n            return;\n        var ps = part.specifity();\n        spec[0] += ps[0];\n        spec[1] += ps[1];\n        spec[2] += ps[2];\n    });\n    return this.spec = spec;\n}",
    "receiverBase": "Selector",
    "receiverCallee": "addMethod"
  },
  {
    "callback": "function (i, part) {\n    if (i % 2)\n        return;\n    var ps = part.specifity();\n    spec[0] += ps[0];\n    spec[1] += ps[1];\n    spec[2] += ps[2];\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    if (this.spec)\n        return this.spec;\n    var spec = [\n            0,\n            0,\n            0\n        ];\n    $.each(this.parts, function (i, part) {\n        var ps = part.specifity();\n        spec[0] += ps[0];\n        spec[1] += ps[1];\n        spec[2] += ps[2];\n    });\n    return this.spec = spec;\n}",
    "receiverBase": "SelectorsGroup",
    "receiverCallee": "addMethod"
  },
  {
    "callback": "function (i, part) {\n    var ps = part.specifity();\n    spec[0] += ps[0];\n    spec[1] += ps[1];\n    spec[2] += ps[2];\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function (m) {\n    return '_0x' + m.charCodeAt(0).toString(16) + '_';\n}",
    "receiverBase": "attr",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (i, cls) {\n    js[js.length] = 'if (_WS__class.indexOf(\" ' + cls + ' \") == -1) BAD;';\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, attr) {\n    js[js.length] = attr[1] == '~=' ? el.uses_wsattr(attr[0]) : el.uses_attr(attr[0]);\n    var check = attrchecks[attr[1] || '-'];\n    check = check.replace(/K/g, varForAttr(attr[0])).replace(/V/g, attr[2] && attr[2].match(STARTS_WITH_QUOTES) ? attr[2].slice(1, -1) : attr[2]);\n    js[js.length] = 'if (' + check + ') BAD;';\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, not) {\n    var lbl = ++lbl_id;\n    var func = join([\n            'l' + lbl + ':{',\n            not.compile(el).replace(BAD, 'break l' + lbl).replace(GOOD, 'BAD'),\n            '}'\n        ]);\n    if (!(not instanceof $.selector.SimpleSelector))\n        func = join([\n            el.save(lbl),\n            func,\n            el.restore(lbl)\n        ]);\n    js[js.length] = func;\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, pscls) {\n    var check = pseudoclschecks[pscls[0]];\n    if (check) {\n        js[js.length] = typeof check == 'function' ? check.apply(this, pscls[1]) : check;\n    } else if (check = $.find.selectors.filters[pscls[0]]) {\n        js[js.length] = el.uses_jqueryFilters();\n        js[js.length] = 'if (!_$filters.' + pscls[0] + '(el)) BAD;';\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function (el) {\n    var l = this.parts.length;\n    var expr = this.parts[--l].compile(el);\n    while (l) {\n        var combinator = this.parts[--l];\n        expr = combines[combinator](el, this.parts[--l], as_subexpr(expr));\n    }\n    return expr;\n}",
    "receiverBase": "Selector",
    "receiverCallee": "addMethod"
  },
  {
    "callback": "function (el) {\n    var expr = [], lbl = ++lbl_id;\n    for (var i = 0; i < this.parts.length; i++) {\n        expr[expr.length] = join([\n            i == 0 ? el.save(lbl) : el.restore(lbl),\n            'l' + lbl + '_' + i + ':{',\n            this.parts[i].compile(el).replace(BAD, 'break l' + lbl + '_' + i),\n            '}'\n        ]);\n    }\n    expr[expr.length] = 'BAD;';\n    return join(expr);\n}",
    "receiverBase": "SelectorsGroup",
    "receiverCallee": "addMethod"
  },
  {
    "callback": "function (el) {\n    this.matches = new Function('el', join([\n        'if (!el) return false;',\n        this.compile(new State()).replace(BAD, 'return false').replace(GOOD, 'return true')\n    ]));\n    return this.matches(el);\n}",
    "receiverBase": "SelectorBase",
    "receiverCallee": "addMethod"
  },
  {
    "callback": "function (props) {\n    this.affectedBy = new Function('props', [\n        'var direct_classes, context_classes, direct_attrs, context_attrs, t;',\n        this.ABC_compile().replace(DIRECT, 'direct').replace(CONTEXT, 'context'),\n        'return {classes: {context: context_classes, direct: direct_classes}, attrs: {context: context_attrs, direct: direct_attrs}};'\n    ].join('\\n'));\n    return this.affectedBy(props);\n}",
    "receiverBase": "SelectorBase",
    "receiverCallee": "addMethod"
  },
  {
    "callback": "function () {\n    var parts = [];\n    $.each(this.classes, function (i, cls) {\n        parts[parts.length] = 'if (t = props.classes[\\'' + cls + '\\']) (DIRECT_classes || (DIRECT_classes = {}))[\\'' + cls + '\\'] = t;';\n    });\n    $.each(this.nots, function (i, not) {\n        parts[parts.length] = not.ABC_compile();\n    });\n    return parts.join('\\n');\n}",
    "receiverBase": "SimpleSelector",
    "receiverCallee": "addMethod"
  },
  {
    "callback": "function (i, cls) {\n    parts[parts.length] = 'if (t = props.classes[\\'' + cls + '\\']) (DIRECT_classes || (DIRECT_classes = {}))[\\'' + cls + '\\'] = t;';\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, not) {\n    parts[parts.length] = not.ABC_compile();\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function (arg) {\n    var parts = [];\n    var i = this.parts.length - 1;\n    parts[parts.length] = this.parts[i].ABC_compile();\n    while ((i = i - 2) >= 0)\n        parts[parts.length] = this.parts[i].ABC_compile().replace(EITHER, 'CONTEXT');\n    return parts.join('\\n');\n}",
    "receiverBase": "Selector",
    "receiverCallee": "addMethod"
  },
  {
    "callback": "function () {\n    var parts = [];\n    $.each(this.parts, function (i, part) {\n        parts[parts.length] = part.ABC_compile();\n    });\n    return parts.join('\\n');\n}",
    "receiverBase": "SelectorsGroup",
    "receiverCallee": "addMethod"
  },
  {
    "callback": "function (i, part) {\n    parts[parts.length] = part.ABC_compile();\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var activeFocus = null;\n    $(document).bind('focusin', function (e) {\n        var target = e.realTarget || e.target;\n        if (activeFocus && activeFocus !== target) {\n            e.type = 'focusout';\n            $(activeFocus).trigger(e);\n            e.type = 'focusin';\n            e.target = target;\n        }\n        activeFocus = target;\n    }).bind('focusout', function (e) {\n        activeFocus = null;\n    });\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (e) {\n    var target = e.realTarget || e.target;\n    if (activeFocus && activeFocus !== target) {\n        e.type = 'focusout';\n        $(activeFocus).trigger(e);\n        e.type = 'focusin';\n        e.target = target;\n    }\n    activeFocus = target;\n}",
    "receiverBase": "$",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (e) {\n    activeFocus = null;\n}",
    "receiverBase": "bind",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    var added = [];\n    getElements(added, document);\n    var event = $.Event('EntwineElementsAdded');\n    event.targets = added;\n    $(document).triggerHandler(event);\n}",
    "receiverBase": "",
    "receiverCallee": "$"
  },
  {
    "callback": "function (i, method) {\n    var old = $.fn[method];\n    $.fn[method] = function () {\n        var self = this, args = $.makeArray(arguments);\n        var rv = old.apply(self, args);\n        patch.apply(self, args);\n        return rv;\n    };\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    self.check_id = null;\n    self.triggerEvent();\n}",
    "receiverBase": "",
    "receiverCallee": "runSoon"
  },
  {
    "callback": "function (e) {\n    changes.addSubtree(e.targets);\n}",
    "receiverBase": "$",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (e) {\n    removed = e.targets;\n}",
    "receiverBase": "$",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    var subtree = removed;\n    removed = null;\n    if (subtree)\n        changes.addSubtree(subtree);\n}",
    "receiverBase": "",
    "receiverCallee": "monkey"
  },
  {
    "callback": "function (attr) {\n    changes.addAttr(attr, this);\n}",
    "receiverBase": "",
    "receiverCallee": "monkey"
  },
  {
    "callback": "function (klass) {\n    if (typeof klass == 'string')\n        changes.addClass(klass, this);\n}",
    "receiverBase": "",
    "receiverCallee": "monkey"
  },
  {
    "callback": "function (a, b) {\n    if (b !== undefined && typeof a == 'string')\n        changes.addAttr(a, this);\n    else if (typeof a != 'string') {\n        for (var k in a)\n            changes.addAttr(k, this);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "monkey"
  },
  {
    "callback": "function (elem) {\n    return elem.selected;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "map"
  },
  {
    "callback": "function (e) {\n    var forms = $(e.targets).filter('form');\n    if (!forms.length)\n        return;\n    forms.bind('submit.entwine_delegate_submit', delegate_submit);\n}",
    "receiverBase": "$",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (e) {\n    for (var k in $.entwine.namespaces) {\n        var namespace = $.entwine.namespaces[k];\n        if (namespace.injectee.onadd)\n            namespace.injectee.onadd.call(e.targets);\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (e) {\n    for (var k in $.entwine.namespaces) {\n        var namespace = $.entwine.namespaces[k];\n        if (namespace.injectee.onremove)\n            namespace.injectee.onremove.call(e.targets);\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    var r = this.entwineData(k);\n    return r === undefined ? v : r;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "bind_proxy"
  },
  {
    "callback": "function (v) {\n    return this.entwineData(k, v);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "bind_proxy"
  },
  {
    "callback": "function (v) {\n    return (arguments.length == 1 ? setter : getter).call(this, v);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "bind_proxy"
  },
  {
    "callback": "function () {\n    self.handler(self.queue);\n    self.queue = '';\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    var v1 = $('#testForm1').validate(), v2 = $('#testForm1').validate();\n    equal(v1, v2, 'Calling validate() multiple times must return the same validator instance');\n    equal(v1.elements().length, 3, 'validator elements');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    $('#doesntexist').validate();\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#userForm'), input = $('#username');\n    form.validate();\n    ok(!form.valid(), 'Form isn\\'t valid yet');\n    ok(!input.valid(), 'Input isn\\'t valid either');\n    input.val('Hello world');\n    ok(form.valid(), 'Form is now valid');\n    ok(input.valid(), 'Input is valid, too');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#testForm1'), validator = form.validate(), inputs = form.find('input');\n    ok(!inputs.valid(), 'all invalid');\n    inputs.not(':first').val('ok');\n    equal(validator.numberOfInvalids(), 2);\n    strictEqual(inputs.valid(), false, 'just one invalid');\n    inputs.val('ok');\n    strictEqual(inputs.valid(), true, 'all valid');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var checkable = $('#checkable2');\n    ok(!checkable.valid(), 'must be invalid, not checked yet');\n    checkable.attr('checked', true);\n    ok(checkable.valid(), 'valid, is now checked');\n    checkable.attr('checked', false);\n    ok(!checkable.valid(), 'invalid again');\n    $('#checkable3').attr('checked', true);\n    ok(checkable.valid(), 'valid, third box is checked');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    $('#testForm1clean').validate({\n        ignore: '#firstnamec',\n        rules: { firstnamec: 'required' }\n    });\n    ok($('#firstnamec').valid());\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    expect(3);\n    $.validator.addMethod('hi', function (value) {\n        return value === 'hi';\n    }, 'hi me too');\n    var method = $.validator.methods.hi, e = $('#text1')[0];\n    ok(!method(e.value, e), 'Invalid');\n    e.value = 'hi';\n    ok(method(e.value, e), 'Invalid');\n    ok(jQuery.validator.messages.hi === 'hi me too', 'Check custom message');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function (value) {\n    return value === 'hi';\n}",
    "receiverBase": "validator",
    "receiverCallee": "addMethod"
  },
  {
    "callback": "function (value, element) {\n    return this.optional(element) || /\\D/.test(value) && /\\d/.test(value);\n}",
    "receiverBase": "validator",
    "receiverCallee": "addMethod"
  },
  {
    "callback": "function () {\n    expect(2);\n    var form = $('#testForm1')[0], v = $(form).validate();\n    ok(!v.form(), 'Invalid form');\n    $('#firstname').val('hi');\n    $('#lastname').val('hi');\n    ok(v.form(), 'Valid form');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    expect(3);\n    var form = $('#testForm6')[0], v = $(form).validate();\n    ok(!v.form(), 'Invalid form');\n    $('#form6check1').attr('checked', true);\n    ok(!v.form(), 'Invalid form');\n    $('#form6check2').attr('checked', true);\n    ok(v.form(), 'Valid form');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    expect(6);\n    var form = $('#testForm10')[0], v = $(form).validate({ rules: { testForm10Radio: 'required' } });\n    ok(!v.form(), 'Invalid Form');\n    equal($('#testForm10Radio1').attr('class'), 'error');\n    equal($('#testForm10Radio2').attr('class'), 'error');\n    $('#testForm10Radio2').attr('checked', true);\n    ok(v.form(), 'Valid form');\n    equal($('#testForm10Radio1').attr('class'), 'valid');\n    equal($('#testForm10Radio2').attr('class'), 'valid');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    expect(3);\n    var form = $('#testForm7')[0], v = $(form).validate();\n    ok(!v.form(), 'Invalid form');\n    $('#optionxa').attr('selected', true);\n    ok(!v.form(), 'Invalid form');\n    $('#optionxb').attr('selected', true);\n    ok(v.form(), 'Valid form');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    expect(2);\n    var form = $('#testForm5')[0], v = $(form).validate();\n    ok(!v.form(), 'Invalid form');\n    $('#x1, #x2').val('hi');\n    ok(v.form(), 'Valid form');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    expect(4);\n    var form = $('#testForm5')[0], v = $(form).validate({\n            onfocusout: false,\n            showErrors: function () {\n                ok(true, 'showErrors should only be called twice');\n                this.defaultShowErrors();\n            }\n        });\n    $('#x1, #x2').val('hi');\n    ok(v.form(), 'Valid form');\n    $('#x2').val('not equal').blur();\n    ok(!v.form(), 'Invalid form');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    expect(3);\n    var element = $('#firstname')[0], v = $('#testForm1').validate();\n    ok(v.size() === 0, 'No errors yet');\n    v.check(element);\n    ok(v.size() === 1, 'error exists');\n    v.errorList = [];\n    $('#firstname').val('hi');\n    v.check(element);\n    ok(v.size() === 0, 'No more errors');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    expect(3);\n    var errorLabel = $('#errorFirstname'), element = $('#firstname')[0], v;\n    element.value = 'bla';\n    v = $('#testForm1').validate();\n    errorLabel.show();\n    ok(errorLabel.is(':visible'), 'Error label visible before validation');\n    ok(v.element(element));\n    ok(errorLabel.is(':hidden'), 'Error label not visible after validation');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    expect(2);\n    var errorLabel = $('#agreeLabel'), element = $('#agb')[0], v;\n    element.checked = true;\n    v = $('#testForm2').validate({ errorClass: 'xerror' });\n    errorLabel.show();\n    ok(errorLabel.is(':visible'), 'Error label visible after validation');\n    v.element(element);\n    ok(errorLabel.is(':hidden'), 'Error label not visible after hiding it');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    expect(2);\n    var errorLabel = $('#errorWrapper'), element = $('#meal')[0], v;\n    element.selectedIndex = 1;\n    errorLabel.show();\n    ok(errorLabel.is(':visible'), 'Error label visible after validation');\n    v = $('#testForm3').validate({\n        wrapper: 'li',\n        errorLabelContainer: $('#errorContainer')\n    });\n    v.element(element);\n    ok(errorLabel.is(':hidden'), 'Error label not visible after hiding it');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    equal(6, triggeredEvents);\n    start();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    equal(2, triggeredEvents);\n    start();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    expect(4);\n    var errorLabel = $('#errorFirstname').hide(), v = $('#testForm1').validate();\n    ok(errorLabel.is(':hidden'));\n    equal(0, $('#lastname').next('.error:not(input)').length);\n    v.showErrors({\n        'firstname': 'required',\n        'lastname': 'bla'\n    });\n    equal(true, errorLabel.is(':visible'));\n    equal(true, $('#lastname').next('.error:not(input)').is(':visible'));\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    return false;\n}",
    "receiverBase": "validator",
    "receiverCallee": "addMethod"
  },
  {
    "callback": "function () {\n    return false;\n}",
    "receiverBase": "validator",
    "receiverCallee": "addMethod"
  },
  {
    "callback": "function () {\n    expect(5);\n    var v = $('#testForm1').validate({\n            showErrors: function (errorMap, errorList) {\n                equal(v, this);\n                equal(v.errorList, errorList);\n                equal(v.errorMap, errorMap);\n                equal('buga', errorMap.firstname);\n                equal('buga', errorMap.lastname);\n            }\n        });\n    v.form();\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    $('#testForm1').validate();\n    var e = $('#firstname');\n    ok(!e.hasClass('error'));\n    ok(!e.hasClass('valid'));\n    e.valid();\n    ok(e.hasClass('error'));\n    ok(!e.hasClass('valid'));\n    e.val('hithere').valid();\n    ok(!e.hasClass('error'));\n    ok(e.hasClass('valid'));\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    expect(3);\n    $('#testForm1').validate({\n        highlight: false,\n        unhighlight: false\n    });\n    var e = $('#firstname');\n    ok(!e.hasClass('error'));\n    e.valid();\n    ok(!e.hasClass('error'));\n    e.valid();\n    ok(!e.hasClass('error'));\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#userForm');\n    form.validate();\n    form.valid();\n    ok(form.find('#username').next('.error:not(input)').is(':visible'));\n    $('#username').focus();\n    ok(form.find('#username').next('.error:not(input)').is(':visible'));\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#userForm');\n    form.validate({ focusCleanup: true });\n    form.valid();\n    ok(form.find('#username').next('.error:not(input)').is(':visible'));\n    $('#username').focus().trigger('focusin');\n    ok(!form.find('#username').next('.error:not(input)').is(':visible'));\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#userForm');\n    form.validate({\n        focusCleanup: true,\n        wrapper: 'span'\n    });\n    form.valid();\n    ok(form.is(':has(span:visible:has(.error#username-error))'));\n    $('#username').focus().trigger('focusin');\n    ok(!form.is(':has(span:visible:has(.error#username-error))'));\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var v = $('#userForm').validate();\n    equal('This field is required.', v.defaultMessage($('#username')[0], 'required'));\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    expect(3);\n    var v = $('#form').validate(), fakeElement = {\n            form: $('#form')[0],\n            name: 'bar'\n        };\n    jQuery.validator.messages.test1 = function (param, element) {\n        equal(v, this);\n        equal(0, param);\n        return 'element ' + element.name + ' is not valid';\n    };\n    v.formatAndAdd(fakeElement, {\n        method: 'test1',\n        parameters: 0\n    });\n    equal('element bar is not valid', v.errorList[0].message);\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var v = $('#testForm1clean').validate({\n            rules: {\n                firstnamec: {\n                    required: true,\n                    rangelength: [\n                        5,\n                        10\n                    ]\n                }\n            },\n            messages: { firstnamec: { rangelength: 'at least ${0}, up to {1}' } }\n        });\n    $('#firstnamec').val('abc');\n    v.form();\n    equal('at least 5, up to 10', v.errorList[0].message);\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    expect(1);\n    $('#testForm1clean').validate({\n        invalidHandler: function () {\n            ok(true, 'invalid-form event triggered called');\n            start();\n        }\n    });\n    $('#usernamec').val('asdf').rules('add', {\n        required: true,\n        minlength: 5\n    });\n    $('#testForm1clean').submit();\n}",
    "receiverBase": "",
    "receiverCallee": "asyncTest"
  },
  {
    "callback": "function () {\n    deepEqual(new $.validator({}, document.getElementById('form')).findByName(document.getElementById('radio1').name).get(), $('#form').find('[name=radio1]').get());\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var inputs = $('#testForm1 input').focus(function () {\n            equal(inputs[0], this, 'focused first element');\n        }), v = $('#testForm1').validate();\n    v.form();\n    v.focusInvalid();\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    equal(inputs[0], this, 'focused first element');\n}",
    "receiverBase": "$",
    "receiverCallee": "focus"
  },
  {
    "callback": "function () {\n    var form = $('#testForm1'), validator = form.validate(), inputs = $('#firstname, #lastname, #something');\n    $('#firstname').val('ok');\n    ok(!inputs.valid(), 'just one invalid');\n    validator.focusInvalid();\n    equal(form[0].ownerDocument.activeElement, $('#lastname')[0], 'focused first element');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    expect(3);\n    var v = $('#testForm1').validate(), lastActive;\n    ok(!v.findLastActive());\n    v.form();\n    v.focusInvalid();\n    equal(v.findLastActive(), $('#firstname')[0]);\n    lastActive = $('#lastname').trigger('focus').trigger('focusin')[0];\n    equal(v.lastActive, lastActive);\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    expect(1);\n    var v = $('#userForm').validate(), foreignRadio = $('#radio2')[0];\n    ok(!v.elementValue(foreignRadio));\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    expect(3);\n    var checkboxes = $('#form input[name=check3]').prop('checked', false), v;\n    equal(checkboxes.length, 5);\n    v = $('#form').validate({ rules: { check3: 'required' } });\n    v.form();\n    equal(v.size(), 1);\n    checkboxes.filter(':last').prop('checked', true);\n    v.form();\n    equal(v.size(), 0);\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    expect(4);\n    var v = $('#testForm1').validate();\n    equal('form8input', v.idOrName($('#form8input')[0]));\n    equal('check', v.idOrName($('#form6check1')[0]));\n    equal('agree', v.idOrName($('#agb')[0]));\n    equal('button', v.idOrName($('#form :button')[0]));\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    function errors(expected, message) {\n        equal(expected, v.size(), message);\n    }\n    var v = $('#testForm1').validate();\n    v.form();\n    errors(2);\n    ok($('#firstname').hasClass('error'));\n    $('#firstname').val('hiy');\n    v.resetForm();\n    errors(0);\n    ok(!$('#firstname').hasClass('error'));\n    equal('', $('#firstname').val(), 'form plugin is included, therefor resetForm must also reset inputs, not only errors');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#testForm1clean'), e = $('#firstnamec');\n    form.validate({\n        highlight: function (element) {\n            $(element).hide();\n        },\n        unhighlight: function (element) {\n            $(element).show();\n        },\n        ignore: '',\n        errorClass: 'invalid',\n        rules: { firstnamec: 'required' }\n    });\n    e.valid();\n    ok(!e.is(':visible'));\n    form.validate().resetForm();\n    ok(e.is(':visible'));\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var v = $('#withTitle').validate();\n    v.checkForm();\n    equal(v.errorList[0].message, 'fromtitle', 'title not used');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var v = $('#withTitle').validate({ ignoreTitle: true });\n    v.checkForm();\n    equal(v.errorList[0].message, $.validator.messages.required, 'title used when it should have been ignored');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    expect(1);\n    $('#user').val('Peter');\n    $('#password').val('foobar');\n    jQuery('#signupForm').validate({\n        submitHandler: function (form) {\n            jQuery(form).ajaxSubmit({\n                success: function (response) {\n                    equal('Hi Peter, welcome back.', response);\n                    start();\n                }\n            });\n        }\n    });\n    jQuery('#signupForm').triggerHandler('submit');\n}",
    "receiverBase": "",
    "receiverCallee": "asyncTest"
  },
  {
    "callback": "function () {\n    expect(7);\n    equal('', $('#firstname').val());\n    var v = $('#testForm1').validate({ success: 'valid' }), label = $('#testForm1 .error:not(input)');\n    ok(label.is('.error'));\n    ok(!label.is('.valid'));\n    v.form();\n    ok(label.is('.error'));\n    ok(!label.is('.valid'));\n    $('#firstname').val('hi');\n    v.form();\n    ok(label.is('.error'));\n    ok(label.is('.valid'));\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    expect(5);\n    equal('', $('#firstname').val());\n    var v = $('#testForm1').validate({ success: 'valid' }), label = $('#testForm1 .error:not(input)');\n    ok(label.is('.error'));\n    ok(!label.is('.valid'));\n    $('#firstname').val('hi');\n    v.form();\n    ok(label.is('.error'));\n    ok(label.is('.valid'));\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    expect(5);\n    equal('', $('#firstname').val());\n    $('#errorFirstname').remove();\n    var v = $('#testForm1').validate({ success: 'valid' }), labels;\n    equal(0, $('#testForm1 .error:not(input)').length);\n    $('#firstname').val('hi');\n    v.form();\n    labels = $('#testForm1 .error:not(input)');\n    equal(3, labels.length);\n    ok(labels.eq(0).is('.valid'));\n    ok(!labels.eq(1).is('.valid'));\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var v = $('#form').validate({ success: 'xyz' });\n    v.form();\n    equal(0, v.successList.length);\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    expect(1);\n    $.validator.addMethod('custom1', function () {\n        return true;\n    }, '');\n    $('#testForm1clean').validate({\n        success: function () {\n            ok(true, 'success called correctly!');\n        },\n        rules: {\n            firstnamec: {\n                required: false,\n                custom1: true\n            }\n        }\n    });\n    $('#firstnamec').valid();\n    delete $.validator.methods.custom1;\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    return true;\n}",
    "receiverBase": "validator",
    "receiverCallee": "addMethod"
  },
  {
    "callback": "function () {\n    expect(1);\n    var v = $('#userForm').validate({\n            success: function (label, element) {\n                equal(element, $('#username').get(0));\n            }\n        });\n    $('#username').val('hi');\n    v.form();\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    ok(true, 'custom method must be evaluated');\n    return true;\n}",
    "receiverBase": "validator",
    "receiverCallee": "addMethod"
  },
  {
    "callback": "function () {\n    var v = $('#testForm1').validate({ ignore: '[name=lastname]' });\n    v.form();\n    equal(1, v.size());\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function (value, element) {\n    if ($('#bill_to_co').is(':checked')) {\n        return $(element).parents('#subform').length;\n    }\n    return !this.optional(element);\n}",
    "receiverBase": "validator",
    "receiverCallee": "addMethod"
  },
  {
    "callback": "function () {\n    var e = $('#lastname')[0];\n    equal(1, $(e).filter(':blank').length);\n    e.value = ' ';\n    equal(1, $(e).filter(':blank').length);\n    e.value = '   ';\n    equal(1, $(e).filter(':blank').length);\n    e.value = ' a ';\n    equal(0, $(e).filter(':blank').length);\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var e = $('#lastname')[0];\n    equal(0, $(e).filter(':filled').length);\n    e.value = ' ';\n    equal(0, $(e).filter(':filled').length);\n    e.value = '   ';\n    equal(0, $(e).filter(':filled').length);\n    e.value = ' a ';\n    equal(1, $(e).filter(':filled').length);\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var e = $('#check2')[0];\n    equal(1, $(e).filter(':unchecked').length);\n    e.checked = true;\n    equal(0, $(e).filter(':unchecked').length);\n    e.checked = false;\n    equal(1, $(e).filter(':unchecked').length);\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    function errors(expected, message) {\n        equal(expected, v.size(), message);\n    }\n    var e = $('#firstname'), v = $('#testForm1').validate({ onkeyup: false });\n    errors(0);\n    e.val('a');\n    e.trigger('keyup');\n    e.keyup();\n    errors(0);\n    e.trigger('blur').trigger('focusout');\n    errors(1);\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    function errors(expected, message) {\n        equal(expected, v.size(), message);\n    }\n    var e = $('#firstname'), v = $('#testForm1').validate();\n    errors(0);\n    e.val('a');\n    e.trigger('keyup');\n    errors(0);\n    e.trigger('blur').trigger('focusout');\n    errors(1);\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    function errors(expected, message) {\n        equal(expected, v.size(), message);\n    }\n    var e = $('#firstname'), v = $('#testForm1').validate();\n    v.form();\n    errors(2);\n    e.val('a');\n    e.trigger('keyup');\n    errors(1);\n    e.val('aa');\n    e.trigger('keyup');\n    errors(0);\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function (key, keyCode) {\n    triggerEvent(e, keyCode);\n    errors(1, key + ' key');\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    function errors(expected, message) {\n        equal(expected, v.size(), message);\n    }\n    function trigger(element) {\n        element.click();\n        element.valid();\n    }\n    var e = $('#check2'), v = $('#form').validate({ rules: { check2: 'required' } });\n    trigger(e);\n    errors(0);\n    trigger(e);\n    equal(false, v.form());\n    errors(1);\n    trigger(e);\n    errors(0);\n    trigger(e);\n    errors(1);\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    function errors(expected, message) {\n        equal(expected, v.size(), message);\n    }\n    function trigger(element) {\n        element.click();\n        element.valid();\n    }\n    var e1 = $('#radio1'), e2 = $('#radio1a'), v = $('#form').validate({ rules: { radio1: 'required' } });\n    errors(0);\n    equal(false, v.form());\n    errors(1);\n    trigger(e2);\n    errors(0);\n    trigger(e1);\n    errors(0);\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    function errors(expected, message) {\n        equal(expected, v.size(), message);\n    }\n    var v = $('#testForm12').validate(), e = $('#testForm12text');\n    errors(0);\n    e.valid();\n    errors(1);\n    e.val('test');\n    e.trigger('keyup');\n    errors(0);\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#userForm'), validate = form.validate({ rules: { 'username': 'required' } });\n    form.get(0).reset();\n    ok(!validate.form(), 'form should be initially invalid');\n    $('#userForm [name=username]').hide();\n    ok(validate.form(), 'hidden elements should be ignored by default');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#userForm'), validate = form.validate({ rules: { 'username': 'required' } });\n    form.get(0).reset();\n    $('#userForm [name=username]').hide();\n    ok(validate.form(), 'hidden elements should be ignored by default');\n    $('#userForm [name=username]').show();\n    ok(!validate.form(), 'form should be invalid when required element is visible');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#dataMessages'), name = $('#dataMessagesName'), label;\n    form.validate();\n    form.get(0).reset();\n    name.valid();\n    label = $('#dataMessages .error:not(input)');\n    equal(label.text(), 'You must enter a value here', 'Correct error label');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#updateLabel'), input = $('#updateLabelInput'), label = $('#targetLabel'), labelsBefore = form.find('.error:not(input)').length, labelsAfter;\n    form.validate();\n    input.val('');\n    input.valid();\n    labelsAfter = form.find('.error:not(input)').length;\n    equal(label.text(), input.attr('data-msg-required'));\n    equal(labelsBefore, labelsAfter);\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#rangesMinDateInvalid'), name = $('#minDateInvalid'), label;\n    form.validate();\n    form.get(0).reset();\n    name.valid();\n    label = $('#rangesMinDateInvalid .error:not(input)');\n    equal(label.text(), 'Please enter a value greater than or equal to 2012-12-21.', 'Correct error label');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#ranges'), name = $('#maxDateInvalid'), label;\n    form.validate();\n    form.get(0).reset();\n    name.valid();\n    label = $('#ranges .error:not(input)');\n    equal(label.text(), 'Please enter a value less than or equal to 2012-12-21.', 'Correct error label');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#ranges'), name = $('#rangeDateInvalidGreater'), label;\n    form.validate();\n    form.get(0).reset();\n    name.valid();\n    label = $('#ranges .error:not(input)');\n    equal(label.text(), 'Please enter a value less than or equal to 2013-01-21.', 'Correct error label');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#ranges'), name = $('#rangeDateInvalidLess'), label;\n    form.validate();\n    form.get(0).reset();\n    name.valid();\n    label = $('#ranges .error:not(input)');\n    equal(label.text(), 'Please enter a value greater than or equal to 2012-11-21.', 'Correct error label');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#rangeMinDateValid'), name = $('#minDateValid'), label;\n    form.validate();\n    form.get(0).reset();\n    name.valid();\n    label = $('#rangeMinDateValid .error:not(input)');\n    equal(label.text(), '', 'Correct error label');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#ranges'), name = $('#maxDateValid'), label;\n    form.validate();\n    form.get(0).reset();\n    name.valid();\n    label = $('#ranges .error:not(input)');\n    equal(label.text(), '', 'Correct error label');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#ranges'), name = $('#rangeDateValid'), label;\n    form.validate();\n    form.get(0).reset();\n    name.valid();\n    label = $('#ranges .error:not(input)');\n    equal(label.text(), '', 'Correct error label');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#ranges'), name = $('#rangeTextInvalidGreater'), label;\n    form.validate();\n    form.get(0).reset();\n    name.valid();\n    label = $('#ranges .error:not(input)');\n    equal(label.text(), 'Please enter a value less than or equal to 200.', 'Correct error label');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#ranges'), name = $('#rangeTextInvalidLess'), label;\n    form.validate();\n    form.get(0).reset();\n    name.valid();\n    label = $('#ranges .error:not(input)');\n    equal(label.text(), 'Please enter a value greater than or equal to 200.', 'Correct error label');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#ranges'), name = $('#rangeTextValid'), label;\n    form.validate();\n    form.get(0).reset();\n    name.valid();\n    label = $('#ranges .error:not(input)');\n    equal(label.text(), '', 'Correct error label');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#ignoredElements');\n    form.validate({\n        ignore: '.ignore',\n        submitHandler: $.noop,\n        invalidHandler: function () {\n            $('#ss1').blur();\n        }\n    });\n    form.trigger('submit');\n    equal(form.valid(), false, 'valid() should return false');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#ranges'), name = $('#rangeAbsentInvalidGreater'), label;\n    form.validate();\n    form.get(0).reset();\n    name.valid();\n    label = $('#ranges .error:not(input)');\n    equal(label.text(), 'Please enter a value less than or equal to 200.', 'Correct error label');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#ranges'), name = $('#rangeAbsentInvalidLess'), label;\n    form.validate();\n    form.get(0).reset();\n    name.valid();\n    label = $('#ranges .error:not(input)');\n    equal(label.text(), 'Please enter a value greater than or equal to 200.', 'Correct error label');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#ranges'), name = $('#rangeAbsentValid'), label;\n    form.validate();\n    form.get(0).reset();\n    name.valid();\n    label = $('#ranges .error:not(input)');\n    equal(label.text(), '', 'Correct error label');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#ranges'), name = $('#rangeRangeValid'), label;\n    form.validate();\n    form.get(0).reset();\n    name.valid();\n    label = $('#ranges .error:not(input)');\n    equal(label.text(), '', 'Correct error label');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#ranges'), name = $('#rangeNumberValid'), label;\n    form.validate();\n    form.get(0).reset();\n    name.valid();\n    label = $('#ranges .error:not(input)');\n    equal(label.text(), '', 'Correct error label');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#ranges'), name = $('#rangeNumberInvalidGreater'), label;\n    form.validate();\n    form.get(0).reset();\n    name.valid();\n    label = $('#ranges .error:not(input)');\n    equal(label.text(), 'Please enter a value less than or equal to 200.', 'Correct error label');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#ranges'), name = $('#rangeNumberInvalidLess'), label;\n    form.validate();\n    form.get(0).reset();\n    name.valid();\n    label = $('#ranges .error:not(input)');\n    equal(label.text(), 'Please enter a value greater than or equal to 50.', 'Correct error label');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#ranges'), name = $('#rangeMinZeroInvalidLess'), label;\n    form.validate();\n    form.get(0).reset();\n    name.valid();\n    label = $('#ranges .error:not(input)');\n    equal(label.text(), 'Please enter a value greater than or equal to 0.', 'Correct error label');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#ranges'), name = $('#rangeMinZeroValidEqual'), label;\n    form.validate();\n    form.get(0).reset();\n    name.valid();\n    label = $('#ranges .error:not(input)');\n    equal(label.text(), '', 'Correct error label');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var form = $('#ranges'), name = $('#rangeMinZeroValidGreater'), label;\n    form.validate();\n    form.get(0).reset();\n    name.valid();\n    label = $('#ranges .error:not(input)');\n    equal(label.text(), '', 'Correct error label');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    expect(2);\n    var form = $('#radiocheckbox');\n    form.validate();\n    ok(!form.valid(), 'Form invalid');\n    $('#radiocheckbox-0-1').simulate('click');\n    $('#radiocheckbox-1-1').simulate('click');\n    ok(form.find('input.error').length === 0, 'Form valid');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  }
]