[
  {
    "callback": "function foo() {\n    var bar = Math.min(Math.min(4, 6), Math.max(4, 6) + Math.floor(8.2) + foo.bar.quux.baz + foo.bar.quux.w00p + parseInt('123') + parseInt('456'), parseFloat('99.5') + parseFloat('99.5') + isFinite(1) + isFinite(1));\n    setTimeout(foo, 100);\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function foo() {\n    var bar = MATHMIN_(MATHMIN_(4, 6), MATH.max(4, 6) + MATH.floor(8.2) + FOOBARQUUX.baz + FOOBARQUUX.w00p + parseInt('123') + parseInt('456'), parseFloat('99.5') + parseFloat('99.5') + isFinite(1) + isFinite(1));\n    SETTIMEOUT(foo, 100);\n}",
    "receiverBase": "",
    "receiverCallee": "SETTIMEOUT"
  },
  {
    "callback": "function () {\n    alert(Math.floor(10.8) + Math.floor(20.4) + Math.min(3, 5));\n}",
    "receiverBase": "",
    "receiverCallee": "getFunctionBodySource"
  },
  {
    "callback": "function (assetGraph) {\n    expect(assetGraph.findAssets({ type: 'JavaScript' })[0].text, 'to equal', getFunctionBodySource(function () {\n        (function (MATH, MATHFLOOR) {\n            alert(MATHFLOOR(10.8) + MATHFLOOR(20.4) + MATH.min(3, 5));\n        }(Math, Math.floor));\n    }));\n}",
    "receiverBase": "prettyPrintAssets",
    "receiverCallee": "queue"
  },
  {
    "callback": "function () {\n    (function (MATH, MATHFLOOR) {\n        alert(MATHFLOOR(10.8) + MATHFLOOR(20.4) + MATH.min(3, 5));\n    }(Math, Math.floor));\n}",
    "receiverBase": "",
    "receiverCallee": "getFunctionBodySource"
  },
  {
    "callback": "function (MATH, MATHFLOOR) {\n    alert(MATHFLOOR(10.8) + MATHFLOOR(20.4) + MATH.min(3, 5));\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    var a = 'foobarquux', b = 'foobarquux';\n    f.foobarquux();\n}",
    "receiverBase": "",
    "receiverCallee": "getFunctionBodySource"
  },
  {
    "callback": "function (assetGraph) {\n    expect(assetGraph.findAssets({ type: 'JavaScript' })[0].text, 'to equal', getFunctionBodySource(function () {\n        var FOOBARQUUX = 'foobarquux';\n        var a = FOOBARQUUX, b = FOOBARQUUX;\n        f[FOOBARQUUX]();\n    }));\n}",
    "receiverBase": "prettyPrintAssets",
    "receiverCallee": "queue"
  },
  {
    "callback": "function () {\n    var FOOBARQUUX = 'foobarquux';\n    var a = FOOBARQUUX, b = FOOBARQUUX;\n    f[FOOBARQUUX]();\n}",
    "receiverBase": "",
    "receiverCallee": "getFunctionBodySource"
  },
  {
    "callback": "function (x, y) {\n    return y.score - x.score;\n}",
    "receiverBase": "agendas",
    "receiverCallee": "sort"
  },
  {
    "callback": "function (data) {\n    var template = $('#bill-template').html();\n    $('#bills').html(Mustache.render(template, data));\n    $('#bills-tab>table').dataTable({\n        'oLanguage': { 'sUrl': 'txt/dataTables.txt' },\n        'iDisplayLength': 25\n    });\n}",
    "receiverBase": "$",
    "receiverCallee": "get"
  },
  {
    "callback": "function (worker) {\n    console.log('Worker ' + worker.id + ' died');\n    cluster.fork();\n}",
    "receiverBase": "cluster",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    goog.dom.getRequiredElement('does_not_exist');\n}",
    "receiverBase": "",
    "receiverCallee": "assertThrows"
  },
  {
    "callback": "function () {\n    goog.dom.getRequiredElementByClass('does_not_exist', container);\n}",
    "receiverBase": "",
    "receiverCallee": "assertThrows"
  },
  {
    "callback": "function () {\n    domHelper.getRequiredElementByClass('does_not_exist', container);\n}",
    "receiverBase": "",
    "receiverCallee": "assertThrows"
  },
  {
    "callback": "function (n) {\n    return n.nodeType == goog.dom.NodeType.ELEMENT && n.tagName == 'BODY';\n}",
    "receiverBase": "dom",
    "receiverCallee": "findNode"
  },
  {
    "callback": "function (n) {\n    return n.nodeType == goog.dom.NodeType.ELEMENT && n.tagName == 'P';\n}",
    "receiverBase": "dom",
    "receiverCallee": "findNode"
  },
  {
    "callback": "function (n) {\n    return false;\n}",
    "receiverBase": "dom",
    "receiverCallee": "findNode"
  },
  {
    "callback": "function (n) {\n    return n.nodeType == goog.dom.NodeType.ELEMENT && n.tagName == 'P';\n}",
    "receiverBase": "dom",
    "receiverCallee": "findNodes"
  },
  {
    "callback": "function (n) {\n    return false;\n}",
    "receiverBase": "dom",
    "receiverCallee": "findNodes"
  },
  {
    "callback": "function () {\n    return false;\n}",
    "receiverBase": "dom",
    "receiverCallee": "getAncestor"
  },
  {
    "callback": "function () {\n    return true;\n}",
    "receiverBase": "dom",
    "receiverCallee": "getAncestor"
  },
  {
    "callback": "function () {\n    return true;\n}",
    "receiverBase": "dom",
    "receiverCallee": "getAncestor"
  },
  {
    "callback": "function () {\n    return true;\n}",
    "receiverBase": "dom",
    "receiverCallee": "getAncestor"
  },
  {
    "callback": "function (el) {\n    return el == searchEl;\n}",
    "receiverBase": "dom",
    "receiverCallee": "getAncestor"
  },
  {
    "callback": "function (el) {\n    return el == searchEl;\n}",
    "receiverBase": "dom",
    "receiverCallee": "getAncestor"
  },
  {
    "callback": "function () {\n    app.playlists.getThumbsUp();\n    $('.playlist-actions-wrapper', this.$el).html(app.helpers.makeDropdown(app.helpers.menuTemplates('playlistShell')));\n}",
    "receiverBase": "$",
    "receiverCallee": "on"
  },
  {
    "callback": "function (i, d) {\n    if (d.attributes.songid) {\n        if (d.attributes.songid == 'file') {\n            items.push(d.attributes.file);\n        } else {\n            items.push(d.attributes.songid);\n        }\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    app.AudioController.playlistRender();\n    app.playlists.changePlaylistView('xbmc');\n    callback();\n}",
    "receiverBase": "AudioController",
    "receiverCallee": "playlistAddMultiple"
  },
  {
    "callback": "function () {\n    app.AudioController.playlistAddMultiple('mixed', items, function () {\n        app.AudioController.playlistRender();\n        app.playlists.changePlaylistView('xbmc');\n        app.AudioController.playPlaylistPosition(i, function (data) {\n            app.AudioController.playlistRender();\n            callback();\n        });\n    });\n}",
    "receiverBase": "AudioController",
    "receiverCallee": "playlistClear"
  },
  {
    "callback": "function () {\n    app.AudioController.playlistRender();\n    app.playlists.changePlaylistView('xbmc');\n    app.AudioController.playPlaylistPosition(i, function (data) {\n        app.AudioController.playlistRender();\n        callback();\n    });\n}",
    "receiverBase": "AudioController",
    "receiverCallee": "playlistAddMultiple"
  },
  {
    "callback": "function (data) {\n    app.AudioController.playlistRender();\n    callback();\n}",
    "receiverBase": "AudioController",
    "receiverCallee": "playPlaylistPosition"
  },
  {
    "callback": "function (i, d) {\n    var song = app.store.getSongBy('id', d.attributes.songid);\n    if (song !== null) {\n        d.attributes.file = song.file;\n        collection.models[i] = d;\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, d) {\n    $d = $(d);\n    if ($d.data('path') === $thisItem.data('path')) {\n        changed = {\n            from: $thisItem.data('id'),\n            to: i\n        };\n    }\n}",
    "receiverBase": "find",
    "receiverCallee": "each"
  },
  {
    "callback": "function (res) {\n    controller.playlistRender();\n    $thisItem.removeClass('.playing-row');\n}",
    "receiverBase": "controller",
    "receiverCallee": "playlistSwap"
  },
  {
    "callback": "function (i, d) {\n    $d = $(d);\n    if ($d.data('path') === $thisItem.data('path')) {\n        changed = {\n            from: $thisItem.data('path'),\n            to: i\n        };\n    }\n}",
    "receiverBase": "find",
    "receiverCallee": "each"
  },
  {
    "callback": "function (res) {\n    app.AudioController.playlistRender();\n}",
    "receiverBase": "AudioController",
    "receiverCallee": "playlistSwap"
  },
  {
    "callback": "function (e) {\n    var name = $('#newlistname').val(), pl = app.playlists.saveCustomPlayLists('new', name, type, items);\n    app.helpers.dialogClose();\n    if (redirect) {\n        document.location = '#playlist/' + pl.id;\n    }\n    app.notification('Playlist updated');\n}",
    "receiverBase": "$",
    "receiverCallee": "on"
  },
  {
    "callback": "function (e) {\n    var id = $(this).data('id'), pl = app.playlists.saveCustomPlayLists('existing', id, type, items);\n    app.helpers.dialogClose();\n    if (redirect) {\n        document.location = '#playlist/' + pl.id;\n    }\n    app.notification('Playlist updated');\n}",
    "receiverBase": "$",
    "receiverCallee": "on"
  },
  {
    "callback": "function (d) {\n    if (d.id == 'file') {\n        d = app.addOns.invokeAll('parseFileRecord', d);\n        items.push(d);\n    } else {\n        items.push(d.id);\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (view) {\n    $('#sidebar-after').html(view.render().el);\n}",
    "receiverBase": "playlists",
    "receiverCallee": "addCustomPlayLists"
  },
  {
    "callback": "function (result) {\n    var res = result.result;\n    res.playlistId = playlistId;\n    if (res.items !== undefined) {\n        $.each(res.items, function (i, d) {\n            res.items[i].playlistId = playlistId;\n        });\n    }\n    callback(res);\n}",
    "receiverBase": "xbmcController",
    "receiverCallee": "command"
  },
  {
    "callback": "function (i, d) {\n    res.items[i].playlistId = playlistId;\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function (data) {\n    if (callback) {\n        callback(data);\n    }\n}",
    "receiverBase": "xbmcController",
    "receiverCallee": "command"
  },
  {
    "callback": "function (result) {\n    if (callback) {\n        callback(result.result);\n    }\n}",
    "receiverBase": "xbmcController",
    "receiverCallee": "command"
  },
  {
    "callback": "function (data) {\n    app.shellView.updateState(data);\n}",
    "receiverBase": "xbmc",
    "receiverCallee": "fetchRemote"
  },
  {
    "callback": "function (result) {\n    app.notification('Partymode on');\n    if (callback) {\n        callback(result.result);\n    }\n}",
    "receiverBase": "playlists",
    "receiverCallee": "playerOpen"
  },
  {
    "callback": "function (result) {\n    app.notification('Partymode off');\n    if (callback) {\n        callback(result.result);\n    }\n}",
    "receiverBase": "xbmcController",
    "receiverCallee": "command"
  },
  {
    "callback": "function (result) {\n    app.xbmcController.command('Playlist.Insert', [\n        playlistId,\n        pos2,\n        insert\n    ], function (data) {\n        controller.getPlaylistItems(function (result) {\n            controller.currentPlaylist = result;\n            callback(result);\n        });\n    });\n}",
    "receiverBase": "controller",
    "receiverCallee": "removePlaylistPosition"
  },
  {
    "callback": "function (data) {\n    controller.getPlaylistItems(function (result) {\n        controller.currentPlaylist = result;\n        callback(result);\n    });\n}",
    "receiverBase": "xbmcController",
    "receiverCallee": "command"
  },
  {
    "callback": "function (result) {\n    controller.currentPlaylist = result;\n    callback(result);\n}",
    "receiverBase": "controller",
    "receiverCallee": "getPlaylistItems"
  },
  {
    "callback": "function () {\n    app.xbmcController.command('Playlist.Insert', [\n        playlistId,\n        pos,\n        insert\n    ], function (data) {\n        app.playlists.playlistPlayPosition(playlistId, pos, function () {\n            if (callback) {\n                callback(data);\n            }\n        });\n    });\n}",
    "receiverBase": "playlists",
    "receiverCallee": "playlistClear"
  },
  {
    "callback": "function (data) {\n    app.playlists.playlistPlayPosition(playlistId, pos, function () {\n        if (callback) {\n            callback(data);\n        }\n    });\n}",
    "receiverBase": "xbmcController",
    "receiverCallee": "command"
  },
  {
    "callback": "function () {\n    if (callback) {\n        callback(data);\n    }\n}",
    "receiverBase": "playlists",
    "receiverCallee": "playlistPlayPosition"
  },
  {
    "callback": "function (data) {\n    app.playlists.playlistPlayPosition(playlistId, pos, function () {\n        if (callback) {\n            callback(data);\n        }\n    });\n}",
    "receiverBase": "xbmcController",
    "receiverCallee": "command"
  },
  {
    "callback": "function () {\n    if (callback) {\n        callback(data);\n    }\n}",
    "receiverBase": "playlists",
    "receiverCallee": "playlistPlayPosition"
  },
  {
    "callback": "function (status) {\n    if (status !== 'success') {\n        console.log('Unable to access network: ' + status);\n        phantom.exit(1);\n    } else {\n        var interval = setInterval(function () {\n                if (finished()) {\n                    clearInterval(interval);\n                    onfinishedTests();\n                }\n            }, 500);\n    }\n}",
    "receiverBase": "page",
    "receiverCallee": "open"
  },
  {
    "callback": "function () {\n    if (finished()) {\n        clearInterval(interval);\n        onfinishedTests();\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "setInterval"
  },
  {
    "callback": "function () {\n    return !!window.qunitDone;\n}",
    "receiverBase": "page",
    "receiverCallee": "evaluate"
  },
  {
    "callback": "function () {\n    return JSON.stringify(window.qunitDone);\n}",
    "receiverBase": "page",
    "receiverCallee": "evaluate"
  },
  {
    "callback": "function (context) {\n    module = context.name;\n}",
    "receiverBase": "QUnit",
    "receiverCallee": "moduleStart"
  },
  {
    "callback": "function (result) {\n    var name = module + ': ' + result.name;\n    var i;\n    if (result.failed) {\n        console.log('Assertion Failed: ' + name);\n        for (i = 0; i < current_test_assertions.length; i++) {\n            console.log('    ' + current_test_assertions[i]);\n        }\n    }\n    current_test_assertions = [];\n}",
    "receiverBase": "QUnit",
    "receiverCallee": "testDone"
  },
  {
    "callback": "function (details) {\n    var response;\n    if (details.result) {\n        return;\n    }\n    response = details.message || '';\n    if (typeof details.expected !== 'undefined') {\n        if (response) {\n            response += ', ';\n        }\n        response += 'expected: ' + details.expected + ', but was: ' + details.actual;\n    }\n    current_test_assertions.push('Failed assertion: ' + response);\n}",
    "receiverBase": "QUnit",
    "receiverCallee": "log"
  },
  {
    "callback": "function (result) {\n    console.log('Took ' + result.runtime + 'ms to run ' + result.total + ' tests. ' + result.passed + ' passed, ' + result.failed + ' failed.');\n    window.qunitDone = result;\n}",
    "receiverBase": "QUnit",
    "receiverCallee": "done"
  },
  {
    "callback": "function (elem, i) {\n    return callback.call(elem, i, elem);\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "map"
  },
  {
    "callback": "function doScrollCheck() {\n    if (!jQuery.isReady) {\n        try {\n            top.doScroll('left');\n        } catch (e) {\n            return setTimeout(doScrollCheck, 50);\n        }\n        detach();\n        jQuery.ready();\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (i, name) {\n    class2type['[object ' + name + ']'] = name.toLowerCase();\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (argument) {\n    argument = +argument;\n    return markFunction(function (seed, matches) {\n        var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;\n        while (i--) {\n            if (seed[j = matchIndexes[i]]) {\n                seed[j] = !(matches[j] = seed[j]);\n            }\n        }\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "markFunction"
  },
  {
    "callback": "function (seed, matches) {\n    var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;\n    while (i--) {\n        if (seed[j = matchIndexes[i]]) {\n            seed[j] = !(matches[j] = seed[j]);\n        }\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "markFunction"
  },
  {
    "callback": "function () {\n    setDocument();\n}",
    "receiverBase": "parent",
    "receiverCallee": "attachEvent"
  },
  {
    "callback": "function (div) {\n    div.innerHTML = '<a href=\\'#\\'></a>';\n    addHandle('type|href|height|width', interpolationHandler, div.firstChild.getAttribute('href') === '#');\n    addHandle(booleans, boolHandler, div.getAttribute('disabled') == null);\n    div.className = 'i';\n    return !div.getAttribute('className');\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (div) {\n    div.innerHTML = '<input>';\n    div.firstChild.setAttribute('value', '');\n    return div.firstChild.getAttribute('value') === '';\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (div) {\n    div.appendChild(doc.createComment(''));\n    return !div.getElementsByTagName('*').length;\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (div) {\n    div.innerHTML = '<div class=\\'a\\'></div><div class=\\'a i\\'></div>';\n    div.firstChild.className = 'i';\n    return div.getElementsByClassName('i').length === 2;\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (div) {\n    docElem.appendChild(div).id = expando;\n    return !doc.getElementsByName || !doc.getElementsByName(expando).length;\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (div) {\n    div.innerHTML = '<select><option selected=\\'\\'></option></select>';\n    if (!div.querySelectorAll('[selected]').length) {\n        rbuggyQSA.push('\\\\[' + whitespace + '*(?:value|' + booleans + ')');\n    }\n    if (!div.querySelectorAll(':checked').length) {\n        rbuggyQSA.push(':checked');\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (div) {\n    var input = doc.createElement('input');\n    input.setAttribute('type', 'hidden');\n    div.appendChild(input).setAttribute('t', '');\n    if (div.querySelectorAll('[t^=\\'\\']').length) {\n        rbuggyQSA.push('[*^$]=' + whitespace + '*(?:\\'\\'|\"\")');\n    }\n    if (!div.querySelectorAll(':enabled').length) {\n        rbuggyQSA.push(':enabled', ':disabled');\n    }\n    div.querySelectorAll('*,:x');\n    rbuggyQSA.push(',.*:');\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (div) {\n    support.disconnectedMatch = matches.call(div, 'div');\n    matches.call(div, '[s!=\\'\\']:x');\n    rbuggyMatches.push('!=', pseudos);\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (div1) {\n    return div1.compareDocumentPosition(doc.createElement('div')) & 1;\n}",
    "receiverBase": "",
    "receiverCallee": "assert"
  },
  {
    "callback": "function (elem) {\n    return pattern.test(typeof elem.className === 'string' && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute('class') || '');\n}",
    "receiverBase": "",
    "receiverCallee": "classCache"
  },
  {
    "callback": "function (seed, matches) {\n    var idx, matched = fn(seed, argument), i = matched.length;\n    while (i--) {\n        idx = indexOf.call(seed, matched[i]);\n        seed[idx] = !(matches[idx] = matched[i]);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "markFunction"
  },
  {
    "callback": "function (seed, matches, context, xml) {\n    var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;\n    while (i--) {\n        if (elem = unmatched[i]) {\n            seed[i] = !(matches[i] = elem);\n        }\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "markFunction"
  },
  {
    "callback": "function (selector) {\n    return function (elem) {\n        return Sizzle(selector, elem).length > 0;\n    };\n}",
    "receiverBase": "",
    "receiverCallee": "markFunction"
  },
  {
    "callback": "function (text) {\n    return function (elem) {\n        return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;\n    };\n}",
    "receiverBase": "",
    "receiverCallee": "markFunction"
  },
  {
    "callback": "function () {\n    return [0];\n}",
    "receiverBase": "",
    "receiverCallee": "createPositionalPseudo"
  },
  {
    "callback": "function (matchIndexes, length) {\n    return [length - 1];\n}",
    "receiverBase": "",
    "receiverCallee": "createPositionalPseudo"
  },
  {
    "callback": "function (matchIndexes, length, argument) {\n    return [argument < 0 ? argument + length : argument];\n}",
    "receiverBase": "",
    "receiverCallee": "createPositionalPseudo"
  },
  {
    "callback": "function (matchIndexes, length) {\n    var i = 0;\n    for (; i < length; i += 2) {\n        matchIndexes.push(i);\n    }\n    return matchIndexes;\n}",
    "receiverBase": "",
    "receiverCallee": "createPositionalPseudo"
  },
  {
    "callback": "function (matchIndexes, length) {\n    var i = 1;\n    for (; i < length; i += 2) {\n        matchIndexes.push(i);\n    }\n    return matchIndexes;\n}",
    "receiverBase": "",
    "receiverCallee": "createPositionalPseudo"
  },
  {
    "callback": "function (matchIndexes, length, argument) {\n    var i = argument < 0 ? argument + length : argument;\n    for (; --i >= 0;) {\n        matchIndexes.push(i);\n    }\n    return matchIndexes;\n}",
    "receiverBase": "",
    "receiverCallee": "createPositionalPseudo"
  },
  {
    "callback": "function (matchIndexes, length, argument) {\n    var i = argument < 0 ? argument + length : argument;\n    for (; ++i < length;) {\n        matchIndexes.push(i);\n    }\n    return matchIndexes;\n}",
    "receiverBase": "",
    "receiverCallee": "createPositionalPseudo"
  },
  {
    "callback": "function (elem) {\n    return elem === checkContext;\n}",
    "receiverBase": "",
    "receiverCallee": "addCombinator"
  },
  {
    "callback": "function (elem) {\n    return indexOf.call(checkContext, elem) > -1;\n}",
    "receiverBase": "",
    "receiverCallee": "addCombinator"
  },
  {
    "callback": "function (_, flag) {\n    object[flag] = true;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function add(args) {\n    jQuery.each(args, function (_, arg) {\n        var type = jQuery.type(arg);\n        if (type === 'function') {\n            if (!options.unique || !self.has(arg)) {\n                list.push(arg);\n            }\n        } else if (arg && arg.length && type !== 'string') {\n            add(arg);\n        }\n    });\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_, arg) {\n    var type = jQuery.type(arg);\n    if (type === 'function') {\n        if (!options.unique || !self.has(arg)) {\n            list.push(arg);\n        }\n    } else if (arg && arg.length && type !== 'string') {\n        add(arg);\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (_, arg) {\n    var index;\n    while ((index = jQuery.inArray(arg, list, index)) > -1) {\n        list.splice(index, 1);\n        if (firing) {\n            if (index <= firingLength) {\n                firingLength--;\n            }\n            if (index <= firingIndex) {\n                firingIndex--;\n            }\n        }\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, tuple) {\n    var action = tuple[0], fn = jQuery.isFunction(fns[i]) && fns[i];\n    deferred[tuple[1]](function () {\n        var returned = fn && fn.apply(this, arguments);\n        if (returned && jQuery.isFunction(returned.promise)) {\n            returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);\n        } else {\n            newDefer[action + 'With'](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);\n        }\n    });\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var returned = fn && fn.apply(this, arguments);\n    if (returned && jQuery.isFunction(returned.promise)) {\n        returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);\n    } else {\n        newDefer[action + 'With'](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "deferred"
  },
  {
    "callback": "function (i, tuple) {\n    var list = tuple[2], stateString = tuple[3];\n    promise[tuple[1]] = list.add;\n    if (stateString) {\n        list.add(function () {\n            state = stateString;\n        }, tuples[i ^ 1][2].disable, tuples[2][2].lock);\n    }\n    deferred[tuple[0]] = function () {\n        deferred[tuple[0] + 'With'](this === deferred ? promise : this, arguments);\n        return this;\n    };\n    deferred[tuple[0] + 'With'] = list.fireWith;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    state = stateString;\n}",
    "receiverBase": "list",
    "receiverCallee": "add"
  },
  {
    "callback": "function () {\n    support.noCloneEvent = false;\n}",
    "receiverBase": "div",
    "receiverCallee": "attachEvent"
  },
  {
    "callback": "function () {\n    support.boxSizing = div.offsetWidth === 4;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "swap"
  },
  {
    "callback": "function () {\n    jQuery.data(this, key);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.data(this, key, value);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.removeData(this, key);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery._removeData(elem, type + 'queue');\n    jQuery._removeData(elem, key);\n}",
    "receiverBase": "Callbacks",
    "receiverCallee": "add"
  },
  {
    "callback": "function () {\n    var queue = jQuery.queue(this, type, data);\n    jQuery._queueHooks(this, type);\n    if (type === 'fx' && queue[0] !== 'inprogress') {\n        jQuery.dequeue(this, type);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.dequeue(this, type);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (next, hooks) {\n    var timeout = setTimeout(next, time);\n    hooks.stop = function () {\n        clearTimeout(timeout);\n    };\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "queue"
  },
  {
    "callback": "function () {\n    jQuery.removeAttr(this, name);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    try {\n        this[name] = undefined;\n        delete this[name];\n    } catch (e) {\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (j) {\n    jQuery(this).addClass(value.call(this, j, this.className));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (j) {\n    jQuery(this).removeClass(value.call(this, j, this.className));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i) {\n    jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (value) {\n    return value == null ? '' : value + '';\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "map"
  },
  {
    "callback": "function (i, name) {\n    jQuery.attrHooks[name] = {\n        set: function (elem, value) {\n            if (value === '') {\n                elem.setAttribute(name, 'auto');\n                return value;\n            }\n        }\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, name) {\n    jQuery.propHooks[name] = {\n        get: function (elem) {\n            return elem.getAttribute(name, 4);\n        }\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.propFix[this.toLowerCase()] = this;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.valHooks[this] = {\n        set: function (elem, value) {\n            if (jQuery.isArray(value)) {\n                return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;\n            }\n        }\n    };\n    if (!jQuery.support.checkOn) {\n        jQuery.valHooks[this].get = function (elem) {\n            return elem.getAttribute('value') === null ? 'on' : elem.value;\n        };\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (e) {\n    var elem = e.target, form = jQuery.nodeName(elem, 'input') || jQuery.nodeName(elem, 'button') ? elem.form : undefined;\n    if (form && !jQuery._data(form, 'submitBubbles')) {\n        jQuery.event.add(form, 'submit._submit', function (event) {\n            event._submit_bubble = true;\n        });\n        jQuery._data(form, 'submitBubbles', true);\n    }\n}",
    "receiverBase": "event",
    "receiverCallee": "add"
  },
  {
    "callback": "function (event) {\n    event._submit_bubble = true;\n}",
    "receiverBase": "event",
    "receiverCallee": "add"
  },
  {
    "callback": "function (event) {\n    if (event.originalEvent.propertyName === 'checked') {\n        this._just_changed = true;\n    }\n}",
    "receiverBase": "event",
    "receiverCallee": "add"
  },
  {
    "callback": "function (event) {\n    if (this._just_changed && !event.isTrigger) {\n        this._just_changed = false;\n    }\n    jQuery.event.simulate('change', this, event, true);\n}",
    "receiverBase": "event",
    "receiverCallee": "add"
  },
  {
    "callback": "function (e) {\n    var elem = e.target;\n    if (rformElems.test(elem.nodeName) && !jQuery._data(elem, 'changeBubbles')) {\n        jQuery.event.add(elem, 'change._change', function (event) {\n            if (this.parentNode && !event.isSimulated && !event.isTrigger) {\n                jQuery.event.simulate('change', this.parentNode, event, true);\n            }\n        });\n        jQuery._data(elem, 'changeBubbles', true);\n    }\n}",
    "receiverBase": "event",
    "receiverCallee": "add"
  },
  {
    "callback": "function (event) {\n    if (this.parentNode && !event.isSimulated && !event.isTrigger) {\n        jQuery.event.simulate('change', this.parentNode, event, true);\n    }\n}",
    "receiverBase": "event",
    "receiverCallee": "add"
  },
  {
    "callback": "function () {\n    jQuery.event.add(this, types, fn, data, selector);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.event.remove(this, types, fn, selector);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.event.trigger(type, data, this);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    for (i = 0; i < len; i++) {\n        if (jQuery.contains(self[i], this)) {\n            return true;\n        }\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "filter"
  },
  {
    "callback": "function () {\n    for (i = 0; i < len; i++) {\n        if (jQuery.contains(this, targets[i])) {\n            return true;\n        }\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (elem) {\n    return elem.nodeType === 1;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function (elem, i) {\n    return !!qualifier.call(elem, i, elem) !== not;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function (elem) {\n    return elem === qualifier !== not;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function (elem) {\n    return jQuery.inArray(elem, qualifier) >= 0 !== not;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function (value) {\n    return value === undefined ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "access"
  },
  {
    "callback": "function (elem) {\n    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n        var target = manipulationTarget(this, elem);\n        target.appendChild(elem);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function (elem) {\n    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n        var target = manipulationTarget(this, elem);\n        target.insertBefore(elem, target.firstChild);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function (elem) {\n    if (this.parentNode) {\n        this.parentNode.insertBefore(elem, this);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function (elem) {\n    if (this.parentNode) {\n        this.parentNode.insertBefore(elem, this.nextSibling);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function () {\n    return jQuery.clone(this, dataAndEvents, deepDataAndEvents);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "map"
  },
  {
    "callback": "function (elem) {\n    return [\n        elem.nextSibling,\n        elem.parentNode\n    ];\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "map"
  },
  {
    "callback": "function (elem) {\n    var next = args[i++], parent = args[i++];\n    if (parent) {\n        if (next && next.parentNode !== parent) {\n            next = this.nextSibling;\n        }\n        jQuery(this).remove();\n        parent.insertBefore(elem, next);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function (index) {\n    var self = set.eq(index);\n    if (isFunction) {\n        args[0] = value.call(this, index, self.html());\n    }\n    self.domManip(args, callback, allowIntersection);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (name, original) {\n    jQuery.fn[name] = function (selector) {\n        var elems, i = 0, ret = [], insert = jQuery(selector), last = insert.length - 1;\n        for (; i <= last; i++) {\n            elems = i === last ? this : this.clone(true);\n            jQuery(insert[i])[original](elems);\n            core_push.apply(ret, elems.get());\n        }\n        return this.pushStack(ret);\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (elem, name, value) {\n    var len, styles, map = {}, i = 0;\n    if (jQuery.isArray(name)) {\n        styles = getStyles(elem);\n        len = name.length;\n        for (; i < len; i++) {\n            map[name[i]] = jQuery.css(elem, name[i], false, styles);\n        }\n        return map;\n    }\n    return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "access"
  },
  {
    "callback": "function () {\n    if (bool ? state : isHidden(this)) {\n        jQuery(this).show();\n    } else {\n        jQuery(this).hide();\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    return getWidthOrHeight(elem, name, extra);\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "swap"
  },
  {
    "callback": "function (i, prop) {\n    jQuery.cssHooks[prop] = {\n        get: function (elem, computed) {\n            if (computed) {\n                computed = curCSS(elem, prop);\n                return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + 'px' : computed;\n            }\n        }\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var elements = jQuery.prop(this, 'elements');\n    return elements ? jQuery.makeArray(elements) : this;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    var type = this.type;\n    return this.name && !jQuery(this).is(':disabled') && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !manipulation_rcheckableType.test(type));\n}",
    "receiverBase": "map",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (i, elem) {\n    var val = jQuery(this).val();\n    return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {\n        return {\n            name: elem.name,\n            value: val.replace(rCRLF, '\\r\\n')\n        };\n    }) : {\n        name: elem.name,\n        value: val.replace(rCRLF, '\\r\\n')\n    };\n}",
    "receiverBase": "filter",
    "receiverCallee": "map"
  },
  {
    "callback": "function (val) {\n    return {\n        name: elem.name,\n        value: val.replace(rCRLF, '\\r\\n')\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    add(this.name, this.value);\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, v) {\n    if (traditional || rbracket.test(prefix)) {\n        add(prefix, v);\n    } else {\n        buildParams(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, traditional, add);\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, name) {\n    jQuery.fn[name] = function (data, fn) {\n        return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i) {\n    jQuery.offset.setOffset(this, options, i);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var offsetParent = this.offsetParent || docElem;\n    while (offsetParent && (!jQuery.nodeName(offsetParent, 'html') && jQuery.css(offsetParent, 'position') === 'static')) {\n        offsetParent = offsetParent.offsetParent;\n    }\n    return offsetParent || docElem;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "map"
  },
  {
    "callback": "function (elem, method, val) {\n    var win = getWindow(elem);\n    if (val === undefined) {\n        return win ? prop in win ? win[prop] : win.document.documentElement[method] : elem[method];\n    }\n    if (win) {\n        win.scrollTo(!top ? val : jQuery(win).scrollLeft(), top ? val : jQuery(win).scrollTop());\n    } else {\n        elem[method] = val;\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "access"
  },
  {
    "callback": "function () {\n    return jQuery;\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function ($scope, Config) {\n}",
    "receiverBase": "buildToolsCtrl",
    "receiverCallee": "controller"
  },
  {
    "callback": "function (dotClause, index) {\n    if (index === 0) {\n        if (dotClause !== '.' && dotClause !== '..')\n            expected('`.`, `..`, `./` or `../`');\n    } else {\n        if (dotClause !== '..')\n            expected('`..` or `../`');\n    }\n    if (dotClause === '..')\n        ancestorStr += '.';\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var store = null;\n    beforeEach(function () {\n        store = Ext.create('FlowMVC.mvc.store.AbstractStore');\n    });\n    afterEach(function () {\n        store = null;\n    });\n    describe('setData() method', function () {\n        it('should be a function', function () {\n            console.log('BMR----------------');\n            console.log(typeof store.setData);\n            expect(typeof store.setData).toEqual('function');\n        });\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "describe"
  },
  {
    "callback": "function () {\n    store = Ext.create('FlowMVC.mvc.store.AbstractStore');\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    store = null;\n}",
    "receiverBase": "",
    "receiverCallee": "afterEach"
  },
  {
    "callback": "function () {\n    it('should be a function', function () {\n        console.log('BMR----------------');\n        console.log(typeof store.setData);\n        expect(typeof store.setData).toEqual('function');\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "describe"
  },
  {
    "callback": "function () {\n    console.log('BMR----------------');\n    console.log(typeof store.setData);\n    expect(typeof store.setData).toEqual('function');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold);\n}",
    "receiverBase": "CodeMirror",
    "receiverCallee": "defineExtension"
  },
  {
    "callback": "function () {\n    ok(Abacus, 'Abacus exists');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    equal(typeof Abacus.guid, 'function', 'Abacus.guid exists and is a function');\n    equal(Abacus.guid().length, 36, 'Abacus.guid() returns a 36 charachter string');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var orig = [\n            1,\n            2,\n            3,\n            4,\n            5\n        ], cloned = Abacus.clone(orig);\n    equal(orig[0], cloned[0], 'orig[0] === cloned[0]');\n    orig[0] = 'a';\n    notEqual(cloned[0], orig[0], '(notEqual) Changing an array property value doesn\\'t effect the clone');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    var orig = new Float32Array([\n            1,\n            2\n        ]), cloned = Abacus.clone(orig);\n    equal(Object.getPrototypeOf(cloned).constructor.name, 'Float32Array', 'cloned \"type\" is Float32Array');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    equal(typeof Abacus.noop, 'function', 'Abacus.noop is a function');\n    equal(Abacus.noop(), undefined, 'Abacus.noop() returns undefined');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    equal(typeof Abacus.identity, 'function', 'Abacus.identity is a function');\n    equal(Abacus.identity(Abacus.noop), Abacus.noop, 'Abacus.identity(Abacus.noop) returns Abacus.noop');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    equal(typeof Abacus.prefix, 'string', 'Abacus.prefix is a string');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function ($scope) {\n    $scope.keyInfo = {};\n    $scope.mouseInfo = {};\n    $scope.keyStroke = function (event) {\n        $scope.keyInfo.keyCode = event.keyCode;\n    };\n    $scope.mouseClick = function (event) {\n        $scope.mouseInfo.clientX = event.clientX;\n        $scope.mouseInfo.clientY = event.clientY;\n        $scope.mouseInfo.screenX = event.screenX;\n        $scope.mouseInfo.screenY = event.screenY;\n    };\n}",
    "receiverBase": "module",
    "receiverCallee": "controller"
  }
]