[
  {
    "callback": "function (angular, app) {\n    app.directive('commonHeader', function () {\n        return {\n            restrict: 'EA',\n            templateUrl: 'app/core/header.html',\n            controller: 'HeaderCtrl'\n        };\n    });\n    app.controller('HeaderCtrl', function ($scope) {\n        console.log('HeaderCtrl working');\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function () {\n    return {\n        restrict: 'EA',\n        templateUrl: 'app/core/header.html',\n        controller: 'HeaderCtrl'\n    };\n}",
    "receiverBase": "app",
    "receiverCallee": "directive"
  },
  {
    "callback": "function ($scope) {\n    console.log('HeaderCtrl working');\n}",
    "receiverBase": "app",
    "receiverCallee": "controller"
  },
  {
    "callback": "function (e) {\n    e.preventDefault();\n    oSettings._iDisplayStart = (parseInt($('a', this).text(), 10) - 1) * oPaging.iLength;\n    fnDraw(oSettings);\n}",
    "receiverBase": "insertBefore",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    var transition = $.support.transition && that.$element.hasClass('fade');\n    if (!that.$element.parent().length) {\n        that.$element.appendTo(document.body);\n    }\n    that.$element.show();\n    if (transition) {\n        that.$element[0].offsetWidth;\n    }\n    that.$element.addClass('in');\n    transition ? that.$element.one($.support.transition.end, function () {\n        that.$element.trigger('shown');\n    }) : that.$element.trigger('shown');\n}",
    "receiverBase": "backdrop",
    "receiverCallee": "call"
  },
  {
    "callback": "function () {\n    that.$element.trigger('shown');\n}",
    "receiverBase": "$element",
    "receiverCallee": "one"
  },
  {
    "callback": "function () {\n    that.$element.off($.support.transition.end);\n    hideModal.call(that);\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    clearTimeout(timeout);\n    hideModal.call(that);\n}",
    "receiverBase": "$element",
    "receiverCallee": "one"
  },
  {
    "callback": "function (e) {\n    e.which == 27 && that.hide();\n}",
    "receiverBase": "$",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    var $this = $(this), data = $this.data('modal'), options = $.extend({}, $.fn.modal.defaults, $this.data(), typeof option == 'object' && option);\n    if (!data)\n        $this.data('modal', data = new Modal(this, options));\n    if (typeof option == 'string')\n        data[option]();\n    else if (options.show)\n        data.show();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    $('body').on('click.modal.data-api', '[data-toggle=\"modal\"]', function (e) {\n        var $this = $(this), href, $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '')), option = $target.data('modal') ? 'toggle' : $.extend({}, $target.data(), $this.data());\n        e.preventDefault();\n        $target.modal(option);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "$"
  },
  {
    "callback": "function (e) {\n    var $this = $(this), href, $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '')), option = $target.data('modal') ? 'toggle' : $.extend({}, $target.data(), $this.data());\n    e.preventDefault();\n    $target.modal(option);\n}",
    "receiverBase": "$",
    "receiverCallee": "on"
  },
  {
    "callback": "function (Y, NAME) {\n    Y.namespace('mojito.models')[NAME] = {\n        init: function (config) {\n            this.config = config;\n        },\n        getData: function (callback) {\n            callback({ some: 'data' });\n        }\n    };\n}",
    "receiverBase": "YUI",
    "receiverCallee": "add"
  },
  {
    "callback": "function () {\n    var NonBindable = function NonBindable() {\n    };\n    return $traceurRuntime.createClass(NonBindable, {}, {});\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (sprite) {\n    var spawnPoint = new Phaser.Point(centerSpawnPoint.x + this.game.rnd.realInRange(-spawnDistance, spawnDistance), centerSpawnPoint.y + this.game.rnd.realInRange(-spawnDistance, spawnDistance));\n    sprite.body.x = spawnPoint.x;\n    sprite.body.y = spawnPoint.y;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "placeWithoutCollision"
  },
  {
    "callback": "function (enemy) {\n    var inAggroRange = true;\n    while (inAggroRange) {\n        inAggroRange = false;\n        enemy.body.x = this.game.world.randomX;\n        enemy.body.y = this.game.world.randomY;\n        this.layers.creatures.forEachAlive(function (creature) {\n            if (Phaser.Point.distance(enemy.body, creature.body) < enemy.aggroTriggerDistance * 1.5) {\n                inAggroRange = true;\n                return;\n            }\n        });\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "placeWithoutCollision"
  },
  {
    "callback": "function (creature) {\n    if (Phaser.Point.distance(enemy.body, creature.body) < enemy.aggroTriggerDistance * 1.5) {\n        inAggroRange = true;\n        return;\n    }\n}",
    "receiverBase": "creatures",
    "receiverCallee": "forEachAlive"
  },
  {
    "callback": "function (Base) {\n    var m2 = new Base('This is the data for Page 2');\n    return m2;\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function (err, doc) {\n    if (err) {\n        callback(err);\n        return;\n    }\n    var id = doc.next;\n    callback(null, id);\n}",
    "receiverBase": "counters",
    "receiverCallee": "findAndModify"
  },
  {
    "callback": "function (err, items) {\n    if (err) {\n        logger.error('fetchList - error reading');\n        db = null;\n        return callback(err);\n    }\n    logger.debug('fetchList - everything is OK');\n    callback(null, items);\n}",
    "receiverBase": "cursor",
    "receiverCallee": "toArray"
  },
  {
    "callback": "function (err, items) {\n    if (err)\n        return callback(err);\n    if (items.length === 1) {\n        callback(null, items[0]);\n        return;\n    }\n    if (items.length > 1) {\n        callback('Error: more than one record found for key [' + key + ']');\n        return;\n    }\n    callback(null, null);\n}",
    "receiverBase": "find",
    "receiverCallee": "toArray"
  },
  {
    "callback": "function (err, items) {\n    if (err)\n        return callback(err);\n    if (items.length === 1) {\n        callback(null, items[0]);\n        return;\n    }\n    if (items.length > 1) {\n        callback('Error: more than one record found for url [' + url + ']');\n        return;\n    }\n    callback(null, null);\n}",
    "receiverBase": "find",
    "receiverCallee": "toArray"
  },
  {
    "callback": "function (err, savedCount) {\n    if (err)\n        return callback(err);\n    if (savedCount == 0)\n        return callback('No document was updated');\n    if (savedCount > 1)\n        return callback('More than one document was updated');\n    fetchOne(data.key, function (err, item) {\n        if (err)\n            return callback(err);\n        callback(null, item);\n    });\n}",
    "receiverBase": "collection",
    "receiverCallee": "save"
  },
  {
    "callback": "function (err, item) {\n    if (err)\n        return callback(err);\n    callback(null, item);\n}",
    "receiverBase": "",
    "receiverCallee": "fetchOne"
  },
  {
    "callback": "function (err, item) {\n    if (err)\n        return callback(err);\n    if (item !== null)\n        return callback('An item with the same key already exists [' + data.key + ']');\n    data.createdOn = new Date();\n    data.updatedOn = null;\n    data.postedOn = null;\n    var collection = db.collection(dbCollection);\n    collection.save(data, function (err, savedCount) {\n        if (err)\n            return callback(err);\n        callback(null, savedCount);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "fetchOne"
  },
  {
    "callback": "function (err, savedCount) {\n    if (err)\n        return callback(err);\n    callback(null, savedCount);\n}",
    "receiverBase": "collection",
    "receiverCallee": "save"
  },
  {
    "callback": "function (err, item) {\n    if (err)\n        return callback(err);\n    if (item === null)\n        return callback('Item to mark as draft was not found for key [' + key + ']');\n    var query = { key: key };\n    var data = { '$set': { postedOn: null } };\n    var collection = db.collection(dbCollection);\n    collection.update(query, data, function (err) {\n        if (err)\n            return callback(err);\n        callback(null);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "fetchOne"
  },
  {
    "callback": "function (err) {\n    if (err)\n        return callback(err);\n    callback(null);\n}",
    "receiverBase": "collection",
    "receiverCallee": "update"
  },
  {
    "callback": "function (err, item) {\n    if (err)\n        return callback(err);\n    if (item === null)\n        return callback('Item to mark as posted was not found for key [' + key + ']');\n    var query = { key: key };\n    var postedOn = new Date();\n    var data = { '$set': { postedOn: postedOn } };\n    var collection = db.collection(dbCollection);\n    collection.update(query, data, function (err) {\n        if (err)\n            return callback(err);\n        callback(null, postedOn);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "fetchOne"
  },
  {
    "callback": "function (err) {\n    if (err)\n        return callback(err);\n    callback(null, postedOn);\n}",
    "receiverBase": "collection",
    "receiverCallee": "update"
  }
]