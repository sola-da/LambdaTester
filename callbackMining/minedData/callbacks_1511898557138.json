[
  {
    "callback": "function (text, index) {\n    strings.push('#line 1 ', index.toString(), '\\n', text);\n}",
    "receiverBase": "sources",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (a, b) {\n    return optCompareFunc(b, a);\n}",
    "receiverBase": "queueNear",
    "receiverCallee": "sort"
  },
  {
    "callback": "function () {\n    callback(null, e);\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (password) {\n    this._password = password;\n    this.salt = this.makeSalt();\n    this.hashedPassword = this.encryptPassword(password);\n}",
    "receiverBase": "virtual",
    "receiverCallee": "set"
  },
  {
    "callback": "function () {\n    return this._password;\n}",
    "receiverBase": "set",
    "receiverCallee": "get"
  },
  {
    "callback": "function () {\n    return {\n        'name': this.name,\n        'role': this.role\n    };\n}",
    "receiverBase": "virtual",
    "receiverCallee": "get"
  },
  {
    "callback": "function () {\n    return {\n        '_id': this._id,\n        'role': this.role\n    };\n}",
    "receiverBase": "virtual",
    "receiverCallee": "get"
  },
  {
    "callback": "function (email) {\n    if (authTypes.indexOf(this.provider) !== -1)\n        return true;\n    return email.length;\n}",
    "receiverBase": "path",
    "receiverCallee": "validate"
  },
  {
    "callback": "function (hashedPassword) {\n    if (authTypes.indexOf(this.provider) !== -1)\n        return true;\n    return hashedPassword.length;\n}",
    "receiverBase": "path",
    "receiverCallee": "validate"
  },
  {
    "callback": "function (value, respond) {\n    var self = this;\n    this.constructor.findOne({ name: value }, function (err, user) {\n        if (err)\n            throw err;\n        if (user) {\n            if (self.id === user.id)\n                return respond(true);\n            return respond(false);\n        }\n        respond(true);\n    });\n}",
    "receiverBase": "path",
    "receiverCallee": "validate"
  },
  {
    "callback": "function (err, user) {\n    if (err)\n        throw err;\n    if (user) {\n        if (self.id === user.id)\n            return respond(true);\n        return respond(false);\n    }\n    respond(true);\n}",
    "receiverBase": "constructor",
    "receiverCallee": "findOne"
  },
  {
    "callback": "function (value, respond) {\n    var self = this;\n    this.constructor.findOne({ email: value }, function (err, user) {\n        if (err)\n            throw err;\n        if (user) {\n            if (self.id === user.id)\n                return respond(true);\n            return respond(false);\n        }\n        respond(true);\n    });\n}",
    "receiverBase": "path",
    "receiverCallee": "validate"
  },
  {
    "callback": "function (err, user) {\n    if (err)\n        throw err;\n    if (user) {\n        if (self.id === user.id)\n            return respond(true);\n        return respond(false);\n    }\n    respond(true);\n}",
    "receiverBase": "constructor",
    "receiverCallee": "findOne"
  },
  {
    "callback": "function (next) {\n    if (!this.isNew)\n        return next();\n    if (!validatePresenceOf(this.hashedPassword) && authTypes.indexOf(this.provider) === -1)\n        next(new Error('Invalid password'));\n    else\n        next();\n}",
    "receiverBase": "UserSchema",
    "receiverCallee": "pre"
  },
  {
    "callback": "function () {\n    simplify(points, 1, true);\n}",
    "receiverCallee": "add"
  },
  {
    "callback": "function () {\n    simplify(points, 1, false);\n}",
    "receiverBase": "add",
    "receiverCallee": "add"
  },
  {
    "callback": "function (event) {\n    console.log(String(event.target));\n}",
    "receiverBase": "add",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    var a = bod.offsetWidth + 1;\n    fn();\n}",
    "receiverBase": "",
    "receiverCallee": "$$rAF"
  },
  {
    "callback": "function () {\n    $rootScope.$$postDigest(function () {\n        rootAnimateState.running = false;\n    });\n}",
    "receiverBase": "$rootScope",
    "receiverCallee": "$$postDigest"
  },
  {
    "callback": "function () {\n    rootAnimateState.running = false;\n}",
    "receiverBase": "$rootScope",
    "receiverCallee": "$$postDigest"
  },
  {
    "callback": "function (animationFactory) {\n    var created = registerAnimation(animationFactory, animationEvent);\n    if (!created && isSetClassOperation) {\n        registerAnimation(animationFactory, 'addClass');\n        registerAnimation(animationFactory, 'removeClass');\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (animation) {\n    animation.fn && animations.push(animation);\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    beforeComplete = noop;\n    allCompleteFn();\n}",
    "receiverBase": "",
    "receiverCallee": "run"
  },
  {
    "callback": "function () {\n    afterComplete = noop;\n    allCompleteFn();\n}",
    "receiverBase": "",
    "receiverCallee": "run"
  },
  {
    "callback": "function (cancelFn) {\n    (cancelFn || noop)(true);\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (cancelFn) {\n    (cancelFn || noop)(true);\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    element = stripCommentsFromElement(element);\n    performAnimation('enter', 'ng-enter', element, parentElement, afterElement, noop, doneCallback);\n}",
    "receiverBase": "$rootScope",
    "receiverCallee": "$$postDigest"
  },
  {
    "callback": "function () {\n    performAnimation('leave', 'ng-leave', stripCommentsFromElement(element), null, null, function () {\n        $delegate.leave(element);\n    }, doneCallback);\n}",
    "receiverBase": "$rootScope",
    "receiverCallee": "$$postDigest"
  },
  {
    "callback": "function () {\n    $delegate.leave(element);\n}",
    "receiverBase": "",
    "receiverCallee": "performAnimation"
  },
  {
    "callback": "function () {\n    element = stripCommentsFromElement(element);\n    performAnimation('move', 'ng-move', element, parentElement, afterElement, noop, doneCallback);\n}",
    "receiverBase": "$rootScope",
    "receiverCallee": "$$postDigest"
  },
  {
    "callback": "function () {\n    $delegate.addClass(element, className);\n}",
    "receiverBase": "",
    "receiverCallee": "performAnimation"
  },
  {
    "callback": "function () {\n    $delegate.removeClass(element, className);\n}",
    "receiverBase": "",
    "receiverCallee": "performAnimation"
  },
  {
    "callback": "function () {\n    $delegate.setClass(element, add, remove);\n}",
    "receiverBase": "",
    "receiverCallee": "performAnimation"
  },
  {
    "callback": "function (operation) {\n    operation.cancel();\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (e) {\n    var element = angular.element(this);\n    var state = element.data(NG_ANIMATE_STATE);\n    if (state) {\n        var activeLeaveAnimation = state.active['ng-leave'];\n        if (activeLeaveAnimation) {\n            activeLeaveAnimation.cancel();\n            cleanup(element, 'ng-leave');\n        }\n    }\n}",
    "receiverBase": "element",
    "receiverCallee": "one"
  },
  {
    "callback": "function (cancelled) {\n    var data = element.data(NG_ANIMATE_STATE);\n    cancelled = cancelled || !data || !data.active[className] || runner.isClassBased && data.active[className].event != animationEvent;\n    fireDOMOperation();\n    if (cancelled === true) {\n        closeAnimation();\n    } else {\n        fireAfterCallbackAsync();\n        runner.after(closeAnimation);\n    }\n}",
    "receiverBase": "runner",
    "receiverCallee": "before"
  },
  {
    "callback": "function () {\n    element.triggerHandler(eventName, {\n        event: animationEvent,\n        className: className\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "$$asyncCallback"
  },
  {
    "callback": "function () {\n    doneCallback();\n}",
    "receiverBase": "",
    "receiverCallee": "$$asyncCallback"
  },
  {
    "callback": "function () {\n    var data = element.data(NG_ANIMATE_STATE) || {};\n    if (localAnimationCount == data.index) {\n        cleanup(element, className, animationEvent);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "$$asyncCallback"
  },
  {
    "callback": "function (element) {\n    element = angular.element(element);\n    var data = element.data(NG_ANIMATE_STATE);\n    if (data && data.active) {\n        forEach(data.active, function (runner) {\n            runner.cancel();\n        });\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (runner) {\n    runner.cancel();\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    forEach(animationReflowQueue, function (fn) {\n        fn();\n    });\n    animationReflowQueue = [];\n    cancelAnimationReflow = null;\n    lookupCache = {};\n}",
    "receiverBase": "",
    "receiverCallee": "$$animateReflow"
  },
  {
    "callback": "function (fn) {\n    fn();\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    closeAllAnimations(animationElementQueue);\n    animationElementQueue = [];\n}",
    "receiverBase": "",
    "receiverCallee": "$timeout"
  },
  {
    "callback": "function (element) {\n    var elementData = element.data(NG_ANIMATE_CSS_DATA_KEY);\n    if (elementData) {\n        (elementData.closeAnimationFn || noop)();\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (value) {\n    maxValue = Math.max(parseFloat(value) || 0, maxValue);\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (klass, i) {\n    activeClassName += (i > 0 ? ' ' : '') + klass + '-active';\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (val, i) {\n    style += (i > 0 ? ',' : '') + (index * staggerDelay + parseInt(val, 10)) + 's';\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    cancel = animateAfter(animationEvent, element, className, animationComplete);\n}",
    "receiverBase": "",
    "receiverCallee": "afterReflow"
  },
  {
    "callback": "function (klass, i) {\n    if (klass && klass.length > 0) {\n        className += (i > 0 ? ' ' : '') + klass + suffix;\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (a, b) {\n    return a[0] - b[0] || b[1] - a[1];\n}",
    "receiverBase": "ranges",
    "receiverCallee": "sort"
  },
  {
    "callback": "function (ch) {\n    var cc = ch.charCodeAt(0);\n    return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n}",
    "receiverBase": "p",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (_this) {\n    return function () {\n        return _this.t = null;\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (resp) {\n    return $rootScope.$broadcast('auth:registration-email-success', params);\n}",
    "receiverBase": "post",
    "receiverCallee": "success"
  },
  {
    "callback": "function (resp) {\n    return $rootScope.$broadcast('auth:registration-email-error', resp);\n}",
    "receiverBase": "success",
    "receiverCallee": "error"
  },
  {
    "callback": "function (_this) {\n    return function (resp) {\n        var authData;\n        _this.setConfigName(opts.config);\n        authData = _this.getConfig(opts.config).handleLoginResponse(resp);\n        _this.handleValidAuth(authData);\n        return $rootScope.$broadcast('auth:login-success', _this.user);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function (resp) {\n        _this.rejectDfd({\n            reason: 'unauthorized',\n            errors: ['Invalid credentials']\n        });\n        return $rootScope.$broadcast('auth:login-error', resp);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (resp) {\n    return $rootScope.$broadcast('auth:password-reset-request-success', params);\n}",
    "receiverBase": "post",
    "receiverCallee": "success"
  },
  {
    "callback": "function (resp) {\n    return $rootScope.$broadcast('auth:password-reset-request-error', resp);\n}",
    "receiverBase": "success",
    "receiverCallee": "error"
  },
  {
    "callback": "function (_this) {\n    return function (resp) {\n        $rootScope.$broadcast('auth:password-change-success', resp);\n        return _this.mustResetPassword = false;\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (resp) {\n    return $rootScope.$broadcast('auth:password-change-error', resp);\n}",
    "receiverBase": "success",
    "receiverCallee": "error"
  },
  {
    "callback": "function (_this) {\n    return function (resp) {\n        angular.extend(_this.user, _this.getConfig().handleAccountUpdateResponse(resp));\n        return $rootScope.$broadcast('auth:account-update-success', resp);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (resp) {\n    return $rootScope.$broadcast('auth:account-update-error', resp);\n}",
    "receiverBase": "success",
    "receiverCallee": "error"
  },
  {
    "callback": "function (_this) {\n    return function (resp) {\n        _this.invalidateTokens();\n        return $rootScope.$broadcast('auth:account-destroy-success', resp);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (resp) {\n    return $rootScope.$broadcast('auth:account-destroy-error', resp);\n}",
    "receiverBase": "success",
    "receiverCallee": "error"
  },
  {
    "callback": "function (_this) {\n    return function () {\n        return _this.requestCredentials(authWindow);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function () {\n        _this.dfd = null;\n        if (!$rootScope.$$phase) {\n            return $rootScope.$digest();\n        }\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function (data) {\n        if (_this.firstTimeLogin) {\n            $rootScope.$broadcast('auth:email-confirmation-error', data);\n        }\n        if (_this.mustResetPassword) {\n            $rootScope.$broadcast('auth:password-reset-confirm-error', data);\n        }\n        $rootScope.$broadcast('auth:validation-error', data);\n        return _this.rejectDfd({\n            reason: 'unauthorized',\n            errors: data.errors\n        });\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function (resp) {\n        _this.invalidateTokens();\n        return $rootScope.$broadcast('auth:logout-success');\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function (resp) {\n        _this.invalidateTokens();\n        return $rootScope.$broadcast('auth:logout-error', resp);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function () {\n        return _this.dfd = null;\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (method) {\n    var _base;\n    if ((_base = $httpProvider.defaults.headers)[method] == null) {\n        _base[method] = {};\n    }\n    return $httpProvider.defaults.headers[method]['If-Modified-Since'] = '0';\n}",
    "receiverBase": "angular",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (root, factory) {\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        define(['exports'], factory);\n    } else if (typeof exports !== 'undefined') {\n        factory(exports);\n    } else {\n        factory(root.esprima = {});\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (whole, index) {\n    assert(index < args.length, 'Message reference must be in range');\n    return args[index];\n}",
    "receiverBase": "messageFormat",
    "receiverCallee": "replace"
  },
  {
    "callback": "function () {\n    var name, types = {};\n    if (typeof Object.create === 'function') {\n        types = Object.create(null);\n    }\n    for (name in Syntax) {\n        if (Syntax.hasOwnProperty(name)) {\n            types[name] = Syntax[name];\n        }\n    }\n    if (typeof Object.freeze === 'function') {\n        Object.freeze(types);\n    }\n    return types;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n}",
    "receiverBase": "",
    "receiverCallee": "$"
  },
  {
    "callback": "function () {\n    var node = new NumberNode('my_number').isGreaterThan(1);\n    assert.equal(node.validate(2), 2);\n    assert.throws(function () {\n        node.validate(1);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    node.validate(1);\n}",
    "receiverBase": "assert",
    "receiverCallee": "throws"
  },
  {
    "callback": "function () {\n    var node = new NumberNode('my_number').isGreaterOrEqualThan(1);\n    assert.equal(node.validate(1), 1);\n    assert.equal(node.validate(2), 2);\n    assert.throws(function () {\n        node.validate(0);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    node.validate(0);\n}",
    "receiverBase": "assert",
    "receiverCallee": "throws"
  },
  {
    "callback": "function () {\n    var node = new NumberNode('my_number').isLowerThan(2);\n    assert.equal(node.validate(1), 1);\n    assert.throws(function () {\n        node.validate(3);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    node.validate(3);\n}",
    "receiverBase": "assert",
    "receiverCallee": "throws"
  },
  {
    "callback": "function () {\n    var node = new NumberNode('my_number').isLowerOrEqualThan(1);\n    assert.equal(node.validate(1), 1);\n    assert.equal(node.validate(0), 0);\n    assert.throws(function () {\n        node.validate(2);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    node.validate(2);\n}",
    "receiverBase": "assert",
    "receiverCallee": "throws"
  },
  {
    "callback": "function () {\n    var node = new NumberNode('my_number').isEqualTo(1337);\n    assert.equal(node.validate(1337), 1337);\n    assert.throws(function () {\n        node.validate(1338);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    node.validate(1338);\n}",
    "receiverBase": "assert",
    "receiverCallee": "throws"
  },
  {
    "callback": "function clearWaypoints(waypoint) {\n    collection[waypoint] = false;\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    Y.later(100, this, this._createShim);\n}",
    "receiverBase": "Y",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (v, k) {\n    ret[ret.length] = k;\n}",
    "receiverBase": "Y",
    "receiverCallee": "each"
  },
  {
    "callback": "function (v, k) {\n    this._groups[v] = true;\n}",
    "receiverBase": "Y",
    "receiverCallee": "each"
  },
  {
    "callback": "function (v, k) {\n    this.publish(v, {\n        type: v,\n        emitFacade: true,\n        preventable: false,\n        bubbles: true,\n        queuable: false,\n        prefix: 'drop'\n    });\n}",
    "receiverBase": "Y",
    "receiverCallee": "each"
  },
  {
    "callback": "function (v, k) {\n    if (this._groups[v]) {\n        ret = true;\n        this._valid = true;\n    }\n}",
    "receiverBase": "Y",
    "receiverCallee": "each"
  },
  {
    "callback": "function (t) {\n    t.plan(3);\n    mr(common.port, function (s) {\n        exec('node ' + NPM_BIN + ' outdated --registry ' + common.registry + ' --color false underscore', { cwd: pkg }, function (err, stdout) {\n            t.ifError(err);\n            t.ok(stdout, stdout.length);\n            t.ok(!hasControlCodes(stdout));\n            s.close();\n        });\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function (s) {\n    exec('node ' + NPM_BIN + ' outdated --registry ' + common.registry + ' --color false underscore', { cwd: pkg }, function (err, stdout) {\n        t.ifError(err);\n        t.ok(stdout, stdout.length);\n        t.ok(!hasControlCodes(stdout));\n        s.close();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "mr"
  },
  {
    "callback": "function (err, stdout) {\n    t.ifError(err);\n    t.ok(stdout, stdout.length);\n    t.ok(!hasControlCodes(stdout));\n    s.close();\n}",
    "receiverBase": "",
    "receiverCallee": "exec"
  },
  {
    "callback": "function (t) {\n    rimraf.sync(pkg + '/cache');\n    t.end();\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  }
]