[
  {
    "callback": "function (NEJ, _k, _u, _t0, _p, _o, _f, _r) {\n    var _pro;\n    _p._$$AnimEaseInOut = _k._$klass();\n    _pro = _p._$$AnimEaseInOut._$extend(_t0._$$AnimBezier);\n    _pro.__reset = function (_options) {\n        _options = _u._$merge({}, _options);\n        _options.timing = 'easeinout';\n        this.__super(_options);\n    };\n    if (CMPT) {\n        NEJ.copy(NEJ.P('nej.ut'), _p);\n    }\n    return _p;\n}",
    "receiverBase": "NEJ",
    "receiverCallee": "define"
  },
  {
    "callback": "function () {\n    this.collection = new chorus.collections.KaggleColumnSet();\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    var models = this.collection.models;\n    expect(models[0].get('name')).toBe('Rank');\n    expect(models[1].get('name')).toBe('Number of Entered Competitions');\n    expect(models[2].get('name')).toBe('Past Competition Types');\n    expect(models[3].get('name')).toBe('Favorite Technique');\n    expect(models[4].get('name')).toBe('Favorite Software');\n    expect(models[5].get('name')).toBe('Location');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (s) {\n    var evt = s.getAttribute('event') || s.getAttribute('data-dojo-event'), func = parser._functionFromScript(s);\n    if (evt) {\n        propList[evt] = func;\n    } else {\n        connects.push(s);\n    }\n}",
    "receiverBase": "array",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (name) {\n    return lang.getObject(name);\n}",
    "receiverBase": "array",
    "receiverCallee": "map"
  },
  {
    "callback": "function (s) {\n    var evt = s.getAttribute('event') || s.getAttribute('data-dojo-event') || 'postscript', func = parser._functionFromScript(s);\n    connect.connect(wc.prototype, evt, func);\n}",
    "receiverBase": "array",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (a, b) {\n    return a == 'one' && b == 'two' && d3.interpolateNumber(1, 2);\n}",
    "receiverBase": "interpolators",
    "receiverCallee": "push"
  },
  {
    "callback": "function (app) {\n    app.registerService('identities', function ($http, $rootScope) {\n        var self = this;\n        self.getIdentities = function (cb) {\n            $http.get('/identities').success(function (data) {\n                self.identities = data;\n                cb();\n            });\n        };\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function ($http, $rootScope) {\n    var self = this;\n    self.getIdentities = function (cb) {\n        $http.get('/identities').success(function (data) {\n            self.identities = data;\n            cb();\n        });\n    };\n}",
    "receiverBase": "app",
    "receiverCallee": "registerService"
  },
  {
    "callback": "function (data) {\n    self.identities = data;\n    cb();\n}",
    "receiverBase": "get",
    "receiverCallee": "success"
  },
  {
    "callback": "function () {\n    XKit.extensions.find_inactives.start();\n}",
    "receiverBase": "$",
    "receiverCallee": "click"
  },
  {
    "callback": "function () {\n    $('body').css('overflow', 'auto');\n    XKit.window.close();\n}",
    "receiverBase": "$",
    "receiverCallee": "click"
  },
  {
    "callback": "function () {\n    window.open($(this).attr('data-url'));\n}",
    "receiverBase": "$",
    "receiverCallee": "click"
  },
  {
    "callback": "function () {\n    XKit.extensions.find_inactives.next_person();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    XKit.extensions.find_inactives.next_person();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    XKit.extensions.find_inactives.next_person();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    var username = $(this).find('.name').find('a').html();\n    if (XKit.extensions.find_inactives.people_list.indexOf(username) === -1) {\n        XKit.extensions.find_inactives.people_list.push(username);\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    XKit.extensions.find_inactives.next_page();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    XKit.extensions.find_inactives.next_person();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function noCache(req, res, next) {\n    if (req.url.indexOf('/scripts/') === 0) {\n        res.header('Cache-Control', 'no-cache, no-store, must-revalidate');\n        res.header('Pragma', 'no-cache');\n        res.header('Expires', 0);\n    }\n    next();\n}",
    "receiverBase": "app",
    "receiverCallee": "use"
  },
  {
    "callback": "function (data, name) {\n    data = _.extend({ pluginId: name }, data);\n    var plugin = loadPlugin(JSON.stringify(data), project);\n    if (plugin) {\n        if (plugin.definitions) {\n            defs.push(makeDef(plugin.definitions));\n        }\n        pluginOptions['' + plugin.id] = plugin.config || {};\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (server, id) {\n    killServer(id);\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (f) {\n    server.addFile(f);\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (f) {\n    server.delFile(f);\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (d) {\n    return d.name == fileName;\n}",
    "receiverBase": "_",
    "receiverCallee": "find"
  },
  {
    "callback": "function (error, data) {\n    if (error) {\n        throw error;\n    }\n    res = data;\n}",
    "receiverBase": "server",
    "receiverCallee": "request"
  },
  {
    "callback": "function () {\n}",
    "receiverBase": "ternServers",
    "receiverCallee": "request"
  },
  {
    "callback": "function (completion) {\n    return {\n        text: completion.name,\n        type: completion.type,\n        guess: !!res.guess\n    };\n}",
    "receiverBase": "_",
    "receiverCallee": "map"
  },
  {
    "callback": "function (event) {\n    event.preventDefault();\n    var $el = $(event.target).closest('a'), href = $el.attr('href');\n    $('.sg-main iframe').attr('src', href);\n}",
    "receiverBase": "$",
    "receiverCallee": "on"
  },
  {
    "callback": "function (event) {\n    event.preventDefault();\n    sizeMapping.F = window.innerWidth;\n    var $el = $(this), size = $el.attr('data-action-resize');\n    $('iframe')[0].style.width = sizeMapping[size];\n    $('.sg-current-width').html('' + sizeMapping[size]);\n    $('[data-action-resize]').removeClass('active');\n    $el.addClass('active');\n}",
    "receiverBase": "$",
    "receiverCallee": "on"
  },
  {
    "callback": "function (event) {\n    var iframe = $('iframe')[0];\n    if (iframe && iframe.contentDocument) {\n        $('.sg-tpl', iframe.contentDocument).toggleClass('hide');\n        $(event.target).toggleClass('active');\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "on"
  },
  {
    "callback": "function (atomic) {\n    var op = atomic[0];\n    var val = atomic[1];\n    operand(self, where, delta, data, val, op);\n}",
    "receiverBase": "$__getAtomics",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (mem) {\n    return isMongooseObject(mem) ? mem.toObject({ depopulate: 1 }) : mem;\n}",
    "receiverBase": "val",
    "receiverCallee": "map"
  },
  {
    "callback": "function (err) {\n    if (err) {\n        promise.error(err);\n        promise = self = self.$__.removing = where = options = null;\n        return;\n    }\n    self.emit('remove', self);\n    promise.complete(self);\n    promise = self = where = options = null;\n}",
    "receiverBase": "",
    "receiverCallee": "tick"
  },
  {
    "callback": "function validateOptions(a, b) {\n    a = utils.clone(a);\n    b = utils.clone(b);\n    delete a.toJSON;\n    delete a.toObject;\n    delete b.toJSON;\n    delete b.toObject;\n    if (!utils.deepEqual(a, b)) {\n        throw new Error('Discriminator options are not customizable (except toJSON & toObject)');\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (err) {\n    if (err)\n        return done(err);\n    create();\n}",
    "receiverBase": "",
    "receiverCallee": "tick"
  },
  {
    "callback": "function (arg, i) {\n    var doc = new self(arg);\n    docs[i] = doc;\n    doc.save(function (err) {\n        if (err)\n            return promise.error(err);\n        --count || promise.complete.apply(promise, docs);\n    });\n}",
    "receiverBase": "args",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (err) {\n    if (err)\n        return promise.error(err);\n    --count || promise.complete.apply(promise, docs);\n}",
    "receiverBase": "doc",
    "receiverCallee": "save"
  },
  {
    "callback": "function (err, ret, stats) {\n    if (err)\n        return promise.error(err);\n    if (ret.findOne && ret.mapReduce) {\n        var model = Model.compile('_mapreduce_' + ret.collectionName, Model.mapReduce.schema, ret.collectionName, self.db, self.base);\n        model._mapreduce = true;\n        return promise.fulfill(model, stats);\n    }\n    promise.fulfill(ret, stats);\n}",
    "receiverBase": "collection",
    "receiverCallee": "mapReduce"
  },
  {
    "callback": "function (err) {\n    if (err && !errSeen) {\n        errSeen = true;\n        return promise.error(err);\n    }\n    --count || promise.fulfill(res.results, res.stats);\n}",
    "receiverBase": "obj",
    "receiverCallee": "init"
  },
  {
    "callback": "function (err) {\n    if (err && !errSeen) {\n        errSeen = true;\n        return promise.error(err);\n    }\n    --count || !errSeen && promise.fulfill(res.results, res.stats);\n}",
    "receiverBase": "results",
    "receiverCallee": "init"
  },
  {
    "callback": "function () {\n    promise.resolve.apply(promise, args);\n}",
    "receiverBase": "process",
    "receiverCallee": "nextTick"
  },
  {
    "callback": "function (item) {\n    return undefined !== item;\n}",
    "receiverBase": "array",
    "receiverCallee": "flatten"
  },
  {
    "callback": "function (val) {\n    return valueFilter(val, options);\n}",
    "receiverBase": "utils",
    "receiverCallee": "setValue"
  },
  {
    "callback": "function (doc, i) {\n    rawIds[i] = doc;\n}",
    "receiverBase": "newOrder",
    "receiverCallee": "forEach"
  }
]