[
  {
    "callback": "function (header) {\n    xhr.setRequestHeader(header, options.header[header]);\n}",
    "receiverBase": "keys",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    return xhrModule;\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function (item) {\n    return new ko.protectedObservableItem(item);\n}",
    "receiverBase": "utils",
    "receiverCallee": "arrayMap"
  },
  {
    "callback": "function () {\n    paneDefault.popup(anchor.view('anchor'), SC.PICKER);\n}",
    "receiverBase": "SC",
    "receiverCallee": "run"
  },
  {
    "callback": "function () {\n    paneDefault.destroy();\n}",
    "receiverBase": "SC",
    "receiverCallee": "run"
  },
  {
    "callback": "function () {\n    lowAnchor.append();\n    paneDefault.popup(lowAnchor.get('layer'), SC.PICKER);\n}",
    "receiverBase": "SC",
    "receiverCallee": "run"
  },
  {
    "callback": "function () {\n    paneDefault.adjust('height', 300);\n}",
    "receiverBase": "SC",
    "receiverCallee": "run"
  },
  {
    "callback": "function () {\n    paneDefault.destroy();\n}",
    "receiverBase": "SC",
    "receiverCallee": "run"
  },
  {
    "callback": "function () {\n    paneMenu.popup(anchor.view('anchor'), SC.PICKER_MENU);\n}",
    "receiverBase": "SC",
    "receiverCallee": "run"
  },
  {
    "callback": "function () {\n    paneMenu.destroy();\n}",
    "receiverBase": "SC",
    "receiverCallee": "run"
  },
  {
    "callback": "function () {\n    paneFixed.popup(anchor.view('anchor'), SC.PICKER_FIXED);\n}",
    "receiverBase": "SC",
    "receiverCallee": "run"
  },
  {
    "callback": "function () {\n    paneFixed.destroy();\n}",
    "receiverBase": "SC",
    "receiverCallee": "run"
  },
  {
    "callback": "function () {\n    panePointer.popup(anchor.view('anchor'), SC.PICKER_POINTER, [\n        3,\n        0,\n        1,\n        2,\n        2\n    ]);\n}",
    "receiverBase": "SC",
    "receiverCallee": "run"
  },
  {
    "callback": "function () {\n    panePointer.destroy();\n}",
    "receiverBase": "SC",
    "receiverCallee": "run"
  },
  {
    "callback": "function () {\n    return requestAnimationFrame(tick);\n}",
    "receiverBase": "",
    "receiverCallee": "fn"
  },
  {
    "callback": "function () {\n    function AjaxMonitor() {\n        var _this = this;\n        this.elements = [];\n        intercept.on('request', function (_arg) {\n            var request;\n            request = _arg.request;\n            return _this.watch(request);\n        });\n    }\n    AjaxMonitor.prototype.watch = function (request) {\n        var tracker;\n        tracker = new RequestTracker(request);\n        return this.elements.push(tracker);\n    };\n    return AjaxMonitor;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_arg) {\n    var request;\n    request = _arg.request;\n    return _this.watch(request);\n}",
    "receiverBase": "intercept",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    return _this.check();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    var diff;\n    diff = now() - last - 50;\n    last = now();\n    avg = avg + (diff - avg) / 15;\n    if (points++ > options.eventLag.minSamples && Math.abs(avg) < 3) {\n        avg = 0;\n    }\n    return _this.progress = 100 * (3 / (avg + 3));\n}",
    "receiverBase": "",
    "receiverCallee": "setInterval"
  },
  {
    "callback": "function () {\n    return bar.finish();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    return Pace;\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function () {\n    Object.keys(testVectors).forEach(function (data) {\n        it('should checksum ' + JSON.stringify(data) + ' correctly', function () {\n            assert.equal(jsHashes.CRC32(data), testVectors[data]);\n        });\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "describe"
  },
  {
    "callback": "function (data) {\n    it('should checksum ' + JSON.stringify(data) + ' correctly', function () {\n        assert.equal(jsHashes.CRC32(data), testVectors[data]);\n    });\n}",
    "receiverBase": "keys",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    assert.equal(jsHashes.CRC32(data), testVectors[data]);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n}",
    "receiverBase": "compiler",
    "receiverCallee": "run"
  },
  {
    "callback": "function (error, index) {\n    karmakWebpack._error('...');\n    karmakWebpack._error(index + 1 + ': ' + error.message);\n    karmakWebpack._error('Module: ' + error.module.userRequest);\n    karmakWebpack._error('\\n' + error.details);\n}",
    "receiverBase": "errors",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    ResponsiveFlowLayoutRenderer.render = function (oRm, oControl) {\n        oRm.write('<div');\n        oRm.writeControlData(oControl);\n        oRm.addClass('sapUiRFL');\n        oRm.writeClasses();\n        var sRole = oControl._getAccessibleRole();\n        var mAriaProps;\n        if (sRole) {\n            mAriaProps = { role: sRole };\n        }\n        oRm.writeAccessibilityState(oControl, mAriaProps);\n        oRm.write('>');\n        oRm.write('</div>');\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (character) {\n    return HTML_ENTITIES[character];\n}",
    "receiverBase": "text",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (match, name) {\n    var newRegex = twttr.txt.regexen[name] || '';\n    if (typeof newRegex !== 'string') {\n        newRegex = newRegex.source;\n    }\n    return newRegex;\n}",
    "receiverBase": "regex",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (match, name) {\n    return values[name] || '';\n}",
    "receiverBase": "str",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (index, value) {\n    v[index] = twttr.txt.htmlEscape(value);\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function (a, b) {\n    return a.indices[0] - b.indices[0];\n}",
    "receiverBase": "entities",
    "receiverCallee": "sort"
  },
  {
    "callback": "function (asciiDomain) {\n    var asciiStartPosition = domain.indexOf(asciiDomain, asciiEndPosition);\n    asciiEndPosition = asciiStartPosition + asciiDomain.length;\n    lastUrl = {\n        url: asciiDomain,\n        indices: [\n            startPosition + asciiStartPosition,\n            startPosition + asciiEndPosition\n        ]\n    };\n    lastUrlInvalidMatch = asciiDomain.match(twttr.txt.regexen.invalidShortDomain);\n    if (!lastUrlInvalidMatch) {\n        urls.push(lastUrl);\n    }\n}",
    "receiverBase": "domain",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (match, before, hash, hashText, offset, chunk) {\n    var after = chunk.slice(offset + match.length);\n    if (after.match(twttr.txt.regexen.endHashtagMatch))\n        return;\n    var startPosition = text.indexOf(hash + hashText, position);\n    position = startPosition + hashText.length + 1;\n    tags.push({\n        hashtag: hashText,\n        indices: [\n            startPosition,\n            position\n        ]\n    });\n}",
    "receiverBase": "text",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (a, b) {\n    return a.indices[0] - b.indices[0];\n}",
    "receiverBase": "entities",
    "receiverCallee": "sort"
  },
  {
    "callback": "function () {\n    enchant();\n    if (enchant.nineleap !== undefined) {\n        if (enchant.nineleap.memory !== undefined && Object.getPrototypeOf(enchant.nineleap.memory) === Object.prototype) {\n            parentModule = enchant.nineleap.memory;\n        } else if (enchant.nineleap !== undefined && Object.getPrototypeOf(enchant.nineleap) === Object.prototype) {\n            parentModule = enchant.nineleap;\n        }\n    } else {\n        parentModule = enchant;\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (e) {\n    if (!this.currentScene3D) {\n        return;\n    }\n    var nodes = this.currentScene3D.childNodes.slice();\n    var push = Array.prototype.push;\n    while (nodes.length) {\n        var node = nodes.pop();\n        node.dispatchEvent(e);\n        node.age++;\n        if (node.childNodes) {\n            push.apply(nodes, node.childNodes);\n        }\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function (time) {\n    this._actualFps = 1000 / time.elapsed;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function (e) {\n    var scene = core.currentScene3D;\n    var x = parseInt(e.x, 10);\n    var y = parseInt(this.height - e.y, 10);\n    that.detectFrameBuffer.bind();\n    scene._draw('detect');\n    gl.readPixels(x, y, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, color);\n    sprite = that.detectColorManager.getSpriteByColor(color);\n    if (sprite) {\n        touching = sprite;\n        touching.dispatchEvent(e);\n    }\n    that.detectFrameBuffer.unbind();\n}",
    "receiverBase": "detect",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function (e) {\n    if (touching !== null) {\n        touching.dispatchEvent(e);\n    }\n}",
    "receiverBase": "detect",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function (e) {\n    if (touching !== null) {\n        touching.dispatchEvent(e);\n    }\n    touching = null;\n}",
    "receiverBase": "detect",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function (n) {\n    color[color.length] = ('0x' + n - 0) / 255;\n}",
    "receiverBase": "match",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (n) {\n    color[color.length] = parseInt(n, 10) / 255;\n}",
    "receiverBase": "match",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (n) {\n    color[color.length] = parseInt(n, 10) / 255;\n}",
    "receiverBase": "match",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (loc) {\n    return function (buf) {\n        gl.enableVertexAttribArray(loc);\n        buf._setToAttrib(loc);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (loc, suffix) {\n    return function (value) {\n        gl['uniformMatrix' + suffix](loc, false, value);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (loc, suffix, samplersNum) {\n    return function (texture) {\n        gl.activeTexture(gl.TEXTURE0 + samplersNum);\n        gl.bindTexture(gl.TEXTURE_2D, texture._glTexture);\n        gl['uniform' + suffix](loc, samplersNum);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (loc, suffix) {\n    return function (value) {\n        gl['uniform' + suffix](loc, value);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (prop) {\n    Object.defineProperty(enchant.gl.DirectionalLight.prototype, prop, {\n        get: function () {\n            return this['_' + prop];\n        },\n        set: function (n) {\n            this['_' + prop] = n;\n            this._changedDirection = true;\n        }\n    });\n    enchant.gl.DirectionalLight.prototype[prop] = 0;\n}",
    "receiverBase": "split",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (prop) {\n    Object.defineProperty(enchant.gl.PointLight.prototype, prop, {\n        get: function () {\n            return this['_' + prop];\n        },\n        set: function (n) {\n            this['_' + prop] = n;\n            this._changedPosition = true;\n        }\n    });\n    enchant.gl.PointLight.prototype[prop] = 0;\n}",
    "receiverBase": "split",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (that) {\n    return function () {\n        that._glTexture = core.GL.textureManager.getWebGLTexture(that._image, that._flipY, that._wrap, that._mipmap);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (prop) {\n    Object.defineProperty(enchant.gl.Mesh.prototype, prop, {\n        get: function () {\n            return this['_' + prop]._array;\n        },\n        set: function (array) {\n            this['_' + prop]._array = array;\n            if (this._appear) {\n                this['_' + prop]._bufferData();\n            }\n        }\n    });\n}",
    "receiverBase": "split",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (prop) {\n    Object.defineProperty(enchant.gl.Sprite3D.prototype, prop, {\n        get: function () {\n            return this['_' + prop];\n        },\n        set: function (n) {\n            this['_' + prop] = n;\n            this._changedTranslation = true;\n        }\n    });\n}",
    "receiverBase": "split",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (prop) {\n    Object.defineProperty(enchant.gl.Sprite3D.prototype, prop, {\n        get: function () {\n            return this['_' + prop];\n        },\n        set: function (scale) {\n            this['_' + prop] = scale;\n            this._changedScale = true;\n        }\n    });\n}",
    "receiverBase": "split",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (prop) {\n    Object.defineProperty(enchant.gl.Camera3D.prototype, prop, {\n        get: function () {\n            return this['_' + prop];\n        },\n        set: function (n) {\n            this['_' + prop] = n;\n            this._changedPosition = true;\n        }\n    });\n}",
    "receiverBase": "split",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (prop) {\n    Object.defineProperty(enchant.gl.Camera3D.prototype, prop, {\n        get: function () {\n            return this['_' + prop];\n        },\n        set: function (n) {\n            this['_' + prop] = n;\n            this._changedCenter = true;\n        }\n    });\n}",
    "receiverBase": "split",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (prop) {\n    Object.defineProperty(enchant.gl.Camera3D.prototype, prop, {\n        get: function () {\n            return this['_' + prop];\n        },\n        set: function (n) {\n            this['_' + prop] = n;\n            this._changedUpVector = true;\n        }\n    });\n}",
    "receiverBase": "split",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (a, b) {\n    return a - b;\n}",
    "receiverBase": "_frames",
    "receiverCallee": "sort"
  },
  {
    "callback": "function () {\n    $('<div class=\"ui-draggable-iframeFix\" style=\"background: #fff;\"></div>').css({\n        width: this.offsetWidth + 'px',\n        height: this.offsetHeight + 'px',\n        position: 'absolute',\n        opacity: '0.001',\n        zIndex: 1000\n    }).css($(this).offset()).appendTo('body');\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    if (self._trigger('stop', event) !== false) {\n        self._clear();\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "animate"
  },
  {
    "callback": "function () {\n    this.parentNode.removeChild(this);\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    if (this == event.target)\n        handle = true;\n}",
    "receiverBase": "andSelf",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var sortable = $.data(this, 'sortable');\n    if (sortable && !sortable.options.disabled) {\n        inst.sortables.push({\n            instance: sortable,\n            shouldRevert: sortable.options.revert\n        });\n        sortable.refreshPositions();\n        sortable._trigger('activate', event, uiSortable);\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var $t = $(this);\n    var $o = $t.offset();\n    if (this != i.element[0])\n        i.snapElements.push({\n            item: this,\n            width: $t.outerWidth(),\n            height: $t.outerHeight(),\n            top: $o.top,\n            left: $o.left\n        });\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function (a, b) {\n    return (parseInt($(a).css('zIndex'), 10) || 0) - (parseInt($(b).css('zIndex'), 10) || 0);\n}",
    "receiverBase": "makeArray",
    "receiverCallee": "sort"
  },
  {
    "callback": "function (i) {\n    this.style.zIndex = min + i;\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    return gulp.src('src/imagelightbox.css').pipe(csslint('.csslintrc')).pipe(csslint.reporter());\n}",
    "receiverBase": "gulp",
    "receiverCallee": "task"
  },
  {
    "callback": "function () {\n    return gulp.src('src/imagelightbox.css').pipe(autoprefixer({\n        browsers: [\n            'last 2 versions',\n            'ie >= 7',\n            'Firefox ESR',\n            'Android >= 2.3'\n        ],\n        cascade: false\n    })).pipe(minifyCSS()).pipe(rename('imagelightbox.min.css')).pipe(gulp.dest('dist/'));\n}",
    "receiverBase": "gulp",
    "receiverCallee": "task"
  },
  {
    "callback": "function () {\n    return gulp.src('src/imagelightbox.js').pipe(jshint()).pipe(jshint.reporter(stylish));\n}",
    "receiverBase": "gulp",
    "receiverCallee": "task"
  },
  {
    "callback": "function () {\n    return gulp.src('src/imagelightbox.js').pipe(uglify()).pipe(rename('imagelightbox.min.js')).pipe(gulp.dest('dist/'));\n}",
    "receiverBase": "gulp",
    "receiverCallee": "task"
  },
  {
    "callback": "function () {\n    mockery.enable({\n        useCleanCache: true,\n        warnOnUnregistered: false,\n        warnOnReplace: false\n    });\n    mockDom = null;\n    jsdom = {\n        env: sinon.spy(function (opts) {\n            if (opts.done) {\n                opts.done(null, mockDom);\n            }\n        })\n    };\n    mockery.registerMock('jsdom', jsdom);\n    async = require('async');\n    pkg = require('../package.json');\n    truffler = require('../lib/truffler');\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function (opts) {\n    if (opts.done) {\n        opts.done(null, mockDom);\n    }\n}",
    "receiverBase": "sinon",
    "receiverCallee": "spy"
  },
  {
    "callback": "function () {\n    mockery.deregisterAll();\n    mockery.disable();\n}",
    "receiverBase": "",
    "receiverCallee": "afterEach"
  },
  {
    "callback": "function () {\n    assert.isObject(truffler);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    assert.isFunction(truffler.init);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    assert.isFunction(truffler.init());\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var test = truffler.init();\n    var msg = 'context argument must be a string';\n    var fn = function () {\n    };\n    assert.throws(test.bind(null, null, fn), msg);\n    assert.throws(test.bind(null, 1, fn), msg);\n    assert.throws(test.bind(null, {}, fn), msg);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var test = truffler.init();\n    var msg = 'done argument must be a function';\n    assert.throws(test.bind(null, '', null), msg);\n    assert.throws(test.bind(null, '', 1), msg);\n    assert.throws(test.bind(null, '', {}), msg);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (done) {\n    var test = truffler.init();\n    test('foo', done);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (done) {\n    var test = truffler.init();\n    test('http://foo/', function () {\n        assert.strictEqual(jsdom.env.getCall(0).args[0].url, 'http://foo/');\n        done();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    assert.strictEqual(jsdom.env.getCall(0).args[0].url, 'http://foo/');\n    done();\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function (done) {\n    var test = truffler.init();\n    test('foo', function () {\n        assert.strictEqual(jsdom.env.callCount, 1);\n        assert.strictEqual(jsdom.env.getCall(0).args[0].html, 'foo');\n        done();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    assert.strictEqual(jsdom.env.callCount, 1);\n    assert.strictEqual(jsdom.env.getCall(0).args[0].html, 'foo');\n    done();\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function (done) {\n    var test = truffler.init();\n    test('', function () {\n        assert.strictEqual(jsdom.env.getCall(0).args[0].html, '<!-- -->');\n        done();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    assert.strictEqual(jsdom.env.getCall(0).args[0].html, '<!-- -->');\n    done();\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    assert.isTrue(test1.withArgs(mockDom).calledOnce);\n    assert.isFunction(test1.getCall(0).args[1]);\n    assert.isFunction(test1.getCall(0).args[2]);\n    assert.isTrue(test2.withArgs(mockDom).calledOnce);\n    assert.isFunction(test2.getCall(0).args[1]);\n    assert.isFunction(test2.getCall(0).args[2]);\n    done();\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function (err, results) {\n    assert.deepEqual(results, [\n        'foo',\n        'bar',\n        'baz'\n    ]);\n    done();\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function (done) {\n    var error = new Error('oops');\n    var test1 = function (dom, report, done) {\n        done(error);\n    };\n    var test = truffler.init([test1]);\n    test('foo', function (err) {\n        assert.strictEqual(err, error);\n        done();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (err) {\n    assert.strictEqual(err, error);\n    done();\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function (done) {\n    var error = new Error('oops');\n    var test1 = function () {\n        throw error;\n    };\n    var test = truffler.init([test1]);\n    test('foo', function (err) {\n        assert.strictEqual(err, error);\n        done();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (err) {\n    assert.strictEqual(err, error);\n    done();\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function (done) {\n    var test = truffler.init();\n    test('http://foo/', function () {\n        assert.deepEqual(jsdom.env.getCall(0).args[0].scripts, []);\n        done();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    assert.deepEqual(jsdom.env.getCall(0).args[0].scripts, []);\n    done();\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function (done) {\n    var test = truffler.init([], {\n            scripts: [\n                'foo',\n                'bar'\n            ]\n        });\n    test('http://foo/', function () {\n        assert.deepEqual(jsdom.env.getCall(0).args[0].scripts, [\n            'foo',\n            'bar'\n        ]);\n        done();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    assert.deepEqual(jsdom.env.getCall(0).args[0].scripts, [\n        'foo',\n        'bar'\n    ]);\n    done();\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function (done) {\n    var test = truffler.init();\n    sinon.spy(async, 'parallelLimit');\n    test('foo', function () {\n        assert.strictEqual(async.parallelLimit.callCount, 1, 'function was called');\n        assert.strictEqual(async.parallelLimit.getCall(0).args[1], 10, 'has correct default concurrency');\n        async.parallelLimit.restore();\n        done();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    assert.strictEqual(async.parallelLimit.callCount, 1, 'function was called');\n    assert.strictEqual(async.parallelLimit.getCall(0).args[1], 10, 'has correct default concurrency');\n    async.parallelLimit.restore();\n    done();\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function (done) {\n    var test = truffler.init([], { concurrency: 20 });\n    sinon.spy(async, 'parallelLimit');\n    test('foo', function () {\n        assert.strictEqual(async.parallelLimit.getCall(0).args[1], 20);\n        async.parallelLimit.restore();\n        done();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    assert.strictEqual(async.parallelLimit.getCall(0).args[1], 20);\n    async.parallelLimit.restore();\n    done();\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function (done) {\n    var test = truffler.init();\n    test('http://foo/', function () {\n        assert.deepEqual(jsdom.env.getCall(0).args[0].headers['User-Agent'], pkg.name + '/' + pkg.version);\n        done();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    assert.deepEqual(jsdom.env.getCall(0).args[0].headers['User-Agent'], pkg.name + '/' + pkg.version);\n    done();\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function (done) {\n    var test = truffler.init([], { useragent: 'foo' });\n    test('http://foo/', function () {\n        assert.deepEqual(jsdom.env.getCall(0).args[0].headers['User-Agent'], 'foo');\n        done();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    assert.deepEqual(jsdom.env.getCall(0).args[0].headers['User-Agent'], 'foo');\n    done();\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function (e) {\n    console.error('Error: ' + e);\n}",
    "receiverBase": "process",
    "receiverCallee": "on"
  },
  {
    "callback": "function (req, res) {\n    res.sendfile(__dirname + '/public/wetty/index.html');\n}",
    "receiverBase": "app",
    "receiverCallee": "get"
  },
  {
    "callback": "function () {\n    console.log('https on port ' + opts.port);\n}",
    "receiverBase": "createServer",
    "receiverCallee": "listen"
  },
  {
    "callback": "function () {\n    console.log('http on port ' + opts.port);\n}",
    "receiverBase": "createServer",
    "receiverCallee": "listen"
  },
  {
    "callback": "function (data) {\n    conn.send(JSON.stringify({ data: data }));\n}",
    "receiverBase": "term",
    "receiverCallee": "on"
  },
  {
    "callback": "function (code) {\n    console.log(new Date() + ' PID=' + term.pid + ' ENDED');\n}",
    "receiverBase": "term",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    term.end();\n}",
    "receiverBase": "conn",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    term.end();\n}",
    "receiverBase": "conn",
    "receiverCallee": "on"
  }
]