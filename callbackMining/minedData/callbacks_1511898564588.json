[
  {
    "callback": "function () {\n    if (!parent.isDisposed) {\n        parent.isDisposed = true;\n        parent.disposable.dispose();\n    }\n}",
    "receiverBase": "scheduler",
    "receiverCallee": "schedule"
  },
  {
    "callback": "function (state2) {\n    var isAdded = false, isDone = false, d = scheduler.scheduleWithState(state2, function (scheduler1, state3) {\n            if (isAdded) {\n                group.remove(d);\n            } else {\n                isDone = true;\n            }\n            recursiveAction(state3);\n            return disposableEmpty;\n        });\n    if (!isDone) {\n        group.add(d);\n        isAdded = true;\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "action"
  },
  {
    "callback": "function (scheduler1, state3) {\n    if (isAdded) {\n        group.remove(d);\n    } else {\n        isDone = true;\n    }\n    recursiveAction(state3);\n    return disposableEmpty;\n}",
    "receiverBase": "scheduler",
    "receiverCallee": "scheduleWithState"
  },
  {
    "callback": "function (state2, dueTime1) {\n    var isAdded = false, isDone = false, d = scheduler[method].call(scheduler, state2, dueTime1, function (scheduler1, state3) {\n            if (isAdded) {\n                group.remove(d);\n            } else {\n                isDone = true;\n            }\n            recursiveAction(state3);\n            return disposableEmpty;\n        });\n    if (!isDone) {\n        group.add(d);\n        isAdded = true;\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "action"
  },
  {
    "callback": "function (scheduler1, state3) {\n    if (isAdded) {\n        group.remove(d);\n    } else {\n        isDone = true;\n    }\n    recursiveAction(state3);\n    return disposableEmpty;\n}",
    "receiverBase": "scheduler",
    "receiverCallee": "call"
  },
  {
    "callback": "function () {\n    action();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "schedulePeriodicWithState"
  },
  {
    "callback": "function () {\n    s = action(s);\n}",
    "receiverBase": "window",
    "receiverCallee": "setInterval"
  },
  {
    "callback": "function () {\n    window.clearInterval(id);\n}",
    "receiverBase": "",
    "receiverCallee": "disposableCreate"
  },
  {
    "callback": "function (_action, self) {\n    _action(function () {\n        self(_action);\n    });\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "scheduleRecursiveWithState"
  },
  {
    "callback": "function () {\n    self(_action);\n}",
    "receiverBase": "",
    "receiverCallee": "_action"
  },
  {
    "callback": "function (s, p) {\n    return invokeRecImmediate(s, p);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "scheduleWithState"
  },
  {
    "callback": "function (_action, self) {\n    _action(function (dt) {\n        self(_action, dt);\n    });\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "scheduleRecursiveWithRelativeAndState"
  },
  {
    "callback": "function (dt) {\n    self(_action, dt);\n}",
    "receiverBase": "",
    "receiverCallee": "_action"
  },
  {
    "callback": "function (s, p) {\n    return invokeRecDate(s, p, 'scheduleWithRelativeAndState');\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "_scheduleRelative"
  },
  {
    "callback": "function (_action, self) {\n    _action(function (dt) {\n        self(_action, dt);\n    });\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "scheduleRecursiveWithAbsoluteAndState"
  },
  {
    "callback": "function (dt) {\n    self(_action, dt);\n}",
    "receiverBase": "",
    "receiverCallee": "_action"
  },
  {
    "callback": "function (s, p) {\n    return invokeRecDate(s, p, 'scheduleWithAbsoluteAndState');\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "_scheduleAbsolute"
  },
  {
    "callback": "function () {\n    if (!disposable.isDisposed) {\n        disposable.setDisposable(action(scheduler, state));\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "scheduleMethod"
  },
  {
    "callback": "function () {\n    clearMethod(id);\n}",
    "receiverBase": "",
    "receiverCallee": "disposableCreate"
  },
  {
    "callback": "function () {\n    if (!disposable.isDisposed) {\n        disposable.setDisposable(action(scheduler, state));\n    }\n}",
    "receiverBase": "window",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    window.clearTimeout(id);\n}",
    "receiverBase": "",
    "receiverCallee": "disposableCreate"
  },
  {
    "callback": "function (state1) {\n    if (failed) {\n        return null;\n    }\n    try {\n        return action(state1);\n    } catch (e) {\n        failed = true;\n        if (!self._handler(e)) {\n            throw e;\n        }\n        d.dispose();\n        return null;\n    }\n}",
    "receiverBase": "_scheduler",
    "receiverCallee": "schedulePeriodicWithState"
  },
  {
    "callback": "function () {\n    notification._acceptObservable(observer);\n    if (notification.kind === 'N') {\n        observer.onCompleted();\n    }\n}",
    "receiverBase": "scheduler",
    "receiverCallee": "schedule"
  },
  {
    "callback": "function () {\n    self();\n}",
    "receiverBase": "current",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    isDisposed = true;\n    e.dispose();\n}",
    "receiverBase": "",
    "receiverCallee": "disposableCreate"
  },
  {
    "callback": "function (exn) {\n    lastException = exn;\n    self();\n}",
    "receiverBase": "current",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    isDisposed = true;\n}",
    "receiverBase": "",
    "receiverCallee": "disposableCreate"
  },
  {
    "callback": "function () {\n    if (left === 0) {\n        return false;\n    }\n    if (left > 0) {\n        left--;\n    }\n    current = value;\n    return true;\n}",
    "receiverBase": "",
    "receiverCallee": "enumeratorCreate"
  },
  {
    "callback": "function () {\n    return current;\n}",
    "receiverBase": "",
    "receiverCallee": "enumeratorCreate"
  },
  {
    "callback": "function () {\n    if (++index < source.length) {\n        current = selector(source[index], index);\n        return true;\n    }\n    return false;\n}",
    "receiverBase": "",
    "receiverCallee": "enumeratorCreate"
  },
  {
    "callback": "function () {\n    return current;\n}",
    "receiverBase": "",
    "receiverCallee": "enumeratorCreate"
  },
  {
    "callback": "function () {\n    self.observer.onNext(value);\n}",
    "receiverBase": "queue",
    "receiverCallee": "push"
  },
  {
    "callback": "function () {\n    self.observer.onError(exception);\n}",
    "receiverBase": "queue",
    "receiverCallee": "push"
  },
  {
    "callback": "function () {\n    self.observer.onCompleted();\n}",
    "receiverBase": "queue",
    "receiverCallee": "push"
  },
  {
    "callback": "function (self) {\n    var work;\n    if (parent.queue.length > 0) {\n        work = parent.queue.shift();\n    } else {\n        parent.isAcquired = false;\n        return;\n    }\n    try {\n        work();\n    } catch (ex) {\n        parent.queue = [];\n        parent.hasFaulted = true;\n        throw ex;\n    }\n    self();\n}",
    "receiverBase": "scheduler",
    "receiverCallee": "scheduleRecursive"
  },
  {
    "callback": "function (x) {\n    hasValue = true;\n    value = x;\n}",
    "receiverBase": "source",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    if (!hasValue) {\n        observer.onError(new Error(sequenceContainsNoElements));\n    } else {\n        observer.onNext(value);\n        observer.onCompleted();\n    }\n}",
    "receiverBase": "source",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    var result;\n    try {\n        result = func.apply(context, args);\n    } catch (e) {\n        subject.onError(e);\n        return;\n    }\n    subject.onNext(result);\n    subject.onCompleted();\n}",
    "receiverBase": "scheduler",
    "receiverCallee": "schedule"
  },
  {
    "callback": "function () {\n    d.setDisposable(new ScheduledDisposable(scheduler, source.subscribe(observer)));\n}",
    "receiverBase": "scheduler",
    "receiverCallee": "schedule"
  },
  {
    "callback": "function () {\n    observer.onCompleted();\n}",
    "receiverBase": "scheduler",
    "receiverCallee": "schedule"
  },
  {
    "callback": "function (self) {\n    if (count < array.length) {\n        observer.onNext(array[count++]);\n        self();\n    } else {\n        observer.onCompleted();\n    }\n}",
    "receiverBase": "scheduler",
    "receiverCallee": "scheduleRecursive"
  },
  {
    "callback": "function (self) {\n    var hasResult, result;\n    try {\n        if (first) {\n            first = false;\n        } else {\n            state = iterate(state);\n        }\n        hasResult = condition(state);\n        if (hasResult) {\n            result = resultSelector(state);\n        }\n    } catch (exception) {\n        observer.onError(exception);\n        return;\n    }\n    if (hasResult) {\n        observer.onNext(result);\n        self();\n    } else {\n        observer.onCompleted();\n    }\n}",
    "receiverBase": "scheduler",
    "receiverCallee": "scheduleRecursive"
  },
  {
    "callback": "function (i, self) {\n    if (i < count) {\n        observer.onNext(start + i);\n        self(i + 1);\n    } else {\n        observer.onCompleted();\n    }\n}",
    "receiverBase": "scheduler",
    "receiverCallee": "scheduleRecursiveWithState"
  },
  {
    "callback": "function () {\n    observer.onNext(value);\n    observer.onCompleted();\n}",
    "receiverBase": "scheduler",
    "receiverCallee": "schedule"
  },
  {
    "callback": "function () {\n    observer.onError(exception);\n}",
    "receiverBase": "scheduler",
    "receiverCallee": "schedule"
  },
  {
    "callback": "function (left) {\n    choiceL();\n    if (choice === leftChoice) {\n        observer.onNext(left);\n    }\n}",
    "receiverBase": "leftSource",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (err) {\n    choiceL();\n    if (choice === leftChoice) {\n        observer.onError(err);\n    }\n}",
    "receiverBase": "leftSource",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    choiceL();\n    if (choice === leftChoice) {\n        observer.onCompleted();\n    }\n}",
    "receiverBase": "leftSource",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (right) {\n    choiceR();\n    if (choice === rightChoice) {\n        observer.onNext(right);\n    }\n}",
    "receiverBase": "rightSource",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (err) {\n    choiceR();\n    if (choice === rightChoice) {\n        observer.onError(err);\n    }\n}",
    "receiverBase": "rightSource",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    choiceR();\n    if (choice === rightChoice) {\n        observer.onCompleted();\n    }\n}",
    "receiverBase": "rightSource",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (exception) {\n    var d, result;\n    try {\n        result = handler(exception);\n    } catch (ex) {\n        observer.onError(ex);\n        return;\n    }\n    d = new SingleAssignmentDisposable();\n    subscription.setDisposable(d);\n    d.setDisposable(result.subscribe(observer));\n}",
    "receiverBase": "source",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (x) {\n    return x;\n}",
    "receiverBase": "hasValue",
    "receiverCallee": "every"
  },
  {
    "callback": "function (x, j) {\n    return j !== i;\n}",
    "receiverBase": "isDone",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (x) {\n    return x;\n}",
    "receiverBase": "filter",
    "receiverCallee": "every"
  },
  {
    "callback": "function (x) {\n    return x;\n}",
    "receiverBase": "isDone",
    "receiverCallee": "every"
  },
  {
    "callback": "function (i) {\n    subscriptions[i] = new SingleAssignmentDisposable();\n    subscriptions[i].setDisposable(args[i].subscribe(function (x) {\n        values[i] = x;\n        next(i);\n    }, observer.onError.bind(observer), function () {\n        done(i);\n    }));\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (x) {\n    values[i] = x;\n    next(i);\n}",
    "receiverBase": "args",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    done(i);\n}",
    "receiverBase": "args",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    var s;\n    group.remove(subscription);\n    if (q.length > 0) {\n        s = q.shift();\n        subscribe(s);\n    } else {\n        activeCount--;\n        if (isStopped && activeCount === 0) {\n            observer.onCompleted();\n        }\n    }\n}",
    "receiverBase": "xs",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (innerSource) {\n    if (activeCount < maxConcurrentOrOther) {\n        activeCount++;\n        subscribe(innerSource);\n    } else {\n        q.push(innerSource);\n    }\n}",
    "receiverBase": "sources",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    isStopped = true;\n    if (activeCount === 0) {\n        observer.onCompleted();\n    }\n}",
    "receiverBase": "sources",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (innerSource) {\n    var innerSubscription = new SingleAssignmentDisposable();\n    group.add(innerSubscription);\n    innerSubscription.setDisposable(innerSource.subscribe(function (x) {\n        observer.onNext(x);\n    }, observer.onError.bind(observer), function () {\n        group.remove(innerSubscription);\n        if (isStopped && group.length === 1) {\n            observer.onCompleted();\n        }\n    }));\n}",
    "receiverBase": "sources",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (x) {\n    observer.onNext(x);\n}",
    "receiverBase": "innerSource",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    group.remove(innerSubscription);\n    if (isStopped && group.length === 1) {\n        observer.onCompleted();\n    }\n}",
    "receiverBase": "innerSource",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    isStopped = true;\n    if (group.length === 1) {\n        observer.onCompleted();\n    }\n}",
    "receiverBase": "sources",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (self) {\n    var current, d;\n    if (pos < sources.length) {\n        current = sources[pos++];\n        d = new SingleAssignmentDisposable();\n        subscription.setDisposable(d);\n        d.setDisposable(current.subscribe(observer.onNext.bind(observer), function () {\n            self();\n        }, function () {\n            self();\n        }));\n    } else {\n        observer.onCompleted();\n    }\n}",
    "receiverBase": "immediateScheduler",
    "receiverCallee": "scheduleRecursive"
  },
  {
    "callback": "function () {\n    self();\n}",
    "receiverBase": "current",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    self();\n}",
    "receiverBase": "current",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (left) {\n    if (isOpen) {\n        observer.onNext(left);\n    }\n}",
    "receiverBase": "source",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    if (isOpen) {\n        observer.onCompleted();\n    }\n}",
    "receiverBase": "source",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    isOpen = true;\n    rightSubscription.dispose();\n}",
    "receiverBase": "other",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    rightSubscription.dispose();\n}",
    "receiverBase": "other",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (x) {\n    if (latest === id) {\n        observer.onNext(x);\n    }\n}",
    "receiverBase": "innerSource",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (e) {\n    if (latest === id) {\n        observer.onError(e);\n    }\n}",
    "receiverBase": "innerSource",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    if (latest === id) {\n        hasLatest = false;\n        if (isStopped) {\n            observer.onCompleted();\n        }\n    }\n}",
    "receiverBase": "innerSource",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    isStopped = true;\n    if (!hasLatest) {\n        observer.onCompleted();\n    }\n}",
    "receiverBase": "sources",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (left) {\n    if (index < len) {\n        var right = second[index++], result;\n        try {\n            result = resultSelector(left, right);\n        } catch (e) {\n            observer.onError(e);\n            return;\n        }\n        observer.onNext(result);\n    } else {\n        observer.onCompleted();\n    }\n}",
    "receiverBase": "first",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    return [];\n}",
    "receiverBase": "",
    "receiverCallee": "arrayInitialize"
  },
  {
    "callback": "function () {\n    return false;\n}",
    "receiverBase": "",
    "receiverCallee": "arrayInitialize"
  },
  {
    "callback": "function (x) {\n    return x.length > 0;\n}",
    "receiverBase": "queues",
    "receiverCallee": "every"
  },
  {
    "callback": "function (x) {\n    return x.shift();\n}",
    "receiverBase": "queues",
    "receiverCallee": "map"
  },
  {
    "callback": "function (x, j) {\n    return j !== i;\n}",
    "receiverBase": "isDone",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (x) {\n    return x;\n}",
    "receiverBase": "filter",
    "receiverCallee": "every"
  },
  {
    "callback": "function (x) {\n    return x;\n}",
    "receiverBase": "isDone",
    "receiverCallee": "every"
  },
  {
    "callback": "function (i) {\n    subscriptions[i] = new SingleAssignmentDisposable();\n    subscriptions[i].setDisposable(sources[i].subscribe(function (x) {\n        queues[i].push(x);\n        next(i);\n    }, observer.onError.bind(observer), function () {\n        done(i);\n    }));\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (x) {\n    queues[i].push(x);\n    next(i);\n}",
    "receiverBase": "sources",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    done(i);\n}",
    "receiverBase": "sources",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (x) {\n    return x.toArray();\n}",
    "receiverBase": "windowWithCount",
    "receiverCallee": "selectMany"
  },
  {
    "callback": "function (x) {\n    return x.length > 0;\n}",
    "receiverBase": "selectMany",
    "receiverCallee": "where"
  },
  {
    "callback": "function (x) {\n    return x.accept(observer);\n}",
    "receiverBase": "source",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (x) {\n    try {\n        onNextFunc(x);\n    } catch (e) {\n        observer.onError(e);\n    }\n    observer.onNext(x);\n}",
    "receiverBase": "source",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (exception) {\n    if (!onError) {\n        observer.onError(exception);\n    } else {\n        try {\n            onError(exception);\n        } catch (e) {\n            observer.onError(e);\n        }\n        observer.onError(exception);\n    }\n}",
    "receiverBase": "source",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    if (!onCompleted) {\n        observer.onCompleted();\n    } else {\n        try {\n            onCompleted();\n        } catch (e) {\n            observer.onError(e);\n        }\n        observer.onCompleted();\n    }\n}",
    "receiverBase": "source",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    try {\n        subscription.dispose();\n    } catch (e) {\n        throw e;\n    } finally {\n        action();\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "disposableCreate"
  },
  {
    "callback": "function (value) {\n    observer.onNext(notificationCreateOnNext(value));\n}",
    "receiverBase": "source",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (exception) {\n    observer.onNext(notificationCreateOnError(exception));\n    observer.onCompleted();\n}",
    "receiverBase": "source",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    observer.onNext(notificationCreateOnCompleted());\n    observer.onCompleted();\n}",
    "receiverBase": "source",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    var hasAccumulation = false, accumulation;\n    return source.select(function (x) {\n        if (hasAccumulation) {\n            accumulation = accumulator(accumulation, x);\n        } else {\n            accumulation = hasSeed ? accumulator(seed, x) : x;\n            hasAccumulation = true;\n        }\n        return accumulation;\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "observableDefer"
  },
  {
    "callback": "function (x) {\n    if (hasAccumulation) {\n        accumulation = accumulator(accumulation, x);\n    } else {\n        accumulation = hasSeed ? accumulator(seed, x) : x;\n        hasAccumulation = true;\n    }\n    return accumulation;\n}",
    "receiverBase": "source",
    "receiverCallee": "select"
  },
  {
    "callback": "function (x) {\n    q.push(x);\n    if (q.length > count) {\n        observer.onNext(q.shift());\n    }\n}",
    "receiverBase": "source",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (xs) {\n    return observableFromArray(xs, scheduler);\n}",
    "receiverBase": "takeLastBuffer",
    "receiverCallee": "selectMany"
  },
  {
    "callback": "function (x) {\n    q.push(x);\n    if (q.length > count) {\n        q.shift();\n    }\n}",
    "receiverBase": "source",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    observer.onNext(q);\n    observer.onCompleted();\n}",
    "receiverBase": "source",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (x) {\n    var s;\n    for (var i = 0, len = q.length; i < len; i++) {\n        q[i].onNext(x);\n    }\n    var c = n - count + 1;\n    if (c >= 0 && c % skip === 0) {\n        s = q.shift();\n        s.onCompleted();\n    }\n    n++;\n    if (n % skip === 0) {\n        createWindow();\n    }\n}",
    "receiverBase": "source",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (exception) {\n    while (q.length > 0) {\n        q.shift().onError(exception);\n    }\n    observer.onError(exception);\n}",
    "receiverBase": "source",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    while (q.length > 0) {\n        q.shift().onCompleted();\n    }\n    observer.onCompleted();\n}",
    "receiverBase": "source",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (x) {\n    found = true;\n    observer.onNext(x);\n}",
    "receiverBase": "source",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    if (!found) {\n        observer.onNext(defaultValue);\n    }\n    observer.onCompleted();\n}",
    "receiverBase": "source",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (x) {\n    var key, serializedKey, otherKey, hasMatch = false;\n    try {\n        key = keySelector(x);\n        serializedKey = keySerializer(key);\n    } catch (exception) {\n        observer.onError(exception);\n        return;\n    }\n    for (otherKey in hashSet) {\n        if (serializedKey === otherKey) {\n            hasMatch = true;\n            break;\n        }\n    }\n    if (!hasMatch) {\n        hashSet[serializedKey] = null;\n        observer.onNext(x);\n    }\n}",
    "receiverBase": "source",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    return observableNever();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "groupByUntil"
  },
  {
    "callback": "function (exn) {\n    for (w in map) {\n        map[w].onError(exn);\n    }\n    observer.onError(exn);\n}",
    "receiverBase": "take",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    expire();\n}",
    "receiverBase": "take",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (ex) {\n    for (var w in map) {\n        map[w].onError(ex);\n    }\n    observer.onError(ex);\n}",
    "receiverBase": "source",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    for (var w in map) {\n        map[w].onCompleted();\n    }\n    observer.onCompleted();\n}",
    "receiverBase": "source",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (value) {\n    var result;\n    try {\n        result = selector.call(thisArg, value, count++, parent);\n    } catch (exception) {\n        observer.onError(exception);\n        return;\n    }\n    observer.onNext(result);\n}",
    "receiverBase": "parent",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (x) {\n    return selector(x).select(function (y) {\n        return resultSelector(x, y);\n    });\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "selectMany"
  },
  {
    "callback": "function (y) {\n    return resultSelector(x, y);\n}",
    "receiverBase": "selector",
    "receiverCallee": "select"
  },
  {
    "callback": "function () {\n    return selector;\n}",
    "receiverBase": "selectMany",
    "receiverCallee": "call"
  },
  {
    "callback": "function (x) {\n    if (remaining <= 0) {\n        observer.onNext(x);\n    } else {\n        remaining--;\n    }\n}",
    "receiverBase": "observable",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (x) {\n    if (!running) {\n        try {\n            running = !predicate(x, i++);\n        } catch (e) {\n            observer.onError(e);\n            return;\n        }\n    }\n    if (running) {\n        observer.onNext(x);\n    }\n}",
    "receiverBase": "source",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (x) {\n    if (remaining > 0) {\n        remaining--;\n        observer.onNext(x);\n        if (remaining === 0) {\n            observer.onCompleted();\n        }\n    }\n}",
    "receiverBase": "observable",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (x) {\n    if (running) {\n        try {\n            running = predicate(x, i++);\n        } catch (e) {\n            observer.onError(e);\n            return;\n        }\n        if (running) {\n            observer.onNext(x);\n        } else {\n            observer.onCompleted();\n        }\n    }\n}",
    "receiverBase": "observable",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (value) {\n    var shouldRun;\n    try {\n        shouldRun = predicate.call(thisArg, value, count++, parent);\n    } catch (exception) {\n        observer.onError(exception);\n        return;\n    }\n    if (shouldRun) {\n        observer.onNext(value);\n    }\n}",
    "receiverBase": "parent",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function () {\n    try {\n        autoDetachObserver.disposable(subscribe(autoDetachObserver));\n    } catch (e) {\n        if (!autoDetachObserver.fail(e)) {\n            throw e;\n        }\n    }\n}",
    "receiverBase": "currentThreadScheduler",
    "receiverCallee": "schedule"
  },
  {
    "callback": "function () {\n    return Rx;\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function () {\n    console.log('Finished!');\n}",
    "receiverBase": "callbacks",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    this.addMatchers({\n        toBeGreaterThanTwo: function (number) {\n            return !(number <= 2);\n        }\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function (e) {\n    var n = t[o][1][e];\n    return s(n ? n : e);\n}",
    "receiverBase": "t",
    "receiverCallee": "call"
  },
  {
    "callback": "function (x) {\n    try {\n        support.nonEnumArgs = !propertyIsEnumerable.call(arguments, 1);\n    } catch (e) {\n        support.nonEnumArgs = true;\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (value, key, collection) {\n    if (predicate(value, key, collection)) {\n        result = retKey ? key : value;\n        return false;\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "eachFunc"
  },
  {
    "callback": "function () {\n    return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);\n}",
    "receiverBase": "",
    "receiverCallee": "attempt"
  },
  {
    "callback": "function () {\n}",
    "receiverBase": "Mousetrap",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (factory) {\n    if (typeof define !== 'undefined' && define.amd) {\n        define([], factory);\n    } else if (typeof module !== 'undefined' && module.exports) {\n        module.exports = factory();\n    } else {\n        window.scrollMonitor = factory();\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (el) {\n    if (el) {\n        var value = parseInt(el.slice(0, 2)) || 0;\n        switch (el[el.length - 1]) {\n        case 'h':\n            value = value * 3600;\n            break;\n        case 'm':\n            value = value * 60;\n            break;\n        }\n        ;\n        return value;\n    }\n    return 0;\n}",
    "receiverBase": "elements",
    "receiverCallee": "map"
  },
  {
    "callback": "function (a, b) {\n    return a + b;\n}",
    "receiverBase": "map",
    "receiverCallee": "reduce"
  },
  {
    "callback": "function (plugin) {\n    return plugin.destroy();\n}",
    "receiverBase": "plugins",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (plugin) {\n    return plugin.name === name;\n}",
    "receiverBase": "",
    "receiverCallee": "find"
  },
  {
    "callback": "function (promise) {\n    promise.resolve(_this.options.sources.map(function (source) {\n        return _this.createContainer(source);\n    }));\n}",
    "receiverBase": "$",
    "receiverCallee": "Deferred"
  },
  {
    "callback": "function (source) {\n    return _this.createContainer(source);\n}",
    "receiverBase": "sources",
    "receiverCallee": "map"
  },
  {
    "callback": "function (p) {\n    return p.canPlay(source.toString());\n}",
    "receiverBase": "",
    "receiverCallee": "find"
  },
  {
    "callback": "function () {\n    return defer.resolve(container);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "listenToOnce"
  },
  {
    "callback": "function (Plugin) {\n    var options = assign(_this.options, {\n            container: container,\n            src: source\n        });\n    container.addPlugin(new Plugin(options));\n}",
    "receiverBase": "containerPlugins",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    return _this.exit();\n}",
    "receiverBase": "$",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    return _this.exit();\n}",
    "receiverBase": "$",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    return _this.exit();\n}",
    "receiverBase": "$",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (containers) {\n    return _this.setupContainers(containers);\n}",
    "receiverBase": "createContainers",
    "receiverCallee": "then"
  },
  {
    "callback": "function (containers) {\n    return _this.resolveOnContainersReady(containers);\n}",
    "receiverBase": "then",
    "receiverCallee": "then"
  },
  {
    "callback": "function () {\n    return _this.defer.resolve(_this);\n}",
    "receiverBase": "apply",
    "receiverCallee": "done"
  },
  {
    "callback": "function (plugin) {\n    return plugin.name === name;\n}",
    "receiverBase": "",
    "receiverCallee": "find"
  },
  {
    "callback": "function (container) {\n    return container.destroy();\n}",
    "receiverBase": "containers",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (containers) {\n    _this.setupContainers(containers);\n}",
    "receiverBase": "createContainers",
    "receiverCallee": "then"
  },
  {
    "callback": "function (container) {\n    return container.destroy();\n}",
    "receiverBase": "containers",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (plugin) {\n    return plugin.destroy();\n}",
    "receiverBase": "plugins",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (c) {\n    return c !== container;\n}",
    "receiverBase": "containers",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (Plugin) {\n    var plugin = new Plugin(_this.core);\n    _this.core.addPlugin(plugin);\n    _this.setupExternalInterface(plugin);\n}",
    "receiverBase": "corePlugins",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (plugin) {\n    return plugin.prototype.name === name;\n}",
    "receiverBase": "allPlugins",
    "receiverCallee": "find"
  },
  {
    "callback": "function (event) {\n    return _this.stopDrag(event);\n}",
    "receiverBase": "$",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (event) {\n    return _this.updateDrag(event);\n}",
    "receiverBase": "$",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    return _this.playerResize();\n}",
    "receiverBase": "Mediator",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    return _this.hideVolumeBar();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    return _this.$volumeBarContainer.addClass('volume-bar-hide');\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    return _this.hide();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    return _this.hide();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    return _this.setVolumeLevel(value);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "listenToOnce"
  },
  {
    "callback": "function () {\n    return _this.togglePlayPause();\n}",
    "receiverBase": "Mousetrap",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    return _this.hide();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    if (!_this.container.settings.seekEnabled) {\n        _this.$seekBarContainer.addClass('seek-disabled');\n    }\n    _this.setVolume(_this.currentVolume);\n    _this.bindKeyEvents();\n    _this.hideVolumeBar();\n}",
    "receiverBase": "$el",
    "receiverCallee": "ready"
  },
  {
    "callback": "function () {\n    return _this.enterViewport();\n}",
    "receiverBase": "elementWatcher",
    "receiverCallee": "fullyEnterViewport"
  },
  {
    "callback": "function () {\n    return _this.enterViewport();\n}",
    "receiverBase": "elementWatcher",
    "receiverCallee": "enterViewport"
  },
  {
    "callback": "function (i) {\n    Mousetrap.bind([i.toString()], function () {\n        return _this.seek(i * 10);\n    });\n}",
    "receiverBase": "shortcuts",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    return _this.seek(i * 10);\n}",
    "receiverBase": "Mousetrap",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (i) {\n    Mousetrap.unbind([i.toString()], function () {\n        return _this.seek(i * 10);\n    });\n}",
    "receiverBase": "shortcuts",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    return _this.seek(i * 10);\n}",
    "receiverBase": "Mousetrap",
    "receiverCallee": "unbind"
  },
  {
    "callback": "function () {\n    return _this.checkInitialSeek();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "listenToOnce"
  },
  {
    "callback": "function () {\n    return _this.volume(value);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "listenToOnce"
  },
  {
    "callback": "function () {\n    return _this.bootstrap();\n}",
    "receiverBase": "Mediator",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    return _this.updateTime();\n}",
    "receiverBase": "Mediator",
    "receiverCallee": "on"
  },
  {
    "callback": "function (state) {\n    return _this.setPlaybackState(state);\n}",
    "receiverBase": "Mediator",
    "receiverCallee": "on"
  },
  {
    "callback": "function (isHD) {\n    return _this.updateHighDefinition(isHD);\n}",
    "receiverBase": "Mediator",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    return _this.flashPlaybackError();\n}",
    "receiverBase": "Mediator",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    return _this.volume(value);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "listenToOnce"
  },
  {
    "callback": "function (ext) {\n    return !!a.canPlayType(ext).replace(/no/, '');\n}",
    "receiverBase": "",
    "receiverCallee": "find"
  },
  {
    "callback": "function (i) {\n    Mousetrap.bind([i.toString()], function () {\n        return _this.seek(i * 10);\n    });\n}",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    return _this.seek(i * 10);\n}",
    "receiverBase": "Mousetrap",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (i) {\n    Mousetrap.unbind([i.toString()], function () {\n        return _this.seek(i * 10);\n    });\n}",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    return _this.seek(i * 10);\n}",
    "receiverBase": "Mousetrap",
    "receiverCallee": "unbind"
  },
  {
    "callback": "function () {\n    return _this.options.autoPlay && _this.play();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (codec) {\n    return 'video/mp4; codecs=\"' + codec + ', mp4a.40.2\"';\n}",
    "receiverCallee": "map"
  },
  {
    "callback": "function (ext) {\n    return !!v.canPlayType(ext).replace(/no/, '');\n}",
    "receiverBase": "",
    "receiverCallee": "find"
  },
  {
    "callback": "function () {\n    return _this.loop();\n}",
    "receiverBase": "",
    "receiverCallee": "requestAnimationFrame"
  },
  {
    "callback": "function () {\n    return _this.click();\n}",
    "receiverBase": "$el",
    "receiverCallee": "click"
  },
  {
    "callback": "function (event) {\n    return _this.onVolumeChanged(event);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "listenTo"
  },
  {
    "callback": "function (event) {\n    return _this.onSeek(event);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "listenTo"
  },
  {
    "callback": "function () {\n    return _this.onOff();\n}",
    "receiverBase": "Mousetrap",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    return _this.updateSize();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (Events) {\n    function BaseObject() {\n        var options = arguments[0] === undefined ? {} : arguments[0];\n        _classCallCheck(this, BaseObject);\n        this.uniqueId = uniqueId('o');\n        this.container = options.container;\n    }\n    _inherits(BaseObject, Events);\n    return BaseObject;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_once) {\n    var _onceWrapper = function once(_x, _x2, _x3) {\n        return _once.apply(this, arguments);\n    };\n    _onceWrapper.toString = function () {\n        return _once.toString();\n    };\n    return _onceWrapper;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (name, callback, context) {\n    if (!eventsApi(this, 'once', name, [\n            callback,\n            context\n        ]) || !callback)\n        return this;\n    var self = this;\n    var once = execOnce(function () {\n            self.off(name, once);\n            callback.apply(this, arguments);\n        });\n    once._callback = callback;\n    return this.on(name, once, context);\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    self.off(name, once);\n    callback.apply(this, arguments);\n}",
    "receiverBase": "",
    "receiverCallee": "execOnce"
  },
  {
    "callback": "function (method) {\n    Events.prototype[method] = function (obj, name, callback) {\n        var listeningTo = this._listeningTo || (this._listeningTo = {});\n        var id = obj._listenId || (obj._listenId = uniqueId('l'));\n        listeningTo[id] = obj;\n        if (!callback && typeof name === 'object')\n            callback = this;\n        obj[listenMethods[method]](name, callback, this);\n        return this;\n    };\n}",
    "receiverBase": "keys",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (t) {\n    return null != t;\n}",
    "receiverBase": "s",
    "receiverCallee": "call"
  },
  {
    "callback": "function (t) {\n    return 1 == t.nodeType ? t : void 0;\n}",
    "receiverBase": "n",
    "receiverCallee": "map"
  },
  {
    "callback": "function (t, e) {\n    return e ? e.toUpperCase() : '';\n}",
    "receiverBase": "t",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (e, n) {\n    return t.indexOf(e) == n;\n}",
    "receiverBase": "s",
    "receiverCallee": "call"
  },
  {
    "callback": "function () {\n    f.removeChild(this);\n}",
    "receiverBase": "n",
    "receiverCallee": "each"
  },
  {
    "callback": "function (t, e) {\n    v.indexOf(t) > -1 ? s[t](e) : s.attr(t, e);\n}",
    "receiverBase": "n",
    "receiverCallee": "each"
  },
  {
    "callback": "function (n) {\n    B(t, n, e);\n}",
    "receiverBase": "n",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (t, e) {\n    j['[object ' + e + ']'] = e.toLowerCase();\n}",
    "receiverBase": "n",
    "receiverCallee": "each"
  },
  {
    "callback": "function (e, n) {\n    return t.call(e, n, e);\n}",
    "receiverBase": "n",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    t(n);\n}",
    "receiverBase": "u",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function () {\n    null != this.parentNode && this.parentNode.removeChild(this);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (e, n) {\n    return t.call(e, n, e) !== !1;\n}",
    "receiverBase": "every",
    "receiverCallee": "call"
  },
  {
    "callback": "function (e) {\n    return C.matches(e, t);\n}",
    "receiverBase": "s",
    "receiverCallee": "call"
  },
  {
    "callback": "function (t) {\n    e.call(this, t) || i.push(this);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (t) {\n    r.indexOf(t) < 0 && i.push(t);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    return $(t) ? n.contains(this, t) : n(this).find(t).size();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "filter"
  },
  {
    "callback": "function () {\n    var t = this;\n    return r.some.call(i, function (e) {\n        return n.contains(e, t);\n    });\n}",
    "receiverBase": "n",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (e) {\n    return n.contains(e, t);\n}",
    "receiverBase": "some",
    "receiverCallee": "call"
  },
  {
    "callback": "function () {\n    return C.qsa(this, t);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "map"
  },
  {
    "callback": "function (t) {\n    return (t = t.parentNode) && !Z(t) && e.indexOf(t) < 0 ? (e.push(t), t) : void 0;\n}",
    "receiverBase": "n",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    return U(this);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    return this.contentDocument || a.call(this.childNodes);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "map"
  },
  {
    "callback": "function (t, e) {\n    return s.call(U(e.parentNode), function (t) {\n        return t !== e;\n    });\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "map"
  },
  {
    "callback": "function (t) {\n    return t !== e;\n}",
    "receiverBase": "s",
    "receiverCallee": "call"
  },
  {
    "callback": "function () {\n    this.innerHTML = '';\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (e) {\n    return e[t];\n}",
    "receiverBase": "n",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    'none' == this.style.display && (this.style.display = ''), 'none' == getComputedStyle(this, '').getPropertyValue('display') && (this.style.display = I(this.nodeName));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (o) {\n    n(this).wrapAll(e ? t.call(this, o) : r ? i.cloneNode(!0) : i);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i) {\n    var r = n(this), o = r.contents(), s = e ? t.call(this, i) : t;\n    o.length ? o.wrapAll(s) : r.append(s);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    n(this).replaceWith(n(this).children());\n}",
    "receiverBase": "parent",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    return this.cloneNode(!0);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    var i = n(this);\n    (e === t ? 'none' == i.css('display') : e) ? i.show() : i.hide();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (e) {\n    var i = this.innerHTML;\n    n(this).empty().append(Y(this, t, e, i));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (e) {\n    var n = Y(this, t, e, this.textContent);\n    this.textContent = null == n ? '' : '' + n;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (t) {\n    if (1 === this.nodeType)\n        if ($(n))\n            for (e in n)\n                J(this, e, n[e]);\n        else\n            J(this, n, Y(this, i, t, this.getAttribute(n)));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    1 === this.nodeType && t.split(' ').forEach(function (t) {\n        J(this, t);\n    }, this);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (t) {\n    J(this, t);\n}",
    "receiverBase": "split",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (n) {\n    this[t] = Y(this, e, n, this[t]);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (e) {\n    this.value = Y(this, t, e, this.value);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    return this.selected;\n}",
    "receiverBase": "find",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (e) {\n    var i = n(this), r = Y(this, t, e, i.offset()), o = i.offsetParent().offset(), s = {\n            top: r.top - o.top,\n            left: r.left - o.left\n        };\n    'static' == i.css('position') && (s.position = 'relative'), i.css(s);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (t, e) {\n    s[e] = o.style[N(e)] || r.getPropertyValue(e);\n}",
    "receiverBase": "n",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    this.style.removeProperty(z(t));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    this.style.removeProperty(z(e));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    this.style.cssText += ';' + a;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (t) {\n    return this.test(G(t));\n}",
    "receiverBase": "some",
    "receiverCallee": "call"
  },
  {
    "callback": "function (e) {\n    if ('className' in this) {\n        i = [];\n        var r = G(this), o = Y(this, t, e, r);\n        o.split(/\\s+/g).forEach(function (t) {\n            n(this).hasClass(t) || i.push(t);\n        }, this), i.length && G(this, r + (r ? ' ' : '') + i.join(' '));\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (t) {\n    n(this).hasClass(t) || i.push(t);\n}",
    "receiverBase": "split",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (n) {\n    if ('className' in this) {\n        if (e === t)\n            return G(this, '');\n        i = G(this), Y(this, e, n, i).split(/\\s+/g).forEach(function (t) {\n            i = i.replace(H(t), ' ');\n        }), G(this, i.trim());\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (t) {\n    i = i.replace(H(t), ' ');\n}",
    "receiverBase": "split",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (r) {\n    var o = n(this), s = Y(this, e, r, G(this));\n    s.split(/\\s+/g).forEach(function (e) {\n        (i === t ? !o.hasClass(e) : i) ? o.addClass(e) : o.removeClass(e);\n    });\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (e) {\n    (i === t ? !o.hasClass(e) : i) ? o.addClass(e) : o.removeClass(e);\n}",
    "receiverBase": "split",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    for (var t = this.offsetParent || u.body; t && !m.test(t.nodeName) && 'static' == n(t).css('position');)\n        t = t.offsetParent;\n    return t;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "map"
  },
  {
    "callback": "function (e) {\n    var i = e.replace(/./, function (t) {\n            return t[0].toUpperCase();\n        });\n    n.fn[e] = function (r) {\n        var o, s = this[0];\n        return r === t ? k(s) ? s['inner' + i] : Z(s) ? s.documentElement['scroll' + i] : (o = this.offset()) && o[e] : this.each(function (t) {\n            s = n(this), s.css(e, Y(this, r, t, s[e]()));\n        });\n    };\n}",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (t) {\n    return t[0].toUpperCase();\n}",
    "receiverBase": "e",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (t) {\n    s = n(this), s.css(e, Y(this, r, t, s[e]()));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (e) {\n    return t = D(e), 'object' == t || 'array' == t || null == e ? e : C.fragment(e);\n}",
    "receiverBase": "n",
    "receiverCallee": "map"
  },
  {
    "callback": "function (t) {\n    if (s)\n        t = t.cloneNode(!0);\n    else if (!o)\n        return n(t).remove();\n    o.insertBefore(t, a), f && Q(t, function (t) {\n        null == t.nodeName || 'SCRIPT' !== t.nodeName.toUpperCase() || t.type && 'text/javascript' !== t.type || t.src || window.eval.call(window, t.innerHTML);\n    });\n}",
    "receiverBase": "r",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (t) {\n    null == t.nodeName || 'SCRIPT' !== t.nodeName.toUpperCase() || t.type && 'text/javascript' !== t.type || t.src || window.eval.call(window, t.innerHTML);\n}",
    "receiverBase": "",
    "receiverCallee": "Q"
  },
  {
    "callback": "function (t) {\n    return !(!t || e.e && t.e != e.e || e.ns && !r.test(t.ns) || n && l(t.fn) !== l(n) || i && t.sel != i);\n}",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (e) {\n    h(t, e, n, i).forEach(function (e) {\n        delete s[o][e.i], 'removeEventListener' in t && t.removeEventListener(g(e.e), e.proxy, m(e, r));\n    });\n}",
    "receiverBase": "split",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (e) {\n    delete s[o][e.i], 'removeEventListener' in t && t.removeEventListener(g(e.e), e.proxy, m(e, r));\n}",
    "receiverBase": "h",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (t, n) {\n    var r = i[t];\n    e[t] = function () {\n        return this[n] = w, r && r.apply(i, arguments);\n    }, e[n] = x;\n}",
    "receiverBase": "t",
    "receiverCallee": "each"
  },
  {
    "callback": "function (t, e) {\n    h.on(t, s, a, e, f);\n}",
    "receiverBase": "t",
    "receiverCallee": "each"
  },
  {
    "callback": "function (n, r) {\n    f && (c = function (t) {\n        return y(r, t.type, u), u.apply(this, arguments);\n    }), s && (l = function (e) {\n        var n, o = t(e.target).closest(s, r).get(0);\n        return o && o !== r ? (n = t.extend(j(e), {\n            currentTarget: o,\n            liveFired: r\n        }), (c || u).apply(o, [n].concat(i.call(arguments, 1)))) : void 0;\n    }), v(r, e, u, a, s, l || c);\n}",
    "receiverBase": "h",
    "receiverCallee": "each"
  },
  {
    "callback": "function (t, e) {\n    a.off(t, i, e);\n}",
    "receiverBase": "t",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    y(this, e, s, i);\n}",
    "receiverBase": "a",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    e.type in f && 'function' == typeof this[e.type] ? this[e.type]() : 'dispatchEvent' in this ? this.dispatchEvent(e) : t(this).triggerHandler(e, n);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (s, a) {\n    i = j(o(e) ? t.Event(e) : e), i._args = n, i.target = a, t.each(h(a, e.type || e), function (t, e) {\n        return r = e.proxy(i), i.isImmediatePropagationStopped() ? !1 : void 0;\n    });\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (t, e) {\n    return r = e.proxy(i), i.isImmediatePropagationStopped() ? !1 : void 0;\n}",
    "receiverBase": "t",
    "receiverCallee": "each"
  },
  {
    "callback": "function (e) {\n    t.fn[e] = function (t) {\n        return 0 in arguments ? this.bind(e, t) : this.trigger(e);\n    };\n}",
    "receiverBase": "split",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (n, u) {\n    o = t.type(u), r && (n = i ? r : r + '[' + (a || 'object' == o || 'array' == o ? n : '') + ']'), !r && s ? e.add(u.name, u.value) : 'array' == o || !i && 'object' == o ? C(e, u, i, n) : e.add(n, u);\n}",
    "receiverBase": "t",
    "receiverCallee": "each"
  },
  {
    "callback": "function (e, n) {\n    clearTimeout(h), t(a).off().remove(), 'error' != e.type && f ? v(f[0], l, i, r) : y(null, n || 'error', l, i, r), window[s] = u, f && t.isFunction(u) && u(f[0]), u = f = void 0;\n}",
    "receiverBase": "t",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    c('timeout');\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    S.onreadystatechange = x, S.abort(), y(null, 'timeout', S, o, s);\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (t, n) {\n    'function' == typeof n ? e.unique && l.has(n) || u.push(n) : n && n.length && 'string' != typeof n && a(n);\n}",
    "receiverBase": "t",
    "receiverCallee": "each"
  },
  {
    "callback": "function (e, n) {\n    for (var i; (i = t.inArray(n, u, i)) > -1;)\n        u.splice(i, 1), r && (s >= i && --s, a >= i && --a);\n}",
    "receiverBase": "t",
    "receiverCallee": "each"
  },
  {
    "callback": "function (n) {\n    t.each(i, function (i, r) {\n        var a = t.isFunction(e[i]) && e[i];\n        s[r[1]](function () {\n            var e = a && a.apply(this, arguments);\n            if (e && t.isFunction(e.promise))\n                e.promise().done(n.resolve).fail(n.reject).progress(n.notify);\n            else {\n                var i = this === o ? n.promise() : this, s = a ? [e] : arguments;\n                n[r[0] + 'With'](i, s);\n            }\n        });\n    }), e = null;\n}",
    "receiverBase": "",
    "receiverCallee": "n"
  },
  {
    "callback": "function (i, r) {\n    var a = t.isFunction(e[i]) && e[i];\n    s[r[1]](function () {\n        var e = a && a.apply(this, arguments);\n        if (e && t.isFunction(e.promise))\n            e.promise().done(n.resolve).fail(n.reject).progress(n.notify);\n        else {\n            var i = this === o ? n.promise() : this, s = a ? [e] : arguments;\n            n[r[0] + 'With'](i, s);\n        }\n    });\n}",
    "receiverBase": "t",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var e = a && a.apply(this, arguments);\n    if (e && t.isFunction(e.promise))\n        e.promise().done(n.resolve).fail(n.reject).progress(n.notify);\n    else {\n        var i = this === o ? n.promise() : this, s = a ? [e] : arguments;\n        n[r[0] + 'With'](i, s);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "s"
  },
  {
    "callback": "function (t, e) {\n    var n = e[2], a = e[3];\n    o[e[1]] = n.add, a && n.add(function () {\n        r = a;\n    }, i[1 ^ t][2].disable, i[2][2].lock), s[e[0]] = function () {\n        return s[e[0] + 'With'](this === s ? o : this, arguments), this;\n    }, s[e[0] + 'With'] = n.fireWith;\n}",
    "receiverBase": "t",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    r = a;\n}",
    "receiverBase": "n",
    "receiverCallee": "add"
  },
  {
    "callback": "function (t) {\n    var n = t.velocityX > 1 ? 'Right' : t.velocityX < -1 ? 'Left' : t.velocityY > 1 ? 'Down' : t.velocityY < -1 ? 'Up' : null;\n    n && (e.el.trigger('swipe'), e.el.trigger('swipe' + n));\n}",
    "receiverBase": "t",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (i) {\n    (!(w = p(i, 'down')) || h(i)) && (y = w ? i : i.touches[0], i.touches && 1 === i.touches.length && e.x2 && (e.x2 = void 0, e.y2 = void 0), d = Date.now(), m = d - (e.last || d), e.el = t('tagName' in y.target ? y.target : y.target.parentNode), n && clearTimeout(n), e.x1 = y.pageX, e.y1 = y.pageY, m > 0 && 250 >= m && (e.isDoubleTap = !0), e.last = d, o = setTimeout(f, s), a && w && a.addPointer(i.pointerId));\n}",
    "receiverBase": "bind",
    "receiverCallee": "on"
  },
  {
    "callback": "function (t) {\n    (!(w = p(t, 'move')) || h(t)) && (y = w ? t : t.touches[0], c(), e.x2 = y.pageX, e.y2 = y.pageY, g += Math.abs(e.x1 - e.x2), v += Math.abs(e.y1 - e.y2));\n}",
    "receiverBase": "on",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    e.el.trigger('swipe'), e.el.trigger('swipe' + u(e.x1, e.x2, e.y1, e.y2)), e = {};\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    var i = t.Event('tap');\n    i.cancelTouch = l, e.el.trigger(i), e.isDoubleTap ? (e.el && e.el.trigger('doubleTap'), e = {}) : n = setTimeout(function () {\n        n = null, e.el && e.el.trigger('singleTap'), e = {};\n    }, 250);\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    n = null, e.el && e.el.trigger('singleTap'), e = {};\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (e) {\n    t.fn[e] = function (t) {\n        return this.on(e, t);\n    };\n}",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (o, s, f) {\n    try {\n        var c;\n        !o && s ? o = '*' : a.test(o) && (c = t(i).addClass(u), o = '.' + u + ' ' + o);\n        var l = n(i, o);\n    } catch (h) {\n        throw console.error('error performing selector: %o', r), h;\n    } finally {\n        c && c.removeClass(u);\n    }\n    return s ? e.uniq(t.map(l, function (t, e) {\n        return s.call(t, e, l, f);\n    })) : l;\n}",
    "receiverBase": "",
    "receiverCallee": "f"
  },
  {
    "callback": "function (t, e) {\n    return s.call(t, e, l, f);\n}",
    "receiverBase": "t",
    "receiverCallee": "map"
  },
  {
    "callback": "function (e, n, r) {\n    return !(e && !i(t, e) || n && n.call(t, null, r) !== t);\n}",
    "receiverBase": "",
    "receiverCallee": "f"
  },
  {
    "callback": "function () {\n    if (typeof data === 'function') {\n        view.autorun(function () {\n            view.dataVar.set(data());\n        }, view.parentView, 'setData');\n    } else {\n        view.dataVar.set(data);\n    }\n}",
    "receiverBase": "view",
    "receiverCallee": "onViewCreated"
  },
  {
    "callback": "function () {\n    view.dataVar.set(data());\n}",
    "receiverBase": "view",
    "receiverCallee": "autorun"
  },
  {
    "callback": "function () {\n    return conditionVar.get() ? contentFunc() : elseFunc ? elseFunc() : null;\n}",
    "receiverBase": "Blaze",
    "receiverCallee": "View"
  },
  {
    "callback": "function () {\n    this.autorun(function () {\n        var cond = Blaze._calculateCondition(conditionFunc());\n        conditionVar.set(_not ? !cond : cond);\n    }, this.parentView, 'condition');\n}",
    "receiverBase": "view",
    "receiverCallee": "onViewCreated"
  },
  {
    "callback": "function () {\n    var cond = Blaze._calculateCondition(conditionFunc());\n    conditionVar.set(_not ? !cond : cond);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "autorun"
  },
  {
    "callback": "function () {\n    var subviews = this.initialSubviews;\n    this.initialSubviews = null;\n    if (this._isCreatedForExpansion) {\n        this.expandedValueDep = new Tracker.Dependency();\n        this.expandedValueDep.depend();\n    }\n    return subviews;\n}",
    "receiverBase": "Blaze",
    "receiverCallee": "View"
  },
  {
    "callback": "function () {\n    eachView.argVar.set(argFunc());\n}",
    "receiverBase": "eachView",
    "receiverCallee": "autorun"
  },
  {
    "callback": "function () {\n    return eachView.argVar.get();\n}",
    "receiverBase": "ObserveSequence",
    "receiverCallee": "observe"
  },
  {
    "callback": "function () {\n    if (eachView.expandedValueDep) {\n        eachView.expandedValueDep.changed();\n    } else {\n        var itemView;\n        if (eachView._domrange) {\n            itemView = eachView._domrange.getMember(index).view;\n        } else {\n            itemView = eachView.initialSubviews[index];\n        }\n        itemView.dataVar.set(newItem);\n    }\n}",
    "receiverBase": "Tracker",
    "receiverCallee": "nonreactive"
  },
  {
    "callback": "function () {\n    if (eachView.expandedValueDep) {\n        eachView.expandedValueDep.changed();\n    } else if (eachView._domrange) {\n        eachView._domrange.moveMember(fromIndex, toIndex);\n    } else {\n        var subviews = eachView.initialSubviews;\n        var itemView = subviews[fromIndex];\n        subviews.splice(fromIndex, 1);\n        subviews.splice(toIndex, 0, itemView);\n    }\n}",
    "receiverBase": "Tracker",
    "receiverCallee": "nonreactive"
  },
  {
    "callback": "function () {\n    if (eachView.stopHandle)\n        eachView.stopHandle.stop();\n}",
    "receiverBase": "eachView",
    "receiverCallee": "onViewDestroyed"
  },
  {
    "callback": "function () {\n    this.originalParentView = this.parentView;\n    this.parentView = parentView;\n}",
    "receiverBase": "view",
    "receiverCallee": "onViewCreated"
  },
  {
    "callback": "function () {\n    if (me.autoScrollStep) {\n        content.scrollTop -= me.autoScrollStep;\n    } else {\n        me.stopAutoScroll();\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "setInterval"
  },
  {
    "callback": "function () {\n    util.selectContentEditable(TreeEditor.domFocus);\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    options.change();\n}",
    "receiverBase": "editor",
    "receiverCallee": "on"
  },
  {
    "callback": "function (child) {\n    arr.push(child.getValue());\n}",
    "receiverBase": "childs",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (child) {\n    obj[child.getField()] = child.getValue();\n}",
    "receiverBase": "childs",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (child) {\n    var childClone = child.clone();\n    childClone.setParent(clone);\n    cloneChilds.push(childClone);\n}",
    "receiverBase": "childs",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (child) {\n    child.expand(recurse);\n}",
    "receiverBase": "childs",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (child) {\n    child.collapse(recurse);\n}",
    "receiverBase": "childs",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (child) {\n    table.insertBefore(child.getDom(), append);\n    child.showChilds();\n}",
    "receiverBase": "childs",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (child) {\n    child.hide();\n}",
    "receiverBase": "childs",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (child) {\n    childResults = childResults.concat(child.search(text));\n}",
    "receiverBase": "childs",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    util.selectContentEditable(editableDiv);\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (child, index) {\n    child.clearDom();\n    delete child.index;\n    child.fieldEditable = true;\n    if (child.field == undefined) {\n        child.field = '';\n    }\n}",
    "receiverBase": "childs",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (child, index) {\n    child.clearDom();\n    child.fieldEditable = false;\n    child.index = index;\n}",
    "receiverBase": "childs",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (event) {\n    node._onDrag(event);\n}",
    "receiverBase": "util",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function (event) {\n    node._onDragEnd(event);\n}",
    "receiverBase": "util",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function (child) {\n    child.setHighlight(highlight);\n}",
    "receiverBase": "childs",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (child) {\n    child.updateDom(options);\n}",
    "receiverBase": "childs",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (child, index) {\n    child.index = index;\n    var childField = child.dom.field;\n    if (childField) {\n        childField.innerHTML = index;\n    }\n}",
    "receiverBase": "childs",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (child) {\n    if (child.index != undefined) {\n        delete child.index;\n        if (child.field == undefined) {\n            child.field = '';\n        }\n    }\n}",
    "receiverBase": "childs",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    util.removeClassName(dom.menu, 'selected');\n    highlighter.unlock();\n    highlighter.unhighlight();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "showContextMenu"
  },
  {
    "callback": "function () {\n    node._getDomValue(true);\n    node._updateDomValue();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    node._getDomField(true);\n    node._updateDomField();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (a, b) {\n    if (a[prop] > b[prop])\n        return order;\n    if (a[prop] < b[prop])\n        return -order;\n    return 0;\n}",
    "receiverBase": "childs",
    "receiverCallee": "sort"
  },
  {
    "callback": "function () {\n    util.removeClassName(dom.menu, 'selected');\n    highlighter.unlock();\n    highlighter.unhighlight();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "showContextMenu"
  },
  {
    "callback": "function (item) {\n    var height = (items.length + (item.submenu ? item.submenu.length : 0)) * 24;\n    me.maxHeight = Math.max(me.maxHeight, height);\n}",
    "receiverBase": "items",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (item) {\n    buttons.push(item.button);\n    if (item.buttonExpand) {\n        buttons.push(item.buttonExpand);\n    }\n    if (item.subItems && item == me.expandedItem) {\n        item.subItems.forEach(function (subItem) {\n            buttons.push(subItem.button);\n            if (subItem.buttonExpand) {\n                buttons.push(subItem.buttonExpand);\n            }\n        });\n    }\n}",
    "receiverBase": "items",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (subItem) {\n    buttons.push(subItem.button);\n    if (subItem.buttonExpand) {\n        buttons.push(subItem.buttonExpand);\n    }\n}",
    "receiverBase": "subItems",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (event) {\n    event = event || window.event;\n    var target = event.target || event.srcElement;\n    if (target != list && !me._isChildOf(target, list)) {\n        me.hide();\n        util.stopPropagation(event);\n        util.preventDefault(event);\n    }\n}",
    "receiverBase": "util",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function () {\n    util.stopPropagation(event);\n    util.preventDefault(event);\n}",
    "receiverBase": "util",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function (event) {\n    me._onKeyDown(event);\n}",
    "receiverBase": "util",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function () {\n    me.dom.focusButton.focus();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    if (me.expandedItem != expandedItem) {\n        expandedItem.ul.style.display = '';\n        util.removeClassName(expandedItem.ul.parentNode, 'selected');\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    if (me.expandedItem == domItem) {\n        ul.style.height = ul.childNodes.length * 24 + 'px';\n        ul.style.padding = '5px 10px';\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    if (focus) {\n        node.focus(elem);\n    }\n}",
    "receiverBase": "node",
    "receiverCallee": "scrollTo"
  },
  {
    "callback": "function (event) {\n    searchBox._onSearch(event);\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    me.node.setHighlight(false);\n    me.node = undefined;\n    me.unhighlightTimer = undefined;\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    loadCss();\n    return jsoneditor;\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function (testFile, asyncCallback) {\n    logger.info('Running: {yellow:%s', testFile);\n    process.env['BS_TEST_FILE'] = 'tests/' + testFile;\n    ptor({}, configFile, function (err, out) {\n        if (out) {\n        }\n        if (!err) {\n            logger.info('{green:Tests Passed:} {yellow:%s', testFile);\n        }\n        if (err) {\n            return asyncCallback(err);\n        }\n        asyncCallback();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "eachSeries"
  },
  {
    "callback": "function (err, out) {\n    if (out) {\n    }\n    if (!err) {\n        logger.info('{green:Tests Passed:} {yellow:%s', testFile);\n    }\n    if (err) {\n        return asyncCallback(err);\n    }\n    asyncCallback();\n}",
    "receiverBase": "",
    "receiverCallee": "ptor"
  },
  {
    "callback": "function (err) {\n    if (err) {\n        logger.error(err.stdout || err.message);\n        process.exit(1);\n    }\n    process.exit(0);\n}",
    "receiverBase": "",
    "receiverCallee": "eachSeries"
  },
  {
    "callback": "function () {\n    expect(t.parse('a').value).toEqual('a');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(unannotate(t.parse('()'))).toEqual([]);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(unannotate(t.parse('(hi you)'))).toEqual([\n        'hi',\n        'you'\n    ]);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(unannotate(t.parse('((x))'))).toEqual([['x']]);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(unannotate(t.parse('(x (x))'))).toEqual([\n        'x',\n        ['x']\n    ]);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(unannotate(t.parse('(x y)'))).toEqual([\n        'x',\n        'y'\n    ]);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(unannotate(t.parse('(x (y) z)'))).toEqual([\n        'x',\n        ['y'],\n        'z'\n    ]);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(unannotate(t.parse('(x (y) (a b c))'))).toEqual([\n        'x',\n        ['y'],\n        [\n            'a',\n            'b',\n            'c'\n        ]\n    ]);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    it('should parse out numbers', function () {\n        expect(unannotate(t.parse('(1 (a 2))'))).toEqual([\n            1,\n            [\n                'a',\n                2\n            ]\n        ]);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "describe"
  },
  {
    "callback": "function () {\n    expect(unannotate(t.parse('(1 (a 2))'))).toEqual([\n        1,\n        [\n            'a',\n            2\n        ]\n    ]);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(t.interpret(t.parse('()'))).toEqual([]);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(t.interpret(t.parse('(\"hi\" \"mary\" \"rose\")'))).toEqual([\n        'hi',\n        'mary',\n        'rose'\n    ]);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(t.interpret(t.parse('(1 2 3)'))).toEqual([\n        1,\n        2,\n        3\n    ]);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(t.interpret(t.parse('(\"1\" \"2\" \"3\")'))).toEqual([\n        '1',\n        '2',\n        '3'\n    ]);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(t.interpret(t.parse('\"a\"'))).toEqual('a');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(t.interpret(t.parse('\"a b\"'))).toEqual('a b');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(t.interpret(t.parse('\"(a\"'))).toEqual('(a');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(t.interpret(t.parse('\")a\"'))).toEqual(')a');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(t.interpret(t.parse('\"(a)\"'))).toEqual('(a)');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(t.interpret(t.parse('123'))).toEqual(123);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    it('should run print on an int', function () {\n        expect(t.interpret(t.parse('(print 1)'))).toEqual(1);\n    });\n    it('should return first element of list', function () {\n        expect(t.interpret(t.parse('(first (1 2 3))'))).toEqual(1);\n    });\n    it('should return rest of list', function () {\n        expect(t.interpret(t.parse('(rest (1 2 3))'))).toEqual([\n            2,\n            3\n        ]);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "describe"
  },
  {
    "callback": "function () {\n    expect(t.interpret(t.parse('(print 1)'))).toEqual(1);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(t.interpret(t.parse('(first (1 2 3))'))).toEqual(1);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(t.interpret(t.parse('(rest (1 2 3))'))).toEqual([\n        2,\n        3\n    ]);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(t.interpret(t.parse('((lambda () (rest (1 2))))'))).toEqual([2]);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(t.interpret(t.parse('((lambda (x) x) 1)'))).toEqual(1);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(t.interpret(t.parse('((lambda (x y) (x y)) 1 2)'))).toEqual([\n        1,\n        2\n    ]);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(t.interpret(t.parse('((lambda (x y) (0 x y)) 1 2)'))).toEqual([\n        0,\n        1,\n        2\n    ]);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(t.interpret(t.parse('((lambda (x) (first (x))) 1)'))).toEqual(1);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(t.interpret(t.parse('(let ((x 1) (y 2)) (x y))'))).toEqual([\n        1,\n        2\n    ]);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(t.interpret(t.parse('(let ((x 1) (y x)) (x y))'))).toEqual([\n        1,\n        undefined\n    ]);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(t.interpret(t.parse('(let () 42)'))).toEqual(42);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    it('should choose the right branch', function () {\n        expect(t.interpret(t.parse('(if 1 42 4711)'))).toEqual(42);\n        expect(t.interpret(t.parse('(if 0 42 4711)'))).toEqual(4711);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "describe"
  },
  {
    "callback": "function () {\n    expect(t.interpret(t.parse('(if 1 42 4711)'))).toEqual(42);\n    expect(t.interpret(t.parse('(if 0 42 4711)'))).toEqual(4711);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (x, i, a) {\n    results.push(iterator(x, i, a));\n}",
    "receiverBase": "",
    "receiverCallee": "_each"
  },
  {
    "callback": "function (x, i, a) {\n    memo = iterator(memo, x, i, a);\n}",
    "receiverBase": "",
    "receiverCallee": "_each"
  },
  {
    "callback": "function (x) {\n    iterator(x, only_once(done));\n}",
    "receiverBase": "",
    "receiverCallee": "_each"
  },
  {
    "callback": "function (err) {\n    if (err) {\n        callback(err);\n        callback = function () {\n        };\n    } else {\n        completed += 1;\n        if (completed >= arr.length) {\n            callback(null);\n        } else {\n            iterate();\n        }\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "iterator"
  },
  {
    "callback": "function (err) {\n    if (err) {\n        callback(err);\n        callback = function () {\n        };\n    } else {\n        completed += 1;\n        running -= 1;\n        if (completed >= arr.length) {\n            callback();\n        } else {\n            replenish();\n        }\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "iterator"
  },
  {
    "callback": "function (x, i) {\n    return {\n        index: i,\n        value: x\n    };\n}",
    "receiverBase": "",
    "receiverCallee": "_map"
  },
  {
    "callback": "function (x, callback) {\n    iterator(x.value, function (err, v) {\n        results[x.index] = v;\n        callback(err);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "eachfn"
  },
  {
    "callback": "function (err, v) {\n    results[x.index] = v;\n    callback(err);\n}",
    "receiverBase": "",
    "receiverCallee": "iterator"
  },
  {
    "callback": "function (err) {\n    callback(err, results);\n}",
    "receiverBase": "",
    "receiverCallee": "eachfn"
  },
  {
    "callback": "function (x, callback) {\n    iterator(memo, x, function (err, v) {\n        memo = v;\n        callback(err);\n    });\n}",
    "receiverBase": "async",
    "receiverCallee": "eachSeries"
  },
  {
    "callback": "function (err, v) {\n    memo = v;\n    callback(err);\n}",
    "receiverBase": "",
    "receiverCallee": "iterator"
  },
  {
    "callback": "function (err) {\n    callback(err, memo);\n}",
    "receiverBase": "async",
    "receiverCallee": "eachSeries"
  },
  {
    "callback": "function (x) {\n    return x;\n}",
    "receiverBase": "",
    "receiverCallee": "_map"
  },
  {
    "callback": "function (x, i) {\n    return {\n        index: i,\n        value: x\n    };\n}",
    "receiverBase": "",
    "receiverCallee": "_map"
  },
  {
    "callback": "function (x, callback) {\n    iterator(x.value, function (v) {\n        if (v) {\n            results.push(x);\n        }\n        callback();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "eachfn"
  },
  {
    "callback": "function (v) {\n    if (v) {\n        results.push(x);\n    }\n    callback();\n}",
    "receiverBase": "",
    "receiverCallee": "iterator"
  },
  {
    "callback": "function (err) {\n    callback(_map(results.sort(function (a, b) {\n        return a.index - b.index;\n    }), function (x) {\n        return x.value;\n    }));\n}",
    "receiverBase": "",
    "receiverCallee": "eachfn"
  },
  {
    "callback": "function (a, b) {\n    return a.index - b.index;\n}",
    "receiverBase": "results",
    "receiverCallee": "sort"
  },
  {
    "callback": "function (x) {\n    return x.value;\n}",
    "receiverBase": "",
    "receiverCallee": "_map"
  },
  {
    "callback": "function (x, i) {\n    return {\n        index: i,\n        value: x\n    };\n}",
    "receiverBase": "",
    "receiverCallee": "_map"
  },
  {
    "callback": "function (x, callback) {\n    iterator(x.value, function (v) {\n        if (!v) {\n            results.push(x);\n        }\n        callback();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "eachfn"
  },
  {
    "callback": "function (v) {\n    if (!v) {\n        results.push(x);\n    }\n    callback();\n}",
    "receiverBase": "",
    "receiverCallee": "iterator"
  },
  {
    "callback": "function (err) {\n    callback(_map(results.sort(function (a, b) {\n        return a.index - b.index;\n    }), function (x) {\n        return x.value;\n    }));\n}",
    "receiverBase": "",
    "receiverCallee": "eachfn"
  },
  {
    "callback": "function (a, b) {\n    return a.index - b.index;\n}",
    "receiverBase": "results",
    "receiverCallee": "sort"
  },
  {
    "callback": "function (x) {\n    return x.value;\n}",
    "receiverBase": "",
    "receiverCallee": "_map"
  },
  {
    "callback": "function (x, callback) {\n    iterator(x, function (result) {\n        if (result) {\n            main_callback(x);\n            main_callback = function () {\n            };\n        } else {\n            callback();\n        }\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "eachfn"
  },
  {
    "callback": "function (result) {\n    if (result) {\n        main_callback(x);\n        main_callback = function () {\n        };\n    } else {\n        callback();\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "iterator"
  },
  {
    "callback": "function (err) {\n    main_callback();\n}",
    "receiverBase": "",
    "receiverCallee": "eachfn"
  },
  {
    "callback": "function (x, callback) {\n    iterator(x, function (v) {\n        if (v) {\n            main_callback(true);\n            main_callback = function () {\n            };\n        }\n        callback();\n    });\n}",
    "receiverBase": "async",
    "receiverCallee": "each"
  },
  {
    "callback": "function (v) {\n    if (v) {\n        main_callback(true);\n        main_callback = function () {\n        };\n    }\n    callback();\n}",
    "receiverBase": "",
    "receiverCallee": "iterator"
  },
  {
    "callback": "function (err) {\n    main_callback(false);\n}",
    "receiverBase": "async",
    "receiverCallee": "each"
  },
  {
    "callback": "function (x, callback) {\n    iterator(x, function (v) {\n        if (!v) {\n            main_callback(false);\n            main_callback = function () {\n            };\n        }\n        callback();\n    });\n}",
    "receiverBase": "async",
    "receiverCallee": "each"
  },
  {
    "callback": "function (v) {\n    if (!v) {\n        main_callback(false);\n        main_callback = function () {\n        };\n    }\n    callback();\n}",
    "receiverBase": "",
    "receiverCallee": "iterator"
  },
  {
    "callback": "function (err) {\n    main_callback(true);\n}",
    "receiverBase": "async",
    "receiverCallee": "each"
  },
  {
    "callback": "function (x, callback) {\n    iterator(x, function (err, criteria) {\n        if (err) {\n            callback(err);\n        } else {\n            callback(null, {\n                value: x,\n                criteria: criteria\n            });\n        }\n    });\n}",
    "receiverBase": "async",
    "receiverCallee": "map"
  },
  {
    "callback": "function (err, criteria) {\n    if (err) {\n        callback(err);\n    } else {\n        callback(null, {\n            value: x,\n            criteria: criteria\n        });\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "iterator"
  },
  {
    "callback": "function (err, results) {\n    if (err) {\n        return callback(err);\n    } else {\n        var fn = function (left, right) {\n            var a = left.criteria, b = right.criteria;\n            return a < b ? -1 : a > b ? 1 : 0;\n        };\n        callback(null, _map(results.sort(fn), function (x) {\n            return x.value;\n        }));\n    }\n}",
    "receiverBase": "async",
    "receiverCallee": "map"
  },
  {
    "callback": "function (x) {\n    return x.value;\n}",
    "receiverBase": "",
    "receiverCallee": "_map"
  },
  {
    "callback": "function (fn) {\n    fn();\n}",
    "receiverBase": "",
    "receiverCallee": "_each"
  },
  {
    "callback": "function () {\n    if (!remainingTasks) {\n        var theCallback = callback;\n        callback = function () {\n        };\n        theCallback(null, results);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function (rkey) {\n    safeResults[rkey] = results[rkey];\n}",
    "receiverBase": "",
    "receiverCallee": "_each"
  },
  {
    "callback": "function (a, x) {\n    return a && results.hasOwnProperty(x);\n}",
    "receiverBase": "",
    "receiverCallee": "_reduce"
  },
  {
    "callback": "function () {\n    iterator.apply(null, args);\n}",
    "receiverBase": "async",
    "receiverCallee": "setImmediate"
  },
  {
    "callback": "function (fn, callback) {\n    if (fn) {\n        fn(function (err) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (args.length <= 1) {\n                args = args[0];\n            }\n            callback.call(null, err, args);\n        });\n    }\n}",
    "receiverBase": "eachfn",
    "receiverCallee": "map"
  },
  {
    "callback": "function (err) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    if (args.length <= 1) {\n        args = args[0];\n    }\n    callback.call(null, err, args);\n}",
    "receiverBase": "",
    "receiverCallee": "fn"
  },
  {
    "callback": "function (k, callback) {\n    tasks[k](function (err) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        if (args.length <= 1) {\n            args = args[0];\n        }\n        results[k] = args;\n        callback(err);\n    });\n}",
    "receiverBase": "eachfn",
    "receiverCallee": "each"
  },
  {
    "callback": "function (err) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    if (args.length <= 1) {\n        args = args[0];\n    }\n    results[k] = args;\n    callback(err);\n}",
    "receiverBase": "",
    "receiverCallee": "tasks"
  },
  {
    "callback": "function (err) {\n    callback(err, results);\n}",
    "receiverBase": "eachfn",
    "receiverCallee": "each"
  },
  {
    "callback": "function (fn, callback) {\n    if (fn) {\n        fn(function (err) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (args.length <= 1) {\n                args = args[0];\n            }\n            callback.call(null, err, args);\n        });\n    }\n}",
    "receiverBase": "async",
    "receiverCallee": "mapSeries"
  },
  {
    "callback": "function (err) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    if (args.length <= 1) {\n        args = args[0];\n    }\n    callback.call(null, err, args);\n}",
    "receiverBase": "",
    "receiverCallee": "fn"
  },
  {
    "callback": "function (k, callback) {\n    tasks[k](function (err) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        if (args.length <= 1) {\n            args = args[0];\n        }\n        results[k] = args;\n        callback(err);\n    });\n}",
    "receiverBase": "async",
    "receiverCallee": "eachSeries"
  },
  {
    "callback": "function (err) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    if (args.length <= 1) {\n        args = args[0];\n    }\n    results[k] = args;\n    callback(err);\n}",
    "receiverBase": "",
    "receiverCallee": "tasks"
  },
  {
    "callback": "function (err) {\n    callback(err, results);\n}",
    "receiverBase": "async",
    "receiverCallee": "eachSeries"
  },
  {
    "callback": "function (x, cb) {\n    fn(x, function (err, y) {\n        r = r.concat(y || []);\n        cb(err);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "eachfn"
  },
  {
    "callback": "function (err, y) {\n    r = r.concat(y || []);\n    cb(err);\n}",
    "receiverBase": "",
    "receiverCallee": "fn"
  },
  {
    "callback": "function (err) {\n    callback(err, r);\n}",
    "receiverBase": "",
    "receiverCallee": "eachfn"
  },
  {
    "callback": "function (err) {\n    if (err) {\n        return callback(err);\n    }\n    async.whilst(test, iterator, callback);\n}",
    "receiverBase": "",
    "receiverCallee": "iterator"
  },
  {
    "callback": "function (err) {\n    if (err) {\n        return callback(err);\n    }\n    var args = Array.prototype.slice.call(arguments, 1);\n    if (test.apply(null, args)) {\n        async.doWhilst(iterator, test, callback);\n    } else {\n        callback();\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "iterator"
  },
  {
    "callback": "function (err) {\n    if (err) {\n        return callback(err);\n    }\n    async.until(test, iterator, callback);\n}",
    "receiverBase": "",
    "receiverCallee": "iterator"
  },
  {
    "callback": "function (err) {\n    if (err) {\n        return callback(err);\n    }\n    var args = Array.prototype.slice.call(arguments, 1);\n    if (!test.apply(null, args)) {\n        async.doUntil(iterator, test, callback);\n    } else {\n        callback();\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "iterator"
  },
  {
    "callback": "function () {\n    if (q.drain) {\n        q.drain();\n    }\n}",
    "receiverBase": "async",
    "receiverCallee": "setImmediate"
  },
  {
    "callback": "function (task) {\n    var item = {\n            data: task,\n            callback: typeof callback === 'function' ? callback : null\n        };\n    if (pos) {\n        q.tasks.unshift(item);\n    } else {\n        q.tasks.push(item);\n    }\n    if (q.saturated && q.tasks.length === q.concurrency) {\n        q.saturated();\n    }\n    async.setImmediate(q.process);\n}",
    "receiverBase": "",
    "receiverCallee": "_each"
  },
  {
    "callback": "function (task) {\n    tasks.push({\n        data: task,\n        callback: typeof callback === 'function' ? callback : null\n    });\n    cargo.drained = false;\n    if (cargo.saturated && tasks.length === payload) {\n        cargo.saturated();\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "_each"
  },
  {
    "callback": "function (task) {\n    return task.data;\n}",
    "receiverBase": "",
    "receiverCallee": "_map"
  },
  {
    "callback": "function () {\n    working = false;\n    var args = arguments;\n    _each(ts, function (data) {\n        if (data.callback) {\n            data.callback.apply(null, args);\n        }\n    });\n    process();\n}",
    "receiverBase": "",
    "receiverCallee": "worker"
  },
  {
    "callback": "function (data) {\n    if (data.callback) {\n        data.callback.apply(null, args);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "_each"
  },
  {
    "callback": "function (x) {\n    console[name](x);\n}",
    "receiverBase": "",
    "receiverCallee": "_each"
  },
  {
    "callback": "function () {\n    callback.apply(null, memo[key]);\n}",
    "receiverBase": "async",
    "receiverCallee": "nextTick"
  },
  {
    "callback": "function (newargs, fn, cb) {\n    fn.apply(that, newargs.concat([function () {\n            var err = arguments[0];\n            var nextargs = Array.prototype.slice.call(arguments, 1);\n            cb(err, nextargs);\n        }]));\n}",
    "receiverBase": "async",
    "receiverCallee": "reduce"
  },
  {
    "callback": "function (err, results) {\n    callback.apply(that, [err].concat(results));\n}",
    "receiverBase": "async",
    "receiverCallee": "reduce"
  },
  {
    "callback": "function (fn, cb) {\n    fn.apply(that, args.concat([cb]));\n}",
    "receiverBase": "",
    "receiverCallee": "eachfn"
  },
  {
    "callback": "function () {\n    return async;\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function () {\n    Ext.i18n.appBundle = Ext.create('Ext.i18n.Bundle', {\n        bundle: 'RaxaEmrAdmin',\n        lang: 'en-US',\n        path: 'app/view',\n        noCache: true\n    });\n}",
    "receiverBase": "Ext",
    "receiverCallee": "require"
  },
  {
    "callback": "function (l) {\n    log4jsLevels.push(log4js.levels.toLevel(l));\n}",
    "receiverBase": "strLevels",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    $timepicker.hide(true);\n}",
    "receiverBase": "",
    "receiverCallee": "$timeout"
  },
  {
    "callback": "function (key) {\n    if (angular.isDefined(attr[key]))\n        options[key] = attr[key];\n}",
    "receiverBase": "angular",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (newValue, oldValue) {\n    if (!timepicker || !angular.isDefined(newValue))\n        return;\n    if (angular.isString(newValue))\n        newValue = !!newValue.match(/true|,?(timepicker),?/i);\n    newValue === true ? timepicker.show() : timepicker.hide();\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function (key) {\n    angular.isDefined(attr[key]) && attr.$observe(key, function (newValue) {\n        timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n        !isNaN(timepicker.$options[key]) && timepicker.$build();\n        validateAgainstMinMaxTime(controller.$dateValue);\n    });\n}",
    "receiverBase": "angular",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (newValue) {\n    timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n    !isNaN(timepicker.$options[key]) && timepicker.$build();\n    validateAgainstMinMaxTime(controller.$dateValue);\n}",
    "receiverBase": "attr",
    "receiverCallee": "$observe"
  },
  {
    "callback": "function (newValue, oldValue) {\n    timepicker.update(controller.$dateValue);\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function (modelValue) {\n    var date;\n    if (angular.isUndefined(modelValue) || modelValue === null) {\n        date = NaN;\n    } else if (angular.isDate(modelValue)) {\n        date = modelValue;\n    } else if (options.timeType === 'string') {\n        date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n    } else {\n        date = new Date(modelValue);\n    }\n    controller.$dateValue = date;\n    return getTimeFormattedString();\n}",
    "receiverBase": "$formatters",
    "receiverCallee": "push"
  },
  {
    "callback": "function () {\n    if (timepicker)\n        timepicker.destroy();\n    options = null;\n    timepicker = null;\n}",
    "receiverBase": "scope",
    "receiverCallee": "$on"
  }
]