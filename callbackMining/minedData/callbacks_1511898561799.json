[
  {
    "callback": "function (require, exports, module) {\n    exports.snippetText = '';\n    exports.scope = 'liquid';\n}",
    "receiverBase": "ace",
    "receiverCallee": "define"
  },
  {
    "callback": "function (i) {\n    div.dom.innerHTML += '<p>' + i.get('project_name') + ': ' + i.get('group') + '</p>';\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (err, path) {\n    if (err) {\n        return callback(err);\n    }\n    LinkProcessorUtil.generatePreviewsFromImage(ctx, path, opts, callback);\n}",
    "receiverBase": "PreviewUtil",
    "receiverCallee": "downloadRemoteFile"
  },
  {
    "callback": "function () {\n    Backbone.history.start();\n}",
    "receiverBase": "",
    "receiverCallee": "$"
  },
  {
    "callback": "function (f, define) {\n    define([], f);\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_) {\n    'use strict';\n    return function (ctx) {\n        ctx.fillStyle = '#AAA';\n        ctx.fillRect(0, 0, this.width, this.height);\n        _.forEach(this.entities, function (entity) {\n            entity.draw(ctx);\n        });\n    };\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function (entity) {\n    entity.draw(ctx);\n}",
    "receiverBase": "_",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (x) {\n    return x.passed;\n}",
    "receiverBase": "assertions",
    "receiverCallee": "map"
  },
  {
    "callback": "function (x, y) {\n    return x && y;\n}",
    "receiverBase": "map",
    "receiverCallee": "reduce"
  },
  {
    "callback": "function () {\n    var elem = document.createElement('div');\n    assert(H.test.cssProp(elem, 'transition'), 'transitions standard, supported');\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  },
  {
    "callback": "function () {\n    location = getService('location');\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    expect(location).to.be.an('object');\n    expect(location.get).to.be.a('function');\n    expect(location.ready).to.be.a('function');\n    expect(location.onReadyTasks).to.be.a('function');\n    expect(location.isReady).to.be.false;\n    expect(location.gpsAvailable).to.be.true;\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    navStub.callsArgWith(0, loc);\n    location.get(function () {\n        expect(location.current).to.be.an('object');\n        expect(location.current).to.deep.equal(testLoc);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(location.current).to.be.an('object');\n    expect(location.current).to.deep.equal(testLoc);\n}",
    "receiverBase": "location",
    "receiverCallee": "get"
  },
  {
    "callback": "function () {\n    navStub.callsArgWith(1, {\n        code: 2,\n        message: 'Location information is unavailable.'\n    });\n    location.get(null, function () {\n        expect(location.gpsAvailable).to.be.false;\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(location.gpsAvailable).to.be.false;\n}",
    "receiverBase": "location",
    "receiverCallee": "get"
  },
  {
    "callback": "function () {\n    var callback = sinon.spy();\n    location.isReady = true;\n    location.ready(callback);\n    sinon.assert.called(callback);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (css) {\n    analyzer.setMetric('length', css.length);\n}",
    "receiverBase": "analyzer",
    "receiverCallee": "on"
  }
]