[
  {
    "callback": "function () {\n    dust.load(name, stream.head, Context.wrap(context)).end();\n}",
    "receiverBase": "dust",
    "receiverCallee": "nextTick"
  },
  {
    "callback": "function () {\n    tmpl(master.head, Context.wrap(context)).end();\n}",
    "receiverBase": "dust",
    "receiverCallee": "nextTick"
  },
  {
    "callback": "function (chunk) {\n    dust.onLoad(name, function (err, src) {\n        if (err)\n            return chunk.setError(err);\n        if (!dust.cache[name])\n            dust.loadSource(dust.compile(src, name));\n        dust.cache[name](chunk, context).end();\n    });\n}",
    "receiverBase": "chunk",
    "receiverCallee": "map"
  },
  {
    "callback": "function (err, src) {\n    if (err)\n        return chunk.setError(err);\n    if (!dust.cache[name])\n        dust.loadSource(dust.compile(src, name));\n    dust.cache[name](chunk, context).end();\n}",
    "receiverBase": "dust",
    "receiverCallee": "onLoad"
  },
  {
    "callback": "function () {\n    if (typeof process !== 'undefined') {\n        return process.nextTick;\n    } else {\n        return function (callback) {\n            setTimeout(callback, 0);\n        };\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (data) {\n    stream.write(data, 'utf8');\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    stream.end();\n}",
    "receiverBase": "on",
    "receiverCallee": "on"
  },
  {
    "callback": "function (err) {\n    stream.error(err);\n}",
    "receiverBase": "on",
    "receiverCallee": "on"
  },
  {
    "callback": "function (name, chunk) {\n    dust.load(name, chunk, partialContext).end();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "capture"
  },
  {
    "callback": "function (chunk) {\n    var stub = new Stub(function (err, out) {\n            if (err) {\n                chunk.setError(err);\n            } else {\n                callback(out, chunk);\n            }\n        });\n    body(stub.head, context).end();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "map"
  },
  {
    "callback": "function (f, define) {\n    define([\n        './kendo.mobile.pane',\n        './kendo.router'\n    ], f);\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    if (that.os.variant && (that.os.skin && that.os.skin === that.os.name) || !that.os.skin) {\n        that.element.removeClass('km-wp-dark km-wp-light km-wp-dark-force km-wp-light-force').addClass(wp8Background(that.os));\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "proxy"
  },
  {
    "callback": "function () {\n    element.removeClass('km-horizontal km-vertical').addClass(getOrientationClass(element));\n    if (that.options.useNativeScrolling) {\n        setMinimumHeight(element);\n    }\n    if (BROKEN_WEBVIEW_RESIZE) {\n        that._resizeToScreenHeight();\n    }\n    if (BERRYPHONEGAP) {\n        applyViewportHeight();\n    }\n    kendo.resize(element);\n}",
    "receiverBase": "kendo",
    "receiverCallee": "onResize"
  },
  {
    "callback": "function () {\n    setTimeout(window.scrollTo, 0, 0, 1);\n}",
    "receiverBase": "kendo",
    "receiverCallee": "onResize"
  },
  {
    "callback": "function (e) {\n    var title = e.view.title;\n    document.title = title !== undefined ? title : defaultTitle;\n}",
    "receiverBase": "pane",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    return this.setImmediate || process.nextTick;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (e) {\n    if ('object' == typeof exports && 'undefined' != typeof module)\n        module.exports = e();\n    else if ('function' == typeof define && define.amd)\n        define([], e);\n    else {\n        var f;\n        'undefined' != typeof window ? f = window : 'undefined' != typeof global ? f = global : 'undefined' != typeof self && (f = self), f.Quill = e();\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (e) {\n    var n = t[o][1][e];\n    return s(n ? n : e);\n}",
    "receiverBase": "t",
    "receiverCallee": "call"
  },
  {
    "callback": "function () {\n    try {\n        var o = {}, func = isNative(func = Object.defineProperty) && func, result = func(o, o, o) && func;\n    } catch (e) {\n    }\n    return result;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    return this;\n}",
    "receiverBase": "reThis",
    "receiverCallee": "test"
  },
  {
    "callback": "function (objValue, key) {\n    result[key] = baseClone(objValue, isDeep, callback, stackA, stackB);\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    function Object() {\n    }\n    return function (prototype) {\n        if (isObject(prototype)) {\n            Object.prototype = prototype;\n            var result = new Object();\n            Object.prototype = null;\n        }\n        return result || root.Object();\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (value, key, b) {\n    if (hasOwnProperty.call(b, key)) {\n        size++;\n        return result = hasOwnProperty.call(a, key) && baseIsEqual(a[key], value, callback, isWhere, stackA, stackB);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "forIn"
  },
  {
    "callback": "function (value, key, a) {\n    if (hasOwnProperty.call(a, key)) {\n        return result = --size > -1;\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "forIn"
  },
  {
    "callback": "function (value, key) {\n    props.push(key);\n}",
    "receiverBase": "",
    "receiverCallee": "forIn"
  },
  {
    "callback": "function (value, key, object) {\n    if (!callback(value, key, object)) {\n        result[key] = value;\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "forIn"
  },
  {
    "callback": "function (value, index, collection) {\n    return result = !!callback(value, index, collection);\n}",
    "receiverBase": "",
    "receiverCallee": "forOwn"
  },
  {
    "callback": "function (value) {\n    result[++index] = (isFunc ? methodName : value[methodName]).apply(value, args);\n}",
    "receiverBase": "",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (value, key, collection) {\n    result[++index] = callback(value, key, collection);\n}",
    "receiverBase": "",
    "receiverCallee": "forOwn"
  },
  {
    "callback": "function (value, index, collection) {\n    accumulator = noaccum ? (noaccum = false, value) : callback(accumulator, value, index, collection);\n}",
    "receiverBase": "",
    "receiverCallee": "forOwn"
  },
  {
    "callback": "function () {\n    func.apply(undefined, args);\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    return lodash;\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function () {\n    return EventEmitter;\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function (op) {\n    if (Op.isInsert(op)) {\n        return new InsertOp(op.value, op.attributes);\n    } else if (Op.isRetain(op)) {\n        return new RetainOp(op.start, op.end, op.attributes);\n    } else {\n        return null;\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "map"
  },
  {
    "callback": "function (op) {\n    if (Op.isRetain(op)) {\n        return op;\n    } else if (Op.isInsert(op)) {\n        return op;\n    } else {\n        throw new Error('Creating delta with invalid op. Expecting an insert or retain.');\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "map"
  },
  {
    "callback": "function (count, op) {\n    return count + op.getLength();\n}",
    "receiverBase": "_",
    "receiverCallee": "reduce"
  },
  {
    "callback": "function (_this) {\n    return function (op) {\n        _.each(op.attributes, function (value, format) {\n            if (value === null) {\n                return applyAttrFn.call(context, op.start, op.end - op.start, format, value);\n            }\n        });\n        return _.each(op.attributes, function (value, format) {\n            if (value != null) {\n                return applyAttrFn.call(context, op.start, op.end - op.start, format, value);\n            }\n        });\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (value, format) {\n    if (value === null) {\n        return applyAttrFn.call(context, op.start, op.end - op.start, format, value);\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (value, format) {\n    if (value != null) {\n        return applyAttrFn.call(context, op.start, op.end - op.start, format, value);\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (opInA) {\n    if (Op.isInsert(opInA)) {\n        return new InsertOp(opInA.value, opInA.composeAttributes(opInB.attributes));\n    } else {\n        return new RetainOp(opInA.start, opInA.end, opInA.composeAttributes(opInB.attributes));\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "map"
  },
  {
    "callback": "function (op) {\n    return Op.isInsert(op);\n}",
    "receiverBase": "_",
    "receiverCallee": "all"
  },
  {
    "callback": "function (op) {\n    return Op.isInsert(op);\n}",
    "receiverBase": "_",
    "receiverCallee": "all"
  },
  {
    "callback": "function (opInA) {\n    var attributes, e, start;\n    attributes = decomposeAttributes(opInA.attributes, opInC.attributes);\n    start = op.start + offsetA + offsetC;\n    e = new RetainOp(start, start + opInA.getLength(), attributes);\n    ops.push(e);\n    return offsetA += opInA.getLength();\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (delta) {\n    return _.map(delta.ops, function (op) {\n        if (op.value != null) {\n            return op.value;\n        } else {\n            return '';\n        }\n    }).join('');\n}",
    "receiverBase": "_",
    "receiverCallee": "map"
  },
  {
    "callback": "function (op) {\n    if (op.value != null) {\n        return op.value;\n    } else {\n        return '';\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "map"
  },
  {
    "callback": "function (part) {\n    if (part.added) {\n        ops.push(new InsertOp(part.value));\n        return finalLength += part.value.length;\n    } else if (part.removed) {\n        return originalLength += part.value.length;\n    } else {\n        ops.push(new RetainOp(originalLength, originalLength + part.value.length));\n        originalLength += part.value.length;\n        return finalLength += part.value.length;\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (transformEndLength, op) {\n    return transformEndLength + op.getLength();\n}",
    "receiverBase": "_",
    "receiverCallee": "reduce"
  },
  {
    "callback": "function (op, i) {\n    return op.isEqual(other.ops[i]);\n}",
    "receiverBase": "_",
    "receiverCallee": "all"
  },
  {
    "callback": "function (op) {\n    return Op.isInsert(op);\n}",
    "receiverBase": "_",
    "receiverCallee": "every"
  },
  {
    "callback": "function (_this) {\n    return function (op) {\n        if (Op.isRetain(op)) {\n            return new RetainOp(op.start + _this.startLength, op.end + _this.startLength, op.attributes);\n        } else {\n            return op;\n        }\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (offset, op) {\n    var left, right, _ref;\n    if (offset + op.getLength() <= index) {\n        leftOps.push(op);\n    } else if (offset >= index) {\n        rightOps.push(op);\n    } else {\n        _ref = op.split(index - offset), left = _ref[0], right = _ref[1];\n        leftOps.push(left);\n        rightOps.push(right);\n    }\n    return offset + op.getLength();\n}",
    "receiverBase": "_",
    "receiverCallee": "reduce"
  },
  {
    "callback": "function () {\n    return domain.alphabet[_.random(0, domain.alphabet.length - 1)];\n}",
    "receiverBase": "_",
    "receiverCallee": "map"
  },
  {
    "callback": "function (length, op) {\n    return length + op.getLength();\n}",
    "receiverBase": "_",
    "receiverCallee": "reduce"
  },
  {
    "callback": "function (op) {\n    return InsertOp.isInsert(op);\n}",
    "receiverBase": "_",
    "receiverCallee": "every"
  },
  {
    "callback": "function (op) {\n    return InsertOp.isInsert(op);\n}",
    "receiverBase": "_",
    "receiverCallee": "every"
  },
  {
    "callback": "function (op) {\n    return InsertOp.isInsert(op);\n}",
    "receiverBase": "_",
    "receiverCallee": "every"
  },
  {
    "callback": "function (length, delta) {\n    return length + delta.getLength();\n}",
    "receiverBase": "_",
    "receiverCallee": "reduce"
  },
  {
    "callback": "function (val) {\n    return val !== null;\n}",
    "receiverBase": "_",
    "receiverCallee": "all"
  },
  {
    "callback": "function (entry) {\n    return ' ' + entry;\n}",
    "receiverBase": "lines",
    "receiverCallee": "map"
  },
  {
    "callback": "function (entry) {\n    return (current.added ? '+' : '-') + entry;\n}",
    "receiverBase": "lines",
    "receiverCallee": "map"
  },
  {
    "callback": "function (c) {\n    return c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase();\n}",
    "receiverBase": "String",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (m) {\n    return '&' + reversedEscapeChars[m] + ';';\n}",
    "receiverBase": "String",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (entity, entityCode) {\n    var match;\n    if (entityCode in escapeChars) {\n        return escapeChars[entityCode];\n    } else if (match = entityCode.match(/^#x([\\da-fA-F]+)$/)) {\n        return String.fromCharCode(parseInt(match[1], 16));\n    } else if (match = entityCode.match(/^#(\\d+)$/)) {\n        return String.fromCharCode(~~match[1]);\n    } else {\n        return entity;\n    }\n}",
    "receiverBase": "String",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (c) {\n    return c.toUpperCase();\n}",
    "receiverBase": "str",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (match, c) {\n    return c ? c.toUpperCase() : '';\n}",
    "receiverBase": "trim",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (c) {\n    var index = from.indexOf(c);\n    return to.charAt(index) || '-';\n}",
    "receiverBase": "toLowerCase",
    "receiverCallee": "replace"
  },
  {
    "callback": "function () {\n    return _s;\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function (child) {\n    if (child.tagName !== DOM.DEFAULT_BREAK_TAG) {\n        return line.node.appendChild(child);\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (line, i) {\n    line.optimize();\n    return true;\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (line) {\n    return _.clone(line.delta.ops);\n}",
    "receiverBase": "_",
    "receiverCallee": "map"
  },
  {
    "callback": "function (event) {\n    var arg, propogate;\n    arg = lastKeyEvent && (eventName === 'keydown' || eventName === 'keyup') ? lastKeyEvent : event;\n    propogate = listener(arg);\n    if (!propogate) {\n        event.preventDefault();\n        event.stopPropagation();\n    }\n    return propogate;\n}",
    "receiverBase": "node",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function (value, name) {\n    if (!(_.indexOf(exception, name) > -1)) {\n        return node.removeAttribute(name);\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (styles, str) {\n    var name, value, _ref;\n    _ref = str.split(':'), name = _ref[0], value = _ref[1];\n    if (name && value) {\n        name = name.trim();\n        value = value.trim();\n        styles[name.toLowerCase()] = value;\n    }\n    return styles;\n}",
    "receiverBase": "_",
    "receiverCallee": "reduce"
  },
  {
    "callback": "function (child) {\n    return newParent.appendChild(child);\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (value, name) {\n    return node.setAttribute(name, value);\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (style, name) {\n    return '' + name + ': ' + style;\n}",
    "receiverBase": "_",
    "receiverCallee": "map"
  },
  {
    "callback": "function (value, name) {\n    return newNode.setAttribute(name, value);\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (child) {\n    return node.parentNode.insertBefore(child, next);\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (_this) {\n    return function (range) {\n        return _this.savedRange = range;\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function () {\n        delta.apply(_this._insertAt, _this._deleteAt, _this._formatAt, _this);\n        return _this.selection.shiftAfter(0, 0, _.bind(_this.doc.optimizeLines, _this.doc));\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (value, format) {\n    return line.format(format, formatting[format]);\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (delta) {\n    return _.reduce(delta.ops, function (count, op) {\n        if (op.value != null) {\n            count += op.value.length;\n        }\n        return count;\n    }, 0);\n}",
    "receiverBase": "_",
    "receiverCallee": "map"
  },
  {
    "callback": "function (count, op) {\n    if (op.value != null) {\n        count += op.value.length;\n    }\n    return count;\n}",
    "receiverBase": "_",
    "receiverCallee": "reduce"
  },
  {
    "callback": "function (_this) {\n    return function () {\n        _this.selection.preserve(_.bind(_this.doc.rebuild, _this.doc));\n        return _this.selection.shiftAfter(0, 0, _.bind(_this.doc.optimizeLines, _this.doc));\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_super) {\n    __extends(ColorPicker, _super);\n    function ColorPicker() {\n        ColorPicker.__super__.constructor.apply(this, arguments);\n        DOM.addClass(this.container, 'ql-color-picker');\n    }\n    ColorPicker.prototype.buildItem = function (picker, option, index) {\n        var item;\n        item = ColorPicker.__super__.buildItem.call(this, picker, option, index);\n        item.style.backgroundColor = option.value;\n        return item;\n    };\n    return ColorPicker;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    function Node(data) {\n        this.data = data;\n        this.prev = this.next = null;\n    }\n    return Node;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function () {\n        _this.close();\n        return true;\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function () {\n        return _.defer(function () {\n            return DOM.toggleClass(_this.container, 'ql-expanded');\n        });\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    return DOM.toggleClass(_this.container, 'ql-expanded');\n}",
    "receiverBase": "_",
    "receiverCallee": "defer"
  },
  {
    "callback": "function (_this) {\n    return function () {\n        var item, option;\n        if (_this.select.selectedIndex > -1) {\n            item = _this.container.querySelectorAll('.ql-picker-item')[_this.select.selectedIndex];\n            option = _this.select.options[_this.select.selectedIndex];\n        }\n        _this.selectItem(item, false);\n        return DOM.toggleClass(_this.label, 'ql-active', option !== DOM.getDefaultOption(_this.select));\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function () {\n        _this.selectItem(item, true);\n        return _this.close();\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function (value, name) {\n        return _this.container.setAttribute(name, value);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function (option, i) {\n        var item;\n        item = _this.buildItem(picker, option, i);\n        return picker.appendChild(item);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (pos) {\n    if (index > pos) {\n        return pos;\n    }\n    if (length >= 0) {\n        return pos + length;\n    } else {\n        return Math.max(index, pos + length);\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "map"
  },
  {
    "callback": "function (format, name) {\n    if (!format.isType(Format.types.LINE) && format.match(node)) {\n        return nodeFormats[name] = format.value(node);\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (_this) {\n    return function (node, value, name) {\n        return _this.doc.formats[name].add(node, value);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function (leaf) {\n        return DOM.isAncestor(_this.node, leaf.node);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function (formats, format, name) {\n        if (format.isType(Format.types.LINE)) {\n            if (format.match(_this.node)) {\n                formats[name] = format.value(_this.node);\n            } else {\n                delete formats[name];\n            }\n        }\n        return formats;\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function (leaf) {\n        _this.length += leaf.length;\n        return new Tandem.InsertOp(leaf.text, leaf.formats);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (op) {\n    if (Tandem.InsertOp.isInsert(op) || _.keys(op.attributes).length > 0) {\n        return op.attributes['author'] = _this.options.authorId;\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (index, text) {\n    return authorDelta = authorDelta.compose(Tandem.Delta.makeRetainDelta(delta.endLength, index, text.length, attribute));\n}",
    "receiverBase": "delta",
    "receiverCallee": "apply"
  },
  {
    "callback": "function () {\n}",
    "receiverBase": "delta",
    "receiverCallee": "apply"
  },
  {
    "callback": "function (index, length, name, value) {\n    return authorDelta = authorDelta.compose(Tandem.Delta.makeRetainDelta(delta.endLength, index, length, attribute));\n}",
    "receiverBase": "delta",
    "receiverCallee": "apply"
  },
  {
    "callback": "function (_this) {\n    return function () {\n        DOM.toggleClass(button, 'ql-on');\n        return _this.enable(DOM.hasClass(button, 'ql-on'));\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function (toolbar) {\n        return toolbar.initFormat('image', _.bind(_this._onToolbar, _this));\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function () {\n        return _this.textbox.setSelectionRange(_this.textbox.value.length, _this.textbox.value.length);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (op) {\n    return op.attributes[format];\n}",
    "receiverBase": "_",
    "receiverCallee": "all"
  },
  {
    "callback": "function (_this) {\n    return function (key) {\n        return _this.addHotkey(key, function () {\n            return _this.quill.getLength() > 1;\n        });\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    return _this.quill.getLength() > 1;\n}",
    "receiverBase": "_this",
    "receiverCallee": "addHotkey"
  },
  {
    "callback": "function (_this) {\n    return function (range) {\n        _this._onTab(range, false);\n        return false;\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function (range) {\n        return false;\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function (format) {\n        return _this.addHotkey(Keyboard.hotkeys[format.toUpperCase()], function (range) {\n            _this.toggleFormat(range, format);\n            return false;\n        });\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (range) {\n    _this.toggleFormat(range, format);\n    return false;\n}",
    "receiverBase": "_this",
    "receiverCallee": "addHotkey"
  },
  {
    "callback": "function (hotkey) {\n    if (hotkey.metaKey != null && (event.metaKey !== hotkey.metaKey && event.ctrlKey !== hotkey.metaKey)) {\n        return;\n    }\n    if (hotkey.shiftKey != null && event.shiftKey !== hotkey.shiftKey) {\n        return;\n    }\n    return prevent = hotkey.callback(_this.quill.getSelection()) === false || prevent;\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (_this) {\n    return function (range) {\n        var anchor;\n        if (!(range != null && range.isCollapsed())) {\n            return;\n        }\n        anchor = _this._findAnchor(range);\n        if (anchor) {\n            _this.setMode(anchor.href, false);\n            return _this.show(anchor);\n        } else {\n            _this.range = null;\n            return _this.hide();\n        }\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function () {\n        return _this.setMode(_this.link.href, true);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function (toolbar) {\n        return toolbar.initFormat('link', _.bind(_this._onToolbar, _this));\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function () {\n        return _this.textbox.setSelectionRange(url.length, url.length);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function () {\n        DOM.addClass(cursor.elem, 'hidden');\n        return cursor.timer = null;\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function () {\n        return _this.moveCursor(userId, index);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function (cursor, id) {\n        if (!(cursor && (cursor.index > index || cursor.userId === authorId))) {\n            return;\n        }\n        return cursor.index += Math.max(length, index - cursor.index);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function (cursor, id) {\n        if (cursor == null) {\n            return;\n        }\n        _this._updateCursor(cursor);\n        return true;\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function (index, text, formatting) {\n        return _this.shiftCursors(index, text.length, formatting['author']);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function (index, length) {\n        return _this.shiftCursors(index, -1 * length, null);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function (index, length, name, value) {\n        return _this.shiftCursors(index, 0, null);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (range, value) {\n    if (_this.triggering) {\n        return;\n    }\n    if (range.isCollapsed()) {\n        _this.quill.prepareFormat(format, value);\n    } else if (Toolbar.formats.LINE[format] != null) {\n        _this.quill.formatLine(range, format, value, 'user');\n    } else {\n        _this.quill.formatText(range, format, value, 'user');\n    }\n    return _.defer(function () {\n        _this.updateActive(range);\n        return _this.setActive(format, value);\n    });\n}",
    "receiverBase": "_this",
    "receiverCallee": "initFormat"
  },
  {
    "callback": "function () {\n    _this.updateActive(range);\n    return _this.setActive(format, value);\n}",
    "receiverBase": "_",
    "receiverCallee": "defer"
  },
  {
    "callback": "function (_this) {\n    return function () {\n        return false;\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function () {\n        var range, value;\n        value = eventName === 'change' ? DOM.getSelectValue(input) : !DOM.hasClass(input, 'ql-active');\n        _this.preventUpdate = true;\n        _this.quill.focus();\n        range = _this.quill.getSelection();\n        if (range != null) {\n            callback(range, value);\n        }\n        _this.preventUpdate = false;\n        return true;\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function (input, format) {\n        _this.setActive(format, activeFormats[format]);\n        return true;\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (name) {\n    if (Toolbar.formats.SELECT[name] != null) {\n        if (_.isArray(activeFormats[name])) {\n            if (_.indexOf(activeFormats[name], formats[name]) < 0) {\n                return activeFormats[name].push(formats[name]);\n            }\n        } else if (activeFormats[name] !== formats[name]) {\n            return activeFormats[name] = [\n                activeFormats[name],\n                formats[name]\n            ];\n        }\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (name) {\n    if (Toolbar.formats.TOGGLE[name] != null) {\n        return delete activeFormats[name];\n    } else if (Toolbar.formats.SELECT[name] != null && !_.isArray(activeFormats[name])) {\n        return activeFormats[name] = [activeFormats[name]];\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (name) {\n    if (Toolbar.formats.SELECT[name] != null) {\n        return activeFormats[name] = [formats[name]];\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (_this) {\n    return function (delta, source) {\n        if (source === 'user' && _this.container.style.left !== Tooltip.HIDE_MARGIN) {\n            _this.range = null;\n            return _this.hide();\n        }\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function (event) {\n        switch (event.which) {\n        case DOM.KEYS.ENTER:\n            return enterCallback.call(_this);\n        case DOM.KEYS.ESCAPE:\n            return escapeCallback.call(_this);\n        default:\n            return true;\n        }\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function (keyboard) {\n        keyboard.addHotkey(UndoManager.hotkeys.UNDO, function () {\n            _this.undo();\n            return false;\n        });\n        return keyboard.addHotkey(UndoManager.hotkeys.REDO, function () {\n            _this.redo();\n            return false;\n        });\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    _this.undo();\n    return false;\n}",
    "receiverBase": "keyboard",
    "receiverCallee": "addHotkey"
  },
  {
    "callback": "function () {\n    _this.redo();\n    return false;\n}",
    "receiverBase": "keyboard",
    "receiverCallee": "addHotkey"
  },
  {
    "callback": "function (_this) {\n    return function (delta, origin) {\n        if (delta.isEqual(_this.emittedDelta)) {\n            _this.emittedDelta = null;\n            return;\n        }\n        _this.record(delta, _this.oldDelta);\n        return _this.oldDelta = _this.quill.getContents();\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (index, text) {\n    return lastIndex = Math.max(index + text.length, lastIndex);\n}",
    "receiverBase": "delta",
    "receiverCallee": "apply"
  },
  {
    "callback": "function (index, length) {\n    return lastIndex = Math.max(index, lastIndex);\n}",
    "receiverBase": "delta",
    "receiverCallee": "apply"
  },
  {
    "callback": "function (index, length) {\n    return lastIndex = Math.max(index + length, lastIndex);\n}",
    "receiverBase": "delta",
    "receiverCallee": "apply"
  },
  {
    "callback": "function (_this) {\n    return function (br) {\n        if (br.nextSibling != null && (!DOM.isIE(10) || br.previousSibling != null)) {\n            return Utils.splitAncestors(br.nextSibling, lineNode.parentNode);\n        }\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (style, attribute) {\n    var value;\n    if (node.hasAttribute(attribute)) {\n        value = node.getAttribute(attribute);\n        if (attribute === 'size') {\n            value = Utils.convertFontSize(value);\n        }\n        node.style[style] = value;\n        return node.removeAttribute(attribute);\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (value, key) {\n    return Normalizer.STYLES[key] == null;\n}",
    "receiverBase": "_",
    "receiverCallee": "omit"
  },
  {
    "callback": "function (span) {\n    var attributes;\n    attributes = DOM.getAttributes(span);\n    if (_.keys(attributes).length === 0) {\n        return DOM.unwrap(span);\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (_this) {\n    return function (option, name) {\n        return _this.addModule(name, option);\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function (formats, value, name) {\n        var format;\n        format = _this.editor.doc.formats[name];\n        if (!(value && value !== format.config['default'])) {\n            formats[name] = null;\n        }\n        return formats;\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (moduleName, module) {\n    if (moduleName === name) {\n        return callback(module);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "on"
  },
  {
    "callback": "function (i) {\n    rule += ' > ol';\n    DEFAULT_STYLES[rule] = { 'list-style-type': LIST_STYLES[i % 3] };\n    return rule += ' > li';\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (value, key) {\n    var innerStr;\n    innerStr = _.map(value, function (innerValue, innerKey) {\n        return '' + innerKey + ': ' + innerValue + ';';\n    }).join(' ');\n    return '' + key + ' { ' + innerStr + ' }';\n}",
    "receiverBase": "_",
    "receiverCallee": "map"
  },
  {
    "callback": "function (innerValue, innerKey) {\n    return '' + innerKey + ': ' + innerValue + ';';\n}",
    "receiverBase": "_",
    "receiverCallee": "map"
  },
  {
    "callback": "function (_this) {\n    return function () {\n        return _this.root.focus();\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    DefaultTheme.OPTIONS = {};\n    function DefaultTheme(quill) {\n        this.quill = quill;\n        this.editor = this.quill.editor;\n        this.editorContainer = this.editor.root;\n    }\n    return DefaultTheme;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_this) {\n    return function (range) {\n        if (range != null) {\n            return _.invoke(_this.pickers, 'close');\n        }\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (cursor) {\n    var bottomTriangle, topTriangle;\n    bottomTriangle = cursor.elem.querySelector('.cursor-triangle.bottom');\n    topTriangle = cursor.elem.querySelector('.cursor-triangle.top');\n    return bottomTriangle.style.borderTopColor = topTriangle.style.borderBottomColor = cursor.color;\n}",
    "receiverBase": "module",
    "receiverCallee": "on"
  },
  {
    "callback": "function (item, i) {\n    if (i < 7) {\n        return DOM.addClass(item, 'ql-primary-color');\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (node) {\n    if (DOM.getText(node).trim().length === 0) {\n        return DOM.removeNode(node);\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    self.flipCard();\n}",
    "receiverBase": "cardBack",
    "receiverCallee": "click"
  },
  {
    "callback": "function () {\n    self.flipCard();\n}",
    "receiverBase": "cardFront",
    "receiverCallee": "click"
  },
  {
    "callback": "function () {\n    if (this.getEnableLoader() !== false) {\n        Ext.require(this.getProfiles(), this.onProfilesLoaded, this);\n    }\n}",
    "receiverBase": "Ext",
    "receiverCallee": "require"
  },
  {
    "callback": "function (storeName) {\n    if (Ext.isString(storeName)) {\n        classes.push(storeName);\n    }\n}",
    "receiverBase": "Ext",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    html.removeCls(transitionCls);\n}",
    "receiverBase": "Ext",
    "receiverCallee": "defer"
  },
  {
    "callback": "function (size) {\n    callback(size !== -1);\n}",
    "receiverBase": "self",
    "receiverCallee": "getFileSize"
  },
  {
    "callback": "function () {\n    f();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (err, stats) {\n    callback(!err && stats.isFile());\n}",
    "receiverBase": "fs",
    "receiverCallee": "stat"
  },
  {
    "callback": "function (err, data) {\n    if (err) {\n        return callback(err);\n    }\n    callback(null, self.parseXML(data));\n}",
    "receiverBase": "",
    "receiverCallee": "readFile"
  },
  {
    "callback": "function (err) {\n    callback(err || null);\n}",
    "receiverBase": "fs",
    "receiverCallee": "writeFile"
  },
  {
    "callback": "function (err, fd) {\n    if (err) {\n        callback(err);\n        return;\n    }\n    var buffer = new Buffer(length);\n    fs.read(fd, buffer, 0, length, offset, function (err, bytesRead) {\n        fs.close(fd);\n        callback(err, buffer);\n    });\n}",
    "receiverBase": "fs",
    "receiverCallee": "open"
  },
  {
    "callback": "function (err, bytesRead) {\n    fs.close(fd);\n    callback(err, buffer);\n}",
    "receiverBase": "fs",
    "receiverCallee": "read"
  },
  {
    "callback": "function (err, stats) {\n    if (err) {\n        callback(-1);\n    } else {\n        callback(stats.size);\n    }\n}",
    "receiverBase": "fs",
    "receiverCallee": "stat"
  },
  {
    "callback": "function () {\n    f();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    var result;\n    if (String(typeof window) !== 'undefined') {\n        result = new BrowserRuntime(window.document.getElementById('logoutput'));\n    } else {\n        if (String(typeof require) !== 'undefined') {\n            result = new NodeJSRuntime();\n        } else {\n            result = new RhinoRuntime();\n        }\n    }\n    return result;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    var a = [], i, codeA = 'A'.charCodeAt(0), codea = 'a'.charCodeAt(0), code0 = '0'.charCodeAt(0);\n    for (i = 0; i < 26; i += 1) {\n        a.push(codeA + i);\n    }\n    for (i = 0; i < 26; i += 1) {\n        a.push(codea + i);\n    }\n    for (i = 0; i < 10; i += 1) {\n        a.push(code0 + i);\n    }\n    a.push('+'.charCodeAt(0));\n    a.push('/'.charCodeAt(0));\n    return a;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (bin) {\n    var t = {}, i, l;\n    for (i = 0, l = bin.length; i < l; i += 1) {\n        t[bin.charAt(i)] = i;\n    }\n    return t;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (m0) {\n    return m0 === '+' ? '-' : '_';\n}",
    "receiverBase": "convertUTF16StringToBase64",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (m0) {\n    return m0 === '-' ? '+' : '/';\n}",
    "receiverBase": "a",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (a, b) {\n    return a.time - b.time;\n}",
    "receiverBase": "arr",
    "receiverCallee": "sort"
  },
  {
    "callback": "function () {\n    test.tearDown();\n    testResults[tname] = lastFailCount === runner.countFailedTests();\n    runAsyncTests(todo.slice(1));\n}",
    "receiverBase": "",
    "receiverCallee": "t"
  },
  {
    "callback": "function () {\n    return core.PositionFilter;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (err, data) {\n    if (err || data === null) {\n        callback(err, data);\n    } else {\n        handleEntryData(data, callback);\n    }\n}",
    "receiverBase": "runtime",
    "receiverCallee": "read"
  },
  {
    "callback": "function (err, data) {\n    if (err || data === null) {\n        callback(err, zip);\n    } else {\n        handleCentralDirectory(data, callback);\n    }\n}",
    "receiverBase": "runtime",
    "receiverCallee": "read"
  },
  {
    "callback": "function (err, data) {\n    if (err || data === null) {\n        return callback(err, null);\n    }\n    var d = runtime.byteArrayToString(data, 'utf8');\n    callback(null, d);\n}",
    "receiverBase": "",
    "receiverCallee": "load"
  },
  {
    "callback": "function (err, data) {\n    if (err) {\n        return handler.rootElementReady(err);\n    }\n    handler.rootElementReady(null, data, true);\n}",
    "receiverBase": "zip",
    "receiverCallee": "loadAsString"
  },
  {
    "callback": "function (err, xmldata) {\n    if (err || xmldata === null) {\n        callback(err, null);\n        return;\n    }\n    var parser = new DOMParser(), dom = parser.parseFromString(xmldata, 'text/xml');\n    callback(null, dom);\n}",
    "receiverBase": "zip",
    "receiverCallee": "loadAsString"
  },
  {
    "callback": "function (err) {\n    if (err) {\n        callback(err);\n        return;\n    }\n    loadAllEntries(position + 1, callback);\n}",
    "receiverBase": "entry",
    "receiverCallee": "load"
  },
  {
    "callback": "function (data) {\n    runtime.writeFile(newurl, data, callback);\n}",
    "receiverBase": "",
    "receiverCallee": "createByteArray"
  },
  {
    "callback": "function (size) {\n    filesize = size;\n    if (filesize < 0) {\n        entriesReadCallback('File \\'' + url + '\\' cannot be read.', zip);\n    } else {\n        runtime.read(url, filesize - 22, 22, function (err, data) {\n            if (err || entriesReadCallback === null || data === null) {\n                entriesReadCallback(err, zip);\n            } else {\n                handleCentralDirectoryEnd(data, entriesReadCallback);\n            }\n        });\n    }\n}",
    "receiverBase": "runtime",
    "receiverCallee": "getFileSize"
  },
  {
    "callback": "function (err, data) {\n    if (err || entriesReadCallback === null || data === null) {\n        entriesReadCallback(err, zip);\n    } else {\n        handleCentralDirectoryEnd(data, entriesReadCallback);\n    }\n}",
    "receiverBase": "runtime",
    "receiverCallee": "read"
  },
  {
    "callback": "function () {\n    var cache;\n    return function () {\n        if (cache === undefined) {\n            cache = func();\n        }\n        return cache;\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    var cache = {}, cachecount = 0;\n    return function (a) {\n        var ahash = a.hash || a.toString(), v;\n        v = cache[ahash];\n        if (v !== undefined) {\n            return v;\n        }\n        cache[ahash] = v = func(a);\n        v.hash = type + cachecount.toString();\n        cachecount += 1;\n        return v;\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    var cache = {};\n    return function (node) {\n        var v, m;\n        m = cache[node.localName];\n        if (m === undefined) {\n            cache[node.localName] = m = {};\n        } else {\n            v = m[node.namespaceURI];\n            if (v !== undefined) {\n                return v;\n            }\n        }\n        m[node.namespaceURI] = v = func(node);\n        return v;\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (p1, p2) {\n    if (p1 === notAllowed) {\n        return p2;\n    }\n    if (p2 === notAllowed) {\n        return p1;\n    }\n    if (p1 === p2) {\n        return p1;\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "memoize2arg"
  },
  {
    "callback": "function (node) {\n    return createChoice(p1.startTagOpenDeriv(node), p2.startTagOpenDeriv(node));\n}",
    "receiverBase": "",
    "receiverCallee": "memoizeNode"
  },
  {
    "callback": "function () {\n    return createChoice(p1.startTagCloseDeriv(), p2.startTagCloseDeriv());\n}",
    "receiverBase": "",
    "receiverCallee": "memoize0arg"
  },
  {
    "callback": "function () {\n    return createChoice(p1.endTagDeriv(), p2.endTagDeriv());\n}",
    "receiverBase": "",
    "receiverCallee": "memoize0arg"
  },
  {
    "callback": "function (p1, p2) {\n    if (p1 === notAllowed || p2 === notAllowed) {\n        return notAllowed;\n    }\n    if (p1 === empty) {\n        return p2;\n    }\n    if (p2 === empty) {\n        return p1;\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "unorderedMemoize2arg"
  },
  {
    "callback": "function (node) {\n    return createChoice(applyAfter(function (p) {\n        return createInterleave(p, p2);\n    }, p1.startTagOpenDeriv(node)), applyAfter(function (p) {\n        return createInterleave(p1, p);\n    }, p2.startTagOpenDeriv(node)));\n}",
    "receiverBase": "",
    "receiverCallee": "memoizeNode"
  },
  {
    "callback": "function (p) {\n    return createInterleave(p, p2);\n}",
    "receiverBase": "",
    "receiverCallee": "applyAfter"
  },
  {
    "callback": "function (p) {\n    return createInterleave(p1, p);\n}",
    "receiverBase": "",
    "receiverCallee": "applyAfter"
  },
  {
    "callback": "function () {\n    return createInterleave(p1.startTagCloseDeriv(), p2.startTagCloseDeriv());\n}",
    "receiverBase": "",
    "receiverCallee": "memoize0arg"
  },
  {
    "callback": "function (p1, p2) {\n    if (p1 === notAllowed || p2 === notAllowed) {\n        return notAllowed;\n    }\n    if (p1 === empty) {\n        return p2;\n    }\n    if (p2 === empty) {\n        return p1;\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "memoize2arg"
  },
  {
    "callback": "function (p) {\n    return createGroup(p, p2);\n}",
    "receiverBase": "",
    "receiverCallee": "applyAfter"
  },
  {
    "callback": "function () {\n    return createGroup(p1.startTagCloseDeriv(), p2.startTagCloseDeriv());\n}",
    "receiverBase": "",
    "receiverCallee": "memoize0arg"
  },
  {
    "callback": "function (p1, p2) {\n    if (p1 === notAllowed || p2 === notAllowed) {\n        return notAllowed;\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "memoize2arg"
  },
  {
    "callback": "function (node) {\n    return applyAfter(function (p) {\n        return createAfter(p, p2);\n    }, p1.startTagOpenDeriv(node));\n}",
    "receiverBase": "",
    "receiverCallee": "memoizeNode"
  },
  {
    "callback": "function (p) {\n    return createAfter(p, p2);\n}",
    "receiverBase": "",
    "receiverCallee": "applyAfter"
  },
  {
    "callback": "function () {\n    return createAfter(p1.startTagCloseDeriv(), p2);\n}",
    "receiverBase": "",
    "receiverCallee": "memoize0arg"
  },
  {
    "callback": "function () {\n    return p1.nullable ? p2 : notAllowed;\n}",
    "receiverBase": "",
    "receiverCallee": "memoize0arg"
  },
  {
    "callback": "function (pf) {\n    return createGroup(pf, createChoice(oneOrMore, empty));\n}",
    "receiverBase": "",
    "receiverCallee": "applyAfter"
  },
  {
    "callback": "function () {\n    return createOneOrMore(p.startTagCloseDeriv());\n}",
    "receiverBase": "",
    "receiverCallee": "memoize0arg"
  },
  {
    "callback": "function (nc, p) {\n    return {\n        type: 'attribute',\n        nullable: false,\n        nc: nc,\n        p: p,\n        attDeriv: function (context, attribute) {\n            if (nc.contains(attribute) && valueMatch(context, p, attribute.nodeValue)) {\n                return empty;\n            }\n            return notAllowed;\n        },\n        startTagCloseDeriv: function () {\n            return notAllowed;\n        }\n    };\n}",
    "receiverBase": "",
    "receiverCallee": "memoize2arg"
  },
  {
    "callback": "function (value) {\n    return {\n        type: 'value',\n        nullable: false,\n        value: value,\n        textDeriv: function (context, text) {\n            return text === value ? empty : notAllowed;\n        },\n        attDeriv: function () {\n            return notAllowed;\n        },\n        startTagCloseDeriv: function () {\n            return this;\n        }\n    };\n}",
    "receiverBase": "",
    "receiverCallee": "memoize1arg"
  },
  {
    "callback": "function (type) {\n    return {\n        type: 'data',\n        nullable: false,\n        dataType: type,\n        textDeriv: function () {\n            return empty;\n        },\n        attDeriv: function () {\n            return notAllowed;\n        },\n        startTagCloseDeriv: function () {\n            return this;\n        }\n    };\n}",
    "receiverBase": "",
    "receiverCallee": "memoize1arg"
  },
  {
    "callback": "function (err, fontdata) {\n    if (err) {\n        runtime.log(err);\n    } else {\n        addFontToCSS(name, embeddedFontDeclarations[name], fontdata, stylesheet);\n    }\n    return loadFontIntoCSS(embeddedFontDeclarations, zip, pos + 1, stylesheet, callback);\n}",
    "receiverBase": "zip",
    "receiverCallee": "load"
  },
  {
    "callback": "function () {\n}",
    "receiverBase": "",
    "receiverCallee": "loadFontIntoCSS"
  },
  {
    "callback": "function (err, url) {\n    self.url = url;\n    if (self.onchange) {\n        self.onchange(self);\n    }\n    if (self.onstatereadychange) {\n        self.onstatereadychange(self);\n    }\n}",
    "receiverBase": "zip",
    "receiverCallee": "loadAsDataURL"
  },
  {
    "callback": "function (err, xmldoc) {\n    if (xmldoc) {\n        handleSettingsXml(xmldoc);\n    }\n    getXmlNode('META-INF/manifest.xml', function (err, xmldoc) {\n        if (xmldoc) {\n            handleManifestXml(xmldoc);\n        }\n        if (self.state !== OdfContainer.INVALID) {\n            setState(OdfContainer.DONE);\n        }\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "getXmlNode"
  },
  {
    "callback": "function (err, xmldoc) {\n    if (xmldoc) {\n        handleManifestXml(xmldoc);\n    }\n    if (self.state !== OdfContainer.INVALID) {\n        setState(OdfContainer.DONE);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "getXmlNode"
  },
  {
    "callback": "function (err, dom) {\n    if (err) {\n        callback(err);\n    } else {\n        handleFlatXml(dom);\n    }\n}",
    "receiverBase": "runtime",
    "receiverCallee": "loadXML"
  },
  {
    "callback": "function (err) {\n    callback(err);\n}",
    "receiverBase": "zip",
    "receiverCallee": "writeAs"
  },
  {
    "callback": "function (xmlerr) {\n    if (err) {\n        zip.error = err + '\\n' + xmlerr;\n        setState(OdfContainer.INVALID);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "loadFromXML"
  },
  {
    "callback": "function () {\n    try {\n        task();\n    } catch (e) {\n        runtime.log(e);\n    }\n    taskRunning = false;\n    if (queue.length > 0) {\n        run(queue.pop());\n    }\n}",
    "receiverBase": "runtime",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    setImage(name, container, node, stylesheet);\n}",
    "receiverBase": "loadingQueue",
    "receiverCallee": "addToQueue"
  },
  {
    "callback": "function () {\n    setVideo(name, container, node, stylesheet);\n}",
    "receiverBase": "loadingQueue",
    "receiverCallee": "addToQueue"
  },
  {
    "callback": "function later_cb() {\n    if (odfcontainer.state === odf.OdfContainer.DONE) {\n        callback();\n    } else {\n        runtime.log('will be back later...');\n        runtime.setTimeout(later_cb, 500);\n    }\n}",
    "receiverBase": "runtime",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (err) {\n    callback(err);\n}",
    "receiverBase": "odfcontainer",
    "receiverCallee": "saveAs"
  },
  {
    "callback": "function (err) {\n    callback(err);\n}",
    "receiverBase": "odfcanvas",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function (nodeAfterCursor, textNodeIncrease) {\n}",
    "receiverBase": "cursor",
    "receiverCallee": "remove"
  },
  {
    "callback": "function () {\n    return gui.SelectionMover;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    blinking = false;\n    blink();\n}",
    "receiverBase": "runtime",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (udata) {\n    cacheUserDatum(userId, udata ? {\n        userid: udata.uid,\n        fullname: udata.fullname,\n        imageurl: '/user/' + udata.uid + '/avatar.png',\n        color: udata.color\n    } : null);\n}",
    "receiverBase": "net",
    "receiverCallee": "getUserData"
  },
  {
    "callback": "function (opspec) {\n    runtime.log('replaying: ' + runtime.toJson(opspec));\n    receiveOpFromNetwork(opspec);\n}",
    "receiverBase": "net",
    "receiverCallee": "requestReplay"
  },
  {
    "callback": "function (count) {\n    runtime.log('replay done (' + count + ' ops).');\n    if (done_cb) {\n        done_cb();\n    }\n}",
    "receiverBase": "net",
    "receiverCallee": "requestReplay"
  },
  {
    "callback": "function (sessionJoinSuccess) {\n    runtime.assert(sessionJoinSuccess, 'Trying to join a session which does not exists or where we are already in');\n}",
    "receiverBase": "net",
    "receiverCallee": "joinSession"
  },
  {
    "callback": "function () {\n    marker.style.opacity = opacity;\n}",
    "receiverBase": "window",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (info) {\n    highlightEdit(info.element, info.memberId, info.timeStamp);\n}",
    "receiverBase": "getOdtDocument",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (info) {\n    if (info.memberId === memberid) {\n        caret.ensureVisible();\n    }\n}",
    "receiverBase": "odtDocument",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (old, pc) {\n    return 0;\n}",
    "receiverBase": "self",
    "receiverCallee": "slideChange"
  },
  {
    "callback": "function (old, pc) {\n    return pc - 1;\n}",
    "receiverBase": "self",
    "receiverCallee": "slideChange"
  },
  {
    "callback": "function (old, pc) {\n    return old + 1 < pc ? old + 1 : -1;\n}",
    "receiverBase": "self",
    "receiverCallee": "slideChange"
  },
  {
    "callback": "function (old, pc) {\n    return old < 1 ? -1 : old - 1;\n}",
    "receiverBase": "self",
    "receiverCallee": "slideChange"
  },
  {
    "callback": "function (tuple) {\n    var name = tuple[0], node = tuple[1];\n    if (node.hasAttribute('slide_current')) {\n        last = i;\n        node.removeAttribute('slide_current');\n    }\n    i += 1;\n}",
    "receiverBase": "pages",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (old, pc) {\n    if (idx >= pc) {\n        return -1;\n    }\n    if (idx < 0) {\n        return -1;\n    }\n    return idx;\n}",
    "receiverBase": "self",
    "receiverCallee": "slideChange"
  },
  {
    "callback": "function () {\n    return ops.Session;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (Collection, Comment) {\n    return Collection.extend({\n        modelName: 'CommentCollection',\n        urlRoot: Comment.prototype.urlRoot,\n        model: Comment,\n        sortField: 'body',\n        sortDir: '-1'\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function (remaining, max) {\n}",
    "receiverBase": "progress",
    "receiverCallee": "push"
  },
  {
    "callback": "function (arg) {\n    if (!/^-/.exec(arg))\n        that.argsWithoutOptions.push(arg);\n    var result = /^--git-dir=(.*)$/.exec(arg);\n    if (result) {\n        if (result[1][0] == '/') {\n            that.gitDir = result[1];\n        } else {\n            that.gitDir = path.join(process.cwd(), result[1]);\n        }\n    } else {\n        result = /^(--.*)/.exec(arg);\n        if (result) {\n            that.argOptions.push(result[1]);\n        }\n    }\n}",
    "receiverBase": "args",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (err, result) {\n    if (err)\n        return next(err);\n    result.row.email = email;\n    return res.send(200, { user: result.row });\n}",
    "receiverBase": "row",
    "receiverCallee": "setPermission"
  },
  {
    "callback": "function (err, accountRow) {\n    if (err)\n        return next(err);\n    if (!accountRow) {\n        Account.put({ email: email }, function (err, result) {\n            if (err)\n                return next(err);\n            Account.getOne({ id: result.insertId }, function (err, newRow) {\n                if (err)\n                    return next(err);\n                return finish(newRow);\n            });\n        });\n    } else {\n        return finish(accountRow);\n    }\n}",
    "receiverBase": "Account",
    "receiverCallee": "getOne"
  },
  {
    "callback": "function (err, result) {\n    if (err)\n        return next(err);\n    Account.getOne({ id: result.insertId }, function (err, newRow) {\n        if (err)\n            return next(err);\n        return finish(newRow);\n    });\n}",
    "receiverBase": "Account",
    "receiverCallee": "put"
  },
  {
    "callback": "function (err, newRow) {\n    if (err)\n        return next(err);\n    return finish(newRow);\n}",
    "receiverBase": "Account",
    "receiverCallee": "getOne"
  },
  {
    "callback": "function (err, accountRow) {\n    if (err)\n        return next(err);\n    if (!accountRow) {\n        var err = new Error('User not found');\n        err.code = 404;\n        return next(err);\n    }\n    accountRow.setPermission(context, null, function (err) {\n        if (err)\n            return next(err);\n        return res.send(200);\n    });\n}",
    "receiverBase": "Account",
    "receiverCallee": "getOne"
  },
  {
    "callback": "function (err) {\n    if (err)\n        return next(err);\n    return res.send(200);\n}",
    "receiverBase": "accountRow",
    "receiverCallee": "setPermission"
  },
  {
    "callback": "function (q) {\n    if (q) {\n        return '(https?|ftps?)\\\\://';\n    }\n    return '';\n}",
    "receiverBase": "regexp",
    "receiverCallee": "buildGroupRE"
  }
]