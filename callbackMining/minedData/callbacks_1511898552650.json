[
  {
    "callback": "function () {\n    FB.XFBML.parse(element[0]);\n    facebookService.Event.subscribe('message.send', messageSendHandler);\n}",
    "receiverBase": "ready",
    "receiverCallee": "then"
  },
  {
    "callback": "function () {\n    facebookService.Event.unsubscribe('message.send', messageSendHandler);\n}",
    "receiverBase": "scope",
    "receiverCallee": "$on"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.object(serviceProperties, 'serviceProperties');\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (currentContainer) {\n    var containerResult = ContainerResult.parse(currentContainer);\n    responseObject.listContainersResult.push(containerResult);\n}",
    "receiverBase": "containers",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.test(function () {\n        return container !== '$logs';\n    }, 'Container name format is incorrect');\n    v.containerNameIsValid(container);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function () {\n    return container !== '$logs';\n}",
    "receiverBase": "v",
    "receiverCallee": "test"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (error, responseContainer, response) {\n    if (error && error.code === Constants.BlobErrorCodeStrings.CONTAINER_ALREADY_EXISTS) {\n        error = null;\n    }\n    callback(error, !azureutil.objectIsNull(responseContainer), response);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "createContainer"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.containerNameIsValid(container);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.containerNameIsValid(container);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.object(metadata, 'metadata');\n    v.containerNameIsValid(container);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.containerNameIsValid(container);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.containerNameIsValid(container);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.containerNameIsValid(container);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.containerNameIsValid(container);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (currentBlob) {\n    var blobResult = BlobResult.parse(currentBlob);\n    responseObject.listBlobsResult.push(blobResult);\n}",
    "receiverBase": "blobs",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.string(blob, 'blob');\n    v.containerNameIsValid(container);\n    v.blobNameIsValid(container, blob);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.string(blob, 'blob');\n    v.containerNameIsValid(container);\n    v.blobNameIsValid(container, blob);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (statErr, stat) {\n    if (statErr) {\n        callback(statErr);\n    } else {\n        operation(stat.size);\n    }\n}",
    "receiverBase": "fs",
    "receiverCallee": "stat"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.string(blob, 'blob');\n    v.containerNameIsValid(container);\n    v.blobNameIsValid(container, blob);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.string(blob, 'blob');\n    v.containerNameIsValid(container);\n    v.blobNameIsValid(container, blob);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.string(blob, 'blob');\n    v.containerNameIsValid(container);\n    v.blobNameIsValid(container, blob);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.string(blob, 'blob');\n    v.containerNameIsValid(container);\n    v.blobNameIsValid(container, blob);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.string(blob, 'blob');\n    v.containerNameIsValid(container);\n    v.blobNameIsValid(container, blob);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.string(blob, 'blob');\n    v.object(metadata, 'metadata');\n    v.containerNameIsValid(container);\n    v.blobNameIsValid(container, blob);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.string(blob, 'blob');\n    v.containerNameIsValid(container);\n    v.blobNameIsValid(container, blob);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (err, response) {\n    if (callback) {\n        var blobResult = null;\n        if (!err) {\n            blobResult = new BlobResult(container, blob);\n            blobResult.metadata = self.parseMetadataHeaders(response.headers);\n            blobResult.getPropertiesFromHeaders(response.headers);\n        }\n        callback(err, blobResult);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "pipeline"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.string(blob, 'blob');\n    v.string(localFilename, 'localFilename');\n    v.containerNameIsValid(container);\n    v.blobNameIsValid(container, blob);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (error, properties) {\n    if (error) {\n        callback(error);\n    } else {\n        self._getBlobToFile(container, blob, properties.blobType, localFilename, options, callback);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "getBlobProperties"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.string(blob, 'blob');\n    v.object(writeStream, 'writeStream');\n    v.containerNameIsValid(container);\n    v.blobNameIsValid(container, blob);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.string(blob, 'blob');\n    v.containerNameIsValid(container);\n    v.blobNameIsValid(container, blob);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.string(blob, 'blob');\n    v.containerNameIsValid(container);\n    v.blobNameIsValid(container, blob);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.string(blob, 'blob');\n    v.containerNameIsValid(container);\n    v.blobNameIsValid(container, blob);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(targetContainer, 'targetContainer');\n    v.string(targetBlob, 'targetBlob');\n    v.containerNameIsValid(targetContainer);\n    v.blobNameIsValid(targetContainer, targetBlob);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.string(blob, 'blob');\n    v.containerNameIsValid(container);\n    v.blobNameIsValid(container, blob);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.string(blob, 'blob');\n    v.containerNameIsValid(container);\n    v.blobNameIsValid(container, blob);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.string(blob, 'blob');\n    v.containerNameIsValid(container);\n    v.blobNameIsValid(container, blob);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.string(blob, 'blob');\n    v.containerNameIsValid(container);\n    v.blobNameIsValid(container, blob);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.string(blob, 'blob');\n    v.containerNameIsValid(container);\n    v.blobNameIsValid(container, blob);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (pageRange) {\n    var range = {\n            start: parseInt(pageRange.Start, 10),\n            end: parseInt(pageRange.End, 10)\n        };\n    responseObject.pageRegions.push(range);\n}",
    "receiverBase": "pageRanges",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.string(blob, 'blob');\n    v.containerNameIsValid(container);\n    v.blobNameIsValid(container, blob);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.string(blob, 'blob');\n    v.containerNameIsValid(container);\n    v.blobNameIsValid(container, blob);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.string(blob, 'blob');\n    v.containerNameIsValid(container);\n    v.blobNameIsValid(container, blob);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.string(blob, 'blob');\n    v.containerNameIsValid(container);\n    v.blobNameIsValid(container, blob);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.containerNameIsValid(container);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.containerNameIsValid(container);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.string(blob, 'blob');\n    v.containerNameIsValid(container);\n    v.blobNameIsValid(container, blob);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.string(blob, 'blob');\n    v.containerNameIsValid(container);\n    v.pageRangesAreValid(rangeStart, rangeEnd, this.writeBlockSizeInBytes);\n    v.blobNameIsValid(container, blob);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.string(blob, 'blob');\n    v.containerNameIsValid(container);\n    v.blobNameIsValid(container, blob);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (err, blob, response) {\n    if (callback) {\n        callback(err, blob, response);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "_createBlobFromChunkStream"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.string(blob, 'blob');\n    v.containerNameIsValid(container);\n    v.blobNameIsValid(container, blob);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.string(blob, 'blob');\n    v.string(localFileName, 'localFileName');\n    v.containerNameIsValid(container);\n    v.blobNameIsValid(container, blob);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function () {\n    self.logger.debug('Range stream has ended.');\n    batchOperations.enableComplete();\n}",
    "receiverBase": "rangeStream",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    self.logger.debug('Range stream resume');\n    rangeStream.resume();\n}",
    "receiverBase": "batchOperations",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    self.logger.debug('Batch operation resume');\n    batchOperations.resume();\n}",
    "receiverBase": "writeStream",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    callback(error, retValue);\n}",
    "receiverBase": "fs",
    "receiverCallee": "unlink"
  },
  {
    "callback": "function () {\n    self.logger.debug('Write stream end');\n    if (writeStream.close) {\n        writeStream.close();\n    }\n    if (!savedBlobResult) {\n        savedBlobResult = {};\n    }\n    savedBlobResult.clientSideContentMD5 = null;\n    if (md5Hash) {\n        savedBlobResult.clientSideContentMD5 = md5Hash.digest('base64');\n    }\n    callback(error, savedBlobResult, savedBlobResponse);\n}",
    "receiverBase": "writeStream",
    "receiverCallee": "end"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (error, stat) {\n    if (error) {\n        callback(error);\n    } else {\n        var stream = new FileReadStream(localFileName);\n        self.createPageBlobFromStream(container, blob, stream, stat.size, options, callback);\n    }\n}",
    "receiverBase": "fs",
    "receiverCallee": "stat"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (error) {\n    if (error) {\n        callback(error);\n    } else {\n        self._createBlobFromStream(container, blob, BlobConstants.BlobTypes.PAGE, stream, streamLength, options, callback);\n    }\n}",
    "receiverBase": "self",
    "receiverCallee": "clearBlobPages"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.string(blob, 'blob');\n    v.containerNameIsValid(container);\n    v.blobNameIsValid(container, blob);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function (o, c) {\n    options = o;\n    callback = c;\n}",
    "receiverBase": "azureutil",
    "receiverCallee": "normalizeArgs"
  },
  {
    "callback": "function (v) {\n    v.string(container, 'container');\n    v.string(blob, 'blob');\n    v.containerNameIsValid(container);\n    v.blobNameIsValid(container, blob);\n    v.callback(callback);\n}",
    "receiverBase": "validate",
    "receiverCallee": "validateArgs"
  },
  {
    "callback": "function () {\n    self.logger.debug(util.format('File read stream ended for blob %s', blob));\n    batchOperations.enableComplete();\n}",
    "receiverBase": "chunkStream",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    self.logger.debug('file stream resume');\n    chunkStream.resume();\n}",
    "receiverBase": "batchOperations",
    "receiverCallee": "on"
  },
  {
    "callback": "function (error, blob, response) {\n    if (!error) {\n        if (!blob)\n            blob = {};\n        blob['commmittedBlocks'] = blockIds;\n    }\n    chunkStream.finish();\n    callback(error, blob, response);\n}",
    "receiverBase": "self",
    "receiverCallee": "setBlobProperties"
  },
  {
    "callback": "function (error, blob, response) {\n    chunkStream.finish();\n    callback(error, blob, response);\n}",
    "receiverBase": "self",
    "receiverCallee": "setBlobProperties"
  },
  {
    "callback": "function (e) {\n    e.preventDefault();\n    startDrag(e);\n}",
    "receiverBase": "dom",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (img) {\n    img.removeAttribute('data-mce-selected');\n}",
    "receiverBase": "",
    "receiverCallee": "each"
  },
  {
    "callback": "function (e) {\n    if (e.target.nodeName != 'TABLE') {\n        hideResizeRect();\n        controlSelect(e.target);\n    }\n}",
    "receiverBase": "editor",
    "receiverCallee": "on"
  },
  {
    "callback": "function (e) {\n    lastMouseDownEvent = e;\n}",
    "receiverBase": "editor",
    "receiverCallee": "on"
  },
  {
    "callback": "function (e) {\n    var nodeName = e.target.nodeName;\n    if (/^(TABLE|IMG|HR)$/.test(nodeName)) {\n        editor.selection.select(e.target, nodeName == 'TABLE');\n        editor.nodeChanged();\n    }\n}",
    "receiverBase": "editor",
    "receiverCallee": "on"
  },
  {
    "callback": "function (e) {\n    if (/^(TABLE|IMG|HR)$/.test(e.target.nodeName)) {\n        e.preventDefault();\n    }\n}",
    "receiverBase": "dom",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (e) {\n    if (selectedElm && selectedElm.nodeName == 'TABLE') {\n        updateResizeRect(e);\n    }\n}",
    "receiverBase": "editor",
    "receiverCallee": "on"
  },
  {
    "callback": "function (Application) {\n    Application.initializer({\n        name: 'store',\n        initialize: function (container, application) {\n            application.register('store:main', container.lookupFactory('store:application') || Ember.Model.Store);\n            application.inject('route', 'store', 'store:main');\n            application.inject('controller', 'store', 'store:main');\n        }\n    });\n}",
    "receiverBase": "Ember",
    "receiverCallee": "onLoad"
  },
  {
    "callback": "function (e) {\n    if (e.ctrlKey && e.which === 13) {\n        $(this).closest('form').submit();\n    }\n}",
    "receiverBase": "$input",
    "receiverCallee": "keydown"
  },
  {
    "callback": "function (err, output) {\n    var lines = output.split('\\n');\n    lines.forEach(function (line) {\n        var parts = line.split(/=/);\n        var key = parts.shift();\n        hash[key] = parts.join('=');\n    });\n    done = true;\n}",
    "receiverBase": "git",
    "receiverCallee": "config"
  },
  {
    "callback": "function (line) {\n    var parts = line.split(/=/);\n    var key = parts.shift();\n    hash[key] = parts.join('=');\n}",
    "receiverBase": "lines",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (err, output) {\n    if (err)\n        return callback(err, output);\n    self.data = null;\n    callback(null, output);\n}",
    "receiverBase": "git",
    "receiverCallee": "config"
  },
  {
    "callback": "function () {\n    this.store('hasFocus', true);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "addEvent"
  },
  {
    "callback": "function () {\n    this.store('hasFocus', false);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "addEvent"
  },
  {
    "callback": "function () {\n    if ($(this).css('display') != 'none') {\n        firstChild = $(this);\n        return false;\n    }\n}",
    "receiverBase": "children",
    "receiverCallee": "each"
  },
  {
    "callback": "function (event) {\n    window.open('https://github.com/mrdoob/three.js/blob/dev/docs/' + section + '/' + path + '.html');\n}",
    "receiverBase": "button",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function (global, factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        module.exports = global.document ? factory(global, true) : function (w) {\n            if (!w.document) {\n                throw new Error('jQuery requires a window with a document');\n            }\n            return factory(w);\n        };\n    } else {\n        factory(global);\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (elem, i) {\n    return callback.call(elem, i, elem);\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "map"
  },
  {
    "callback": "function (i, name) {\n    class2type['[object ' + name + ']'] = name.toLowerCase();\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (elem, i) {\n    return !!qualifier.call(elem, i, elem) !== not;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function (elem) {\n    return elem === qualifier !== not;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function (elem) {\n    return indexOf.call(qualifier, elem) >= 0 !== not;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function (elem) {\n    return elem.nodeType === 1;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function () {\n    for (i = 0; i < len; i++) {\n        if (jQuery.contains(self[i], this)) {\n            return true;\n        }\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "filter"
  },
  {
    "callback": "function () {\n    var i = 0;\n    for (; i < l; i++) {\n        if (jQuery.contains(this, targets[i])) {\n            return true;\n        }\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (_, flag) {\n    object[flag] = true;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function add(args) {\n    jQuery.each(args, function (_, arg) {\n        var type = jQuery.type(arg);\n        if (type === 'function') {\n            if (!options.unique || !self.has(arg)) {\n                list.push(arg);\n            }\n        } else if (arg && arg.length && type !== 'string') {\n            add(arg);\n        }\n    });\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_, arg) {\n    var type = jQuery.type(arg);\n    if (type === 'function') {\n        if (!options.unique || !self.has(arg)) {\n            list.push(arg);\n        }\n    } else if (arg && arg.length && type !== 'string') {\n        add(arg);\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (_, arg) {\n    var index;\n    while ((index = jQuery.inArray(arg, list, index)) > -1) {\n        list.splice(index, 1);\n        if (firing) {\n            if (index <= firingLength) {\n                firingLength--;\n            }\n            if (index <= firingIndex) {\n                firingIndex--;\n            }\n        }\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, tuple) {\n    var fn = jQuery.isFunction(fns[i]) && fns[i];\n    deferred[tuple[1]](function () {\n        var returned = fn && fn.apply(this, arguments);\n        if (returned && jQuery.isFunction(returned.promise)) {\n            returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);\n        } else {\n            newDefer[tuple[0] + 'With'](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);\n        }\n    });\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var returned = fn && fn.apply(this, arguments);\n    if (returned && jQuery.isFunction(returned.promise)) {\n        returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);\n    } else {\n        newDefer[tuple[0] + 'With'](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "deferred"
  },
  {
    "callback": "function (i, tuple) {\n    var list = tuple[2], stateString = tuple[3];\n    promise[tuple[1]] = list.add;\n    if (stateString) {\n        list.add(function () {\n            state = stateString;\n        }, tuples[i ^ 1][2].disable, tuples[2][2].lock);\n    }\n    deferred[tuple[0]] = function () {\n        deferred[tuple[0] + 'With'](this === deferred ? promise : this, arguments);\n        return this;\n    };\n    deferred[tuple[0] + 'With'] = list.fireWith;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    state = stateString;\n}",
    "receiverBase": "list",
    "receiverCallee": "add"
  },
  {
    "callback": "function () {\n    data_user.set(this, key);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var data = data_user.get(this, camelKey);\n    data_user.set(this, camelKey, value);\n    if (key.indexOf('-') !== -1 && data !== undefined) {\n        data_user.set(this, key, value);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    data_user.remove(this, key);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    data_priv.remove(elem, [\n        type + 'queue',\n        key\n    ]);\n}",
    "receiverBase": "Callbacks",
    "receiverCallee": "add"
  },
  {
    "callback": "function () {\n    var queue = jQuery.queue(this, type, data);\n    jQuery._queueHooks(this, type);\n    if (type === 'fx' && queue[0] !== 'inprogress') {\n        jQuery.dequeue(this, type);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.dequeue(this, type);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var fragment = document.createDocumentFragment(), div = fragment.appendChild(document.createElement('div'));\n    div.innerHTML = '<input type=\\'radio\\' checked=\\'checked\\' name=\\'t\\'/>';\n    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;\n    div.innerHTML = '<textarea>x</textarea>';\n    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    jQuery.event.add(this, types, fn, data, selector);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.event.remove(this, types, fn, selector);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.event.trigger(type, data, this);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (value) {\n    return value === undefined ? jQuery.text(this) : this.empty().each(function () {\n        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n            this.textContent = value;\n        }\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "access"
  },
  {
    "callback": "function () {\n    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n        this.textContent = value;\n    }\n}",
    "receiverBase": "empty",
    "receiverCallee": "each"
  },
  {
    "callback": "function (elem) {\n    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n        var target = manipulationTarget(this, elem);\n        target.appendChild(elem);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function (elem) {\n    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n        var target = manipulationTarget(this, elem);\n        target.insertBefore(elem, target.firstChild);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function (elem) {\n    if (this.parentNode) {\n        this.parentNode.insertBefore(elem, this);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function (elem) {\n    if (this.parentNode) {\n        this.parentNode.insertBefore(elem, this.nextSibling);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function () {\n    return jQuery.clone(this, dataAndEvents, deepDataAndEvents);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "map"
  },
  {
    "callback": "function (elem) {\n    arg = this.parentNode;\n    jQuery.cleanData(getAll(this));\n    if (arg) {\n        arg.replaceChild(elem, this);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function (index) {\n    var self = set.eq(index);\n    if (isFunction) {\n        args[0] = value.call(this, index, self.html());\n    }\n    self.domManip(args, callback);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (name, original) {\n    jQuery.fn[name] = function (selector) {\n        var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;\n        for (; i <= last; i++) {\n            elems = i === last ? this : this.clone(true);\n            jQuery(insert[i])[original](elems);\n            push.apply(ret, elems.get());\n        }\n        return this.pushStack(ret);\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (next, hooks) {\n    var timeout = setTimeout(next, time);\n    hooks.stop = function () {\n        clearTimeout(timeout);\n    };\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "queue"
  },
  {
    "callback": "function () {\n    var input = document.createElement('input'), select = document.createElement('select'), opt = select.appendChild(document.createElement('option'));\n    input.type = 'checkbox';\n    support.checkOn = input.value !== '';\n    support.optSelected = opt.selected;\n    select.disabled = true;\n    support.optDisabled = !opt.disabled;\n    input = document.createElement('input');\n    input.value = 't';\n    input.type = 'radio';\n    support.radioValue = input.value === 't';\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    jQuery.removeAttr(this, name);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, name) {\n    var getter = attrHandle[name] || jQuery.find.attr;\n    attrHandle[name] = function (elem, name, isXML) {\n        var ret, handle;\n        if (!isXML) {\n            handle = attrHandle[name];\n            attrHandle[name] = ret;\n            ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;\n            attrHandle[name] = handle;\n        }\n        return ret;\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    delete this[jQuery.propFix[name] || name];\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.propFix[this.toLowerCase()] = this;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (j) {\n    jQuery(this).addClass(value.call(this, j, this.className));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (j) {\n    jQuery(this).removeClass(value.call(this, j, this.className));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i) {\n    jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (value) {\n    return value == null ? '' : value + '';\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    jQuery.valHooks[this] = {\n        set: function (elem, value) {\n            if (jQuery.isArray(value)) {\n                return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;\n            }\n        }\n    };\n    if (!support.checkOn) {\n        jQuery.valHooks[this].get = function (elem) {\n            return elem.getAttribute('value') === null ? 'on' : elem.value;\n        };\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, name) {\n    jQuery.fn[name] = function (data, fn) {\n        return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (_, prefilterOrFactory) {\n    var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);\n    if (typeof dataTypeOrTransport === 'string' && !seekingTransport && !inspected[dataTypeOrTransport]) {\n        options.dataTypes.unshift(dataTypeOrTransport);\n        inspect(dataTypeOrTransport);\n        return false;\n    } else if (seekingTransport) {\n        return !(selected = dataTypeOrTransport);\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jqXHR.abort('timeout');\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (i, method) {\n    jQuery[method] = function (url, data, callback, type) {\n        if (jQuery.isFunction(data)) {\n            type = type || callback;\n            callback = data;\n            data = undefined;\n        }\n        return jQuery.ajax({\n            url: url,\n            type: method,\n            dataType: type,\n            data: data,\n            success: callback\n        });\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, type) {\n    jQuery.fn[type] = function (fn) {\n        return this.on(type, fn);\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i) {\n    jQuery(this).wrapAll(html.call(this, i));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var elem = this;\n    while (elem.firstElementChild) {\n        elem = elem.firstElementChild;\n    }\n    return elem;\n}",
    "receiverBase": "wrap",
    "receiverCallee": "map"
  },
  {
    "callback": "function (i) {\n    jQuery(this).wrapInner(html.call(this, i));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var self = jQuery(this), contents = self.contents();\n    if (contents.length) {\n        contents.wrapAll(html);\n    } else {\n        self.append(html);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i) {\n    jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    if (!jQuery.nodeName(this, 'body')) {\n        jQuery(this).replaceWith(this.childNodes);\n    }\n}",
    "receiverBase": "parent",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, v) {\n    if (traditional || rbracket.test(prefix)) {\n        add(prefix, v);\n    } else {\n        buildParams(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, traditional, add);\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    add(this.name, this.value);\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var elements = jQuery.prop(this, 'elements');\n    return elements ? jQuery.makeArray(elements) : this;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    var type = this.type;\n    return this.name && !jQuery(this).is(':disabled') && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));\n}",
    "receiverBase": "map",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (i, elem) {\n    var val = jQuery(this).val();\n    return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {\n        return {\n            name: elem.name,\n            value: val.replace(rCRLF, '\\r\\n')\n        };\n    }) : {\n        name: elem.name,\n        value: val.replace(rCRLF, '\\r\\n')\n    };\n}",
    "receiverBase": "filter",
    "receiverCallee": "map"
  },
  {
    "callback": "function (val) {\n    return {\n        name: elem.name,\n        value: val.replace(rCRLF, '\\r\\n')\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    for (var key in xhrCallbacks) {\n        xhrCallbacks[key]();\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "on"
  },
  {
    "callback": "function (s) {\n    if (s.cache === undefined) {\n        s.cache = false;\n    }\n    if (s.crossDomain) {\n        s.type = 'GET';\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "ajaxPrefilter"
  },
  {
    "callback": "function () {\n    window[callbackName] = overwritten;\n    if (s[callbackName]) {\n        s.jsonpCallback = originalSettings.jsonpCallback;\n        oldCallbacks.push(callbackName);\n    }\n    if (responseContainer && jQuery.isFunction(overwritten)) {\n        overwritten(responseContainer[0]);\n    }\n    responseContainer = overwritten = undefined;\n}",
    "receiverBase": "jqXHR",
    "receiverCallee": "always"
  },
  {
    "callback": "function (responseText) {\n    response = arguments;\n    self.html(selector ? jQuery('<div>').append(jQuery.parseHTML(responseText)).find(selector) : responseText);\n}",
    "receiverBase": "ajax",
    "receiverCallee": "done"
  },
  {
    "callback": "function () {\n    return jQuery;\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function (request, response) {\n    response.writeHead(200, { 'Content-Type': 'text/html' });\n    response.end('<html><head></head><body><h1>Hello World</h1></body></html>');\n}",
    "receiverBase": "http",
    "receiverCallee": "createServer"
  },
  {
    "callback": "function (done) {\n    phantom.create(function (error, ph) {\n        assert.ifError(error);\n        _ph = ph;\n        ph.createPage(function (err, page) {\n            assert.ifError(err);\n            _page = page;\n            page.open('http://localhost:' + server.address().port, function (err, status) {\n                assert.ifError(err);\n                assert.equal(status, 'success');\n                done();\n            });\n        });\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "before"
  },
  {
    "callback": "function (error, ph) {\n    assert.ifError(error);\n    _ph = ph;\n    ph.createPage(function (err, page) {\n        assert.ifError(err);\n        _page = page;\n        page.open('http://localhost:' + server.address().port, function (err, status) {\n            assert.ifError(err);\n            assert.equal(status, 'success');\n            done();\n        });\n    });\n}",
    "receiverBase": "phantom",
    "receiverCallee": "create"
  },
  {
    "callback": "function (err, page) {\n    assert.ifError(err);\n    _page = page;\n    page.open('http://localhost:' + server.address().port, function (err, status) {\n        assert.ifError(err);\n        assert.equal(status, 'success');\n        done();\n    });\n}",
    "receiverBase": "ph",
    "receiverCallee": "createPage"
  },
  {
    "callback": "function (err, status) {\n    assert.ifError(err);\n    assert.equal(status, 'success');\n    done();\n}",
    "receiverBase": "page",
    "receiverCallee": "open"
  },
  {
    "callback": "function (done) {\n    _page.onCallback = function (result) {\n        assert.equal(result, 'Hello World');\n        done();\n    };\n    _page.evaluateAsync(function () {\n        window.callPhantom(document.getElementsByTagName('h1')[0].innerText);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    window.callPhantom(document.getElementsByTagName('h1')[0].innerText);\n}",
    "receiverBase": "_page",
    "receiverCallee": "evaluateAsync"
  },
  {
    "callback": "function (done) {\n    _page.onCallback = function (result) {\n        assert.equal(result, 'Hello World');\n        done();\n    };\n    _page.evaluateAsync(function (elem) {\n        window.callPhantom(document.getElementsByTagName(elem)[0].innerText);\n    }, function () {\n    }, 0, 'h1');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (elem) {\n    window.callPhantom(document.getElementsByTagName(elem)[0].innerText);\n}",
    "receiverBase": "_page",
    "receiverCallee": "evaluateAsync"
  },
  {
    "callback": "function () {\n}",
    "receiverBase": "_page",
    "receiverCallee": "evaluateAsync"
  },
  {
    "callback": "function () {\n    server.close();\n    _ph.exit();\n}",
    "receiverBase": "",
    "receiverCallee": "after"
  },
  {
    "callback": "function (node, ary) {\n    return lang._toArray(node.childNodes);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "_getRelatedUniqueNodes"
  },
  {
    "callback": "function (node, ary) {\n    do {\n        if (dquery._filterResult([node], query, root).length) {\n            return node;\n        }\n    } while (node != root && (node = node.parentNode) && node.nodeType == 1);\n    return null;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "_getRelatedUniqueNodes"
  },
  {
    "callback": "function (node, ary) {\n    return node.parentNode;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "_getRelatedUniqueNodes"
  },
  {
    "callback": "function (node, ary) {\n    var pary = [];\n    while (node.parentNode) {\n        node = node.parentNode;\n        pary.push(node);\n    }\n    return pary;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "_getRelatedUniqueNodes"
  },
  {
    "callback": "function (node, ary) {\n    var pary = [];\n    var nodes = node.parentNode && node.parentNode.childNodes;\n    for (var i = 0; i < nodes.length; i++) {\n        if (nodes[i] != node) {\n            pary.push(nodes[i]);\n        }\n    }\n    return pary;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "_getRelatedUniqueNodes"
  },
  {
    "callback": "function (node, ary) {\n    var next = node.nextSibling;\n    while (next && next.nodeType != 1) {\n        next = next.nextSibling;\n    }\n    return next;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "_getRelatedUniqueNodes"
  },
  {
    "callback": "function (node, ary) {\n    var pary = [];\n    var next = node;\n    while (next = next.nextSibling) {\n        if (next.nodeType == 1) {\n            pary.push(next);\n        }\n    }\n    return pary;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "_getRelatedUniqueNodes"
  },
  {
    "callback": "function (node, ary) {\n    var prev = node.previousSibling;\n    while (prev && prev.nodeType != 1) {\n        prev = prev.previousSibling;\n    }\n    return prev;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "_getRelatedUniqueNodes"
  },
  {
    "callback": "function (node, ary) {\n    var pary = [];\n    var prev = node;\n    while (prev = prev.previousSibling) {\n        if (prev.nodeType == 1) {\n            pary.push(prev);\n        }\n    }\n    return pary;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "_getRelatedUniqueNodes"
  },
  {
    "callback": "function (item, i) {\n    return i % 2 != 0;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (item, i) {\n    return i % 2 == 0;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "filter"
  },
  {
    "callback": "function () {\n    var now = new Date();\n    var tScale = d3.time.scale().domain([\n            now,\n            d3.time.second.offset(now, -(dataPoints * pSecs))\n        ]).rangeRound([\n            width,\n            0\n        ]);\n    chart.select('#time').transition().duration(0).call(d3.svg.axis().scale(tScale).orient('bottom').ticks(hAxisTicks));\n    for (var i = 0; i < items.length; i++) {\n        items[i].update();\n    }\n    d3.timer.flush();\n}",
    "receiverBase": "",
    "receiverCallee": "setInterval"
  },
  {
    "callback": "function () {\n    return 0;\n}",
    "receiverBase": "range",
    "receiverCallee": "map"
  },
  {
    "callback": "function (d, i) {\n    return xScale(i);\n}",
    "receiverBase": "interpolate",
    "receiverCallee": "x"
  },
  {
    "callback": "function (d, i) {\n    return yScale(d);\n}",
    "receiverBase": "x",
    "receiverCallee": "y"
  },
  {
    "callback": "function () {\n    return 0;\n}",
    "receiverBase": "range",
    "receiverCallee": "map"
  },
  {
    "callback": "function (d) {\n    return d;\n}",
    "receiverBase": "selectAll",
    "receiverCallee": "data"
  },
  {
    "callback": "function (d, i) {\n    return xScale(i + 1);\n}",
    "receiverBase": "attr",
    "receiverCallee": "attr"
  },
  {
    "callback": "function (d) {\n    return height - yScale(d);\n}",
    "receiverBase": "attr",
    "receiverCallee": "attr"
  },
  {
    "callback": "function (d) {\n    return yScale(d);\n}",
    "receiverBase": "attr",
    "receiverCallee": "attr"
  },
  {
    "callback": "function (d, i) {\n    return xScale(i);\n}",
    "receiverBase": "duration",
    "receiverCallee": "attr"
  },
  {
    "callback": "function (d, i) {\n    return xScale(i - 1);\n}",
    "receiverBase": "duration",
    "receiverCallee": "attr"
  },
  {
    "callback": "function () {\n    if (page.style[alice.prefixJS + 'AnimationName'] === ani) {\n        core.clearSinglePages(pageId, dir, params.pageName, params.bookName, params, 'doNotHide');\n        document.getElementById(params.bookName).setAttribute('data-state', 'paused');\n    }\n}",
    "receiverBase": "page",
    "receiverCallee": "addEventListener"
  }
]