[
  {
    "callback": "function (req, res) {\n    res.writeHead(200, { 'Content-Type': 'text/plain' });\n    res.end('Hello World\\n');\n}",
    "receiverBase": "http",
    "receiverCallee": "createServer"
  },
  {
    "callback": "function () {\n    this.currentTime = 0;\n    this.play();\n}",
    "receiverBase": "snd",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function (n, v) {\n    if (n !== 'metadata' && n !== 'constructor') {\n        oPrototype[n] = v;\n        if (!n.match(/^_|^on|^init$|^exit$/)) {\n            that._aPublicMethods.push(n);\n        }\n    }\n}",
    "receiverBase": "sap",
    "receiverCallee": "forIn"
  },
  {
    "callback": "function (file) {\n    return /\\.js$/.test(file);\n}",
    "receiverBase": "readdirSync",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (file) {\n    return path.basename(file).replace(/\\.js$/, '');\n}",
    "receiverBase": "filter",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    Mustache.clearCache();\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function (testName) {\n    var test = getTest(testName);\n    it('knows how to render ' + testName, function () {\n        var output;\n        if (test.partial) {\n            output = Mustache.render(test.template, test.view, { partial: test.partial });\n        } else {\n            output = Mustache.render(test.template, test.view);\n        }\n        assert.equal(output, test.expect);\n    });\n}",
    "receiverBase": "testNames",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    var output;\n    if (test.partial) {\n        output = Mustache.render(test.template, test.view, { partial: test.partial });\n    } else {\n        output = Mustache.render(test.template, test.view);\n    }\n    assert.equal(output, test.expect);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(!!Fiber.current).to.be.equal(true);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var value = fiberServer.execute(function () {\n            return 10 + 20;\n        });\n    expect(value).to.be.equal(30);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    return 10 + 20;\n}",
    "receiverBase": "fiberServer",
    "receiverCallee": "execute"
  },
  {
    "callback": "function () {\n    return promiseServer.execute(function () {\n        return 10 + 20;\n    }).then(function (value) {\n        expect(value).to.be.equal(30);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    return 10 + 20;\n}",
    "receiverBase": "promiseServer",
    "receiverCallee": "execute"
  },
  {
    "callback": "function (value) {\n    expect(value).to.be.equal(30);\n}",
    "receiverBase": "execute",
    "receiverCallee": "then"
  },
  {
    "callback": "function (done) {\n    promiseServer.execute(function () {\n        return 10 + 20;\n    }).then(function (value) {\n        throw new Error('this should be thrown');\n    }).catch(function (error) {\n        done();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    return 10 + 20;\n}",
    "receiverBase": "promiseServer",
    "receiverCallee": "execute"
  },
  {
    "callback": "function (value) {\n    throw new Error('this should be thrown');\n}",
    "receiverBase": "execute",
    "receiverCallee": "then"
  },
  {
    "callback": "function (error) {\n    done();\n}",
    "receiverBase": "then",
    "receiverCallee": "catch"
  },
  {
    "callback": "function () {\n    var value = fiberBrowser.execute(function () {\n            return 10 + 20;\n        });\n    expect(value).to.be.equal(30);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    return 10 + 20;\n}",
    "receiverBase": "fiberBrowser",
    "receiverCallee": "execute"
  },
  {
    "callback": "function () {\n    return promiseBrowser.execute(function () {\n        return 10 + 20;\n    }).then(function (value) {\n        expect(value).to.be.equal(30);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    return 10 + 20;\n}",
    "receiverBase": "promiseBrowser",
    "receiverCallee": "execute"
  },
  {
    "callback": "function (value) {\n    expect(value).to.be.equal(30);\n}",
    "receiverBase": "execute",
    "receiverCallee": "then"
  },
  {
    "callback": "function (done) {\n    promiseBrowser.execute(function () {\n        return 10 + 20;\n    }).then(function (value) {\n        throw new Error('this should be thrown');\n    }).catch(function (error) {\n        done();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    return 10 + 20;\n}",
    "receiverBase": "promiseBrowser",
    "receiverCallee": "execute"
  },
  {
    "callback": "function (value) {\n    throw new Error('this should be thrown');\n}",
    "receiverBase": "execute",
    "receiverCallee": "then"
  },
  {
    "callback": "function (error) {\n    done();\n}",
    "receiverBase": "then",
    "receiverCallee": "catch"
  },
  {
    "callback": "function () {\n    before(function () {\n        beforeK = fiberServer.execute(function () {\n            return 12;\n        });\n    });\n    it('should get the value set by before', function () {\n        expect(beforeK).to.be.equal(12);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "describe"
  },
  {
    "callback": "function () {\n    beforeK = fiberServer.execute(function () {\n        return 12;\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "before"
  },
  {
    "callback": "function () {\n    return 12;\n}",
    "receiverBase": "fiberServer",
    "receiverCallee": "execute"
  },
  {
    "callback": "function () {\n    expect(beforeK).to.be.equal(12);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var beforeY = 0;\n    beforeEach(function () {\n        beforeY = fiberServer.execute(function (beforeY) {\n            return beforeY + 10;\n        }, [beforeY]);\n    });\n    it('should get the value incremented by beforeEach', function () {\n        expect(beforeY).to.be.equal(10);\n    });\n    it('should again get the value incremented by beforeEach', function () {\n        expect(beforeY).to.be.equal(20);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "describe"
  },
  {
    "callback": "function () {\n    beforeY = fiberServer.execute(function (beforeY) {\n        return beforeY + 10;\n    }, [beforeY]);\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function (beforeY) {\n    return beforeY + 10;\n}",
    "receiverBase": "fiberServer",
    "receiverCallee": "execute"
  },
  {
    "callback": "function () {\n    expect(beforeY).to.be.equal(10);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(beforeY).to.be.equal(20);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    beforeA = fiberServer.execute(function (beforeA) {\n        return beforeA + 10;\n    }, [beforeA]);\n}",
    "receiverBase": "",
    "receiverCallee": "afterEach"
  },
  {
    "callback": "function (beforeA) {\n    return beforeA + 10;\n}",
    "receiverBase": "fiberServer",
    "receiverCallee": "execute"
  },
  {
    "callback": "function () {\n    expect(beforeA).to.be.equal(0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(beforeA).to.be.equal(10);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(beforeA).to.be.equal(20);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    beforeB = 0;\n    after(function () {\n        beforeB = fiberServer.execute(function (beforeB) {\n            return beforeB + 10;\n        }, [beforeB]);\n    });\n    it('should not get the value set by after', function () {\n        expect(beforeB).to.be.equal(0);\n    });\n    it('still should not get the value set by after', function () {\n        expect(beforeB).to.be.equal(0);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "describe"
  },
  {
    "callback": "function () {\n    beforeB = fiberServer.execute(function (beforeB) {\n        return beforeB + 10;\n    }, [beforeB]);\n}",
    "receiverBase": "",
    "receiverCallee": "after"
  },
  {
    "callback": "function (beforeB) {\n    return beforeB + 10;\n}",
    "receiverBase": "fiberServer",
    "receiverCallee": "execute"
  },
  {
    "callback": "function () {\n    expect(beforeB).to.be.equal(0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(beforeB).to.be.equal(0);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    it('should get the value set by previous after', function () {\n        expect(beforeB).to.be.equal(10);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "describe"
  },
  {
    "callback": "function () {\n    expect(beforeB).to.be.equal(10);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (interceptor) {\n    reversedInterceptors.unshift(angular.isString(interceptor) ? $injector.get(interceptor) : $injector.invoke(interceptor));\n}",
    "receiverBase": "angular",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (session, details) {\n    $log.debug('Congrats!  You\\'re connected to the WAMP server!');\n    $rootScope.$broadcast('$wamp.open', {\n        session: session,\n        details: details\n    });\n    sessionDeferred.resolve();\n}",
    "receiverBase": "",
    "receiverCallee": "digestWrapper"
  },
  {
    "callback": "function (reason, details) {\n    $log.debug('Connection Closed: ', reason, details);\n    $rootScope.$broadcast('$wamp.close', {\n        reason: reason,\n        details: details\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "digestWrapper"
  },
  {
    "callback": "function (s) {\n    subscription = angular.extend(s, subscription);\n    deferred.resolve(subscription);\n    return s;\n}",
    "receiverBase": "subscribe",
    "receiverCallee": "then"
  },
  {
    "callback": "function () {\n    return callback();\n}",
    "receiverBase": "sessionPromise",
    "receiverCallee": "then"
  },
  {
    "callback": "function (interceptor) {\n    if (interceptor[type + 'Response'] || interceptor[type + 'ResponseError']) {\n        chain.push(interceptor[type + 'Response'], interceptor[type + 'ResponseError']);\n    }\n}",
    "receiverBase": "angular",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (response) {\n    return response.result;\n}",
    "receiverBase": "chain",
    "receiverCallee": "push"
  },
  {
    "callback": "function (response) {\n    return response.error;\n}",
    "receiverBase": "chain",
    "receiverCallee": "push"
  },
  {
    "callback": "function () {\n    return Subscription(topic, handler, options, subscribedCallback);\n}",
    "receiverBase": "",
    "receiverCallee": "interceptorWrapper"
  },
  {
    "callback": "function () {\n    return subscription.unsubscribe();\n}",
    "receiverBase": "",
    "receiverCallee": "interceptorWrapper"
  },
  {
    "callback": "function () {\n    return connection.session.publish(topic, args, kwargs, options);\n}",
    "receiverBase": "",
    "receiverCallee": "interceptorWrapper"
  },
  {
    "callback": "function () {\n    return connection.session.register(procedure, endpoint, options);\n}",
    "receiverBase": "",
    "receiverCallee": "interceptorWrapper"
  },
  {
    "callback": "function () {\n    return connection.session.call(procedure, args, kwargs, options);\n}",
    "receiverBase": "",
    "receiverCallee": "interceptorWrapper"
  },
  {
    "callback": "function () {\n    var pos = (options[this] || '').split(' ');\n    if (pos.length === 1) {\n        pos = horizontalPositions.test(pos[0]) ? pos.concat([center]) : verticalPositions.test(pos[0]) ? [center].concat(pos) : [\n            center,\n            center\n        ];\n    }\n    pos[0] = horizontalPositions.test(pos[0]) ? pos[0] : center;\n    pos[1] = verticalPositions.test(pos[1]) ? pos[1] : center;\n    options[this] = pos;\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    $.offset.setOffset(this, options);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (Modernizr, $, Backbone, Mobile, Raphael) {\n    this.router = new Mobile();\n}",
    "receiverBase": "",
    "receiverCallee": "require"
  },
  {
    "callback": "function () {\n    var ele = document.createElement('div');\n    ele.style.backgroundImage = '-o-linear-gradient(0, transparent 0, transparent 0)';\n    return ele.style.backgroundImage === '';\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (prev, curr) {\n    return prev + curr.time;\n}",
    "receiverBase": "event_list",
    "receiverCallee": "reduce"
  },
  {
    "callback": "function () {\n    var a = b.createElement('div');\n    a.innerHTML = '<elem></elem>';\n    return a.childNodes.length !== 1;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (con) {\n    function dummy() {\n    }\n    ;\n    for (var methods = 'assert,count,debug,dir,dirxml,error,exception,group,groupCollapsed,groupEnd,info,log,markTimeline,profile,profileEnd,time,timeEnd,trace,warn'.split(','), func; func = methods.pop();) {\n        con[func] = con[func] || dummy;\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (elem, i) {\n    return callback.call(elem, i, elem);\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "map"
  },
  {
    "callback": "function (i, name) {\n    class2type['[object ' + name + ']'] = name.toLowerCase();\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    returned = fn.apply(this, arguments);\n    if (returned && jQuery.isFunction(returned.promise)) {\n        returned.promise().then(newDefer.resolve, newDefer.reject);\n    } else {\n        newDefer[action + 'With'](this === deferred ? newDefer : this, [returned]);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "deferred"
  },
  {
    "callback": "function () {\n    support.noCloneEvent = false;\n}",
    "receiverBase": "div",
    "receiverCallee": "attachEvent"
  },
  {
    "callback": "function () {\n    jQuery.data(this, key);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var $this = jQuery(this), args = [\n            parts[0],\n            value\n        ];\n    $this.triggerHandler('setData' + parts[1] + '!', args);\n    jQuery.data(this, key, value);\n    $this.triggerHandler('changeData' + parts[1] + '!', args);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.removeData(this, key);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    if (!jQuery.data(elem, queueDataKey, undefined, true) && !jQuery.data(elem, markDataKey, undefined, true)) {\n        jQuery.removeData(elem, deferDataKey, true);\n        defer.resolve();\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    jQuery.dequeue(elem, type);\n}",
    "receiverBase": "fn",
    "receiverCallee": "call"
  },
  {
    "callback": "function () {\n    var queue = jQuery.queue(this, type, data);\n    if (type === 'fx' && queue[0] !== 'inprogress') {\n        jQuery.dequeue(this, type);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.dequeue(this, type);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var elem = this;\n    setTimeout(function () {\n        jQuery.dequeue(elem, type);\n    }, time);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "queue"
  },
  {
    "callback": "function () {\n    jQuery.dequeue(elem, type);\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    jQuery.removeAttr(this, name);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    try {\n        this[name] = undefined;\n        delete this[name];\n    } catch (e) {\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (j) {\n    jQuery(this).addClass(value.call(this, j, this.className));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (j) {\n    jQuery(this).removeClass(value.call(this, j, this.className));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i) {\n    jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (value) {\n    return value == null ? '' : value + '';\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    this.selected = jQuery.inArray(jQuery(this).val(), values) >= 0;\n}",
    "receiverBase": "find",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, name) {\n    jQuery.attrHooks[name] = jQuery.extend(jQuery.attrHooks[name], {\n        set: function (elem, value) {\n            if (value === '') {\n                elem.setAttribute(name, 'auto');\n                return value;\n            }\n        }\n    });\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, name) {\n    jQuery.attrHooks[name] = jQuery.extend(jQuery.attrHooks[name], {\n        get: function (elem) {\n            var ret = elem.getAttribute(name, 2);\n            return ret === null ? undefined : ret;\n        }\n    });\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.valHooks[this] = {\n        get: function (elem) {\n            return elem.getAttribute('value') === null ? 'on' : elem.value;\n        }\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.valHooks[this] = jQuery.extend(jQuery.valHooks[this], {\n        set: function (elem, value) {\n            if (jQuery.isArray(value)) {\n                return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;\n            }\n        }\n    });\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var internalKey = jQuery.expando, internalCache = this[internalKey];\n    if (internalCache && internalCache.events && internalCache.events[type]) {\n        jQuery.event.trigger(event, data, internalCache.handle.elem);\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (orig, fix) {\n    jQuery.event.special[orig] = {\n        setup: function (data) {\n            jQuery.event.add(this, fix, data && data.selector ? delegate : withinElement, orig);\n        },\n        teardown: function (data) {\n            jQuery.event.remove(this, fix, data && data.selector ? delegate : withinElement);\n        }\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (e) {\n    var elem = e.target, type = jQuery.nodeName(elem, 'input') ? elem.type : '';\n    if ((type === 'submit' || type === 'image') && jQuery(elem).closest('form').length) {\n        trigger('submit', this, arguments);\n    }\n}",
    "receiverBase": "event",
    "receiverCallee": "add"
  },
  {
    "callback": "function (e) {\n    var elem = e.target, type = jQuery.nodeName(elem, 'input') ? elem.type : '';\n    if ((type === 'text' || type === 'password') && jQuery(elem).closest('form').length && e.keyCode === 13) {\n        trigger('submit', this, arguments);\n    }\n}",
    "receiverBase": "event",
    "receiverCallee": "add"
  },
  {
    "callback": "function (elem) {\n    return elem.selected;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    jQuery.event.trigger(type, data, this);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, name) {\n    jQuery.fn[name] = function (data, fn) {\n        if (fn == null) {\n            fn = data;\n            data = null;\n        }\n        return arguments.length > 0 ? this.bind(name, data, fn) : this.trigger(name);\n    };\n    if (jQuery.attrFn) {\n        jQuery.attrFn[name] = true;\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    baseHasDuplicate = false;\n    return 0;\n}",
    "receiverCallee": "sort"
  },
  {
    "callback": "function () {\n    for (i = 0, l = self.length; i < l; i++) {\n        if (jQuery.contains(self[i], this)) {\n            return true;\n        }\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "filter"
  },
  {
    "callback": "function () {\n    for (var i = 0, l = targets.length; i < l; i++) {\n        if (jQuery.contains(this, targets[i])) {\n            return true;\n        }\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (elem, i) {\n    var retVal = !!qualifier.call(elem, i, elem);\n    return retVal === keep;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function (elem, i) {\n    return elem === qualifier === keep;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function (elem) {\n    return elem.nodeType === 1;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function (elem, i) {\n    return jQuery.inArray(elem, qualifier) >= 0 === keep;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function (i) {\n    var self = jQuery(this);\n    self.text(text.call(this, i, self.text()));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i) {\n    jQuery(this).wrapAll(html.call(this, i));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var elem = this;\n    while (elem.firstChild && elem.firstChild.nodeType === 1) {\n        elem = elem.firstChild;\n    }\n    return elem;\n}",
    "receiverBase": "wrap",
    "receiverCallee": "map"
  },
  {
    "callback": "function (i) {\n    jQuery(this).wrapInner(html.call(this, i));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var self = jQuery(this), contents = self.contents();\n    if (contents.length) {\n        contents.wrapAll(html);\n    } else {\n        self.append(html);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery(this).wrapAll(html);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    if (!jQuery.nodeName(this, 'body')) {\n        jQuery(this).replaceWith(this.childNodes);\n    }\n}",
    "receiverBase": "parent",
    "receiverCallee": "each"
  },
  {
    "callback": "function (elem) {\n    if (this.nodeType === 1) {\n        this.appendChild(elem);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function (elem) {\n    if (this.nodeType === 1) {\n        this.insertBefore(elem, this.firstChild);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function (elem) {\n    this.parentNode.insertBefore(elem, this);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function (elem) {\n    this.parentNode.insertBefore(elem, this.nextSibling);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function () {\n    return jQuery.clone(this, dataAndEvents, deepDataAndEvents);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "map"
  },
  {
    "callback": "function (i) {\n    var self = jQuery(this);\n    self.html(value.call(this, i, self.html()));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i) {\n    var self = jQuery(this), old = self.html();\n    self.replaceWith(value.call(this, i, old));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var next = this.nextSibling, parent = this.parentNode;\n    jQuery(this).remove();\n    if (next) {\n        jQuery(next).before(value);\n    } else {\n        jQuery(parent).append(value);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery(this).domManip(args, table, callback, true);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i) {\n    var self = jQuery(this);\n    args[0] = value.call(this, i, table ? self.html() : undefined);\n    self.domManip(args, table, callback);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (elem, name, value) {\n    return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "access"
  },
  {
    "callback": "function () {\n    val = getWH(elem, name, extra);\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "swap"
  },
  {
    "callback": "function () {\n    if (computed) {\n        ret = curCSS(elem, 'margin-right', 'marginRight');\n    } else {\n        ret = elem.style.marginRight;\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "swap"
  },
  {
    "callback": "function () {\n    if (!extra) {\n        val -= parseFloat(jQuery.css(elem, 'padding' + this)) || 0;\n    }\n    if (extra === 'margin') {\n        val += parseFloat(jQuery.css(elem, extra + this)) || 0;\n    } else {\n        val -= parseFloat(jQuery.css(elem, 'border' + this + 'Width')) || 0;\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    val += parseFloat(jQuery.css(elem, 'padding' + this)) || 0;\n    if (extra !== 'padding') {\n        val += parseFloat(jQuery.css(elem, 'border' + this + 'Width')) || 0;\n    }\n    if (extra === 'margin') {\n        val += parseFloat(jQuery.css(elem, extra + this)) || 0;\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (r) {\n    responseText = r;\n}",
    "receiverBase": "jqXHR",
    "receiverCallee": "done"
  },
  {
    "callback": "function () {\n    return this.elements ? jQuery.makeArray(this.elements) : this;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    return this.name && !this.disabled && (this.checked || rselectTextarea.test(this.nodeName) || rinput.test(this.type));\n}",
    "receiverBase": "map",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (i, elem) {\n    var val = jQuery(this).val();\n    return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val, i) {\n        return {\n            name: elem.name,\n            value: val.replace(rCRLF, '\\r\\n')\n        };\n    }) : {\n        name: elem.name,\n        value: val.replace(rCRLF, '\\r\\n')\n    };\n}",
    "receiverBase": "filter",
    "receiverCallee": "map"
  },
  {
    "callback": "function (val, i) {\n    return {\n        name: elem.name,\n        value: val.replace(rCRLF, '\\r\\n')\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "map"
  },
  {
    "callback": "function (i, o) {\n    jQuery.fn[o] = function (f) {\n        return this.bind(o, f);\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, method) {\n    jQuery[method] = function (url, data, callback, type) {\n        if (jQuery.isFunction(data)) {\n            type = type || callback;\n            callback = data;\n            data = undefined;\n        }\n        return jQuery.ajax({\n            type: method,\n            url: url,\n            data: data,\n            success: callback,\n            dataType: type\n        });\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jqXHR.abort('timeout');\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    add(this.name, this.value);\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, v) {\n    if (traditional || rbracket.test(prefix)) {\n        add(prefix, v);\n    } else {\n        buildParams(prefix + '[' + (typeof v === 'object' || jQuery.isArray(v) ? i : '') + ']', v, traditional, add);\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    window[jsonpCallback] = previous;\n    if (responseContainer && jQuery.isFunction(previous)) {\n        window[jsonpCallback](responseContainer[0]);\n    }\n}",
    "receiverBase": "jqXHR",
    "receiverCallee": "always"
  },
  {
    "callback": "function (s) {\n    if (s.cache === undefined) {\n        s.cache = false;\n    }\n    if (s.crossDomain) {\n        s.type = 'GET';\n        s.global = false;\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "ajaxPrefilter"
  },
  {
    "callback": "function (xhr) {\n    jQuery.extend(jQuery.support, {\n        ajax: !!xhr,\n        cors: !!xhr && 'withCredentials' in xhr\n    });\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    var state = bool ? fn : jQuery(this).is(':hidden');\n    jQuery(this)[state ? 'show' : 'hide']();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var timers = jQuery.timers, i = timers.length;\n    if (!gotoEnd) {\n        jQuery._unmark(true, this);\n    }\n    while (i--) {\n        if (timers[i].elem === this) {\n            if (gotoEnd) {\n                timers[i](true);\n            }\n            timers.splice(i, 1);\n        }\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    obj[this] = type;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (name, props) {\n    jQuery.fn[name] = function (speed, easing, callback) {\n        return this.animate(props, speed, easing, callback);\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (index, value) {\n    elem.style['overflow' + value] = options.overflow[index];\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (fn) {\n    return elem === fn.elem;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function (i) {\n    jQuery.offset.setOffset(this, options, i);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i) {\n    jQuery.offset.setOffset(this, options, i);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var offsetParent = this.offsetParent || document.body;\n    while (offsetParent && (!rroot.test(offsetParent.nodeName) && jQuery.css(offsetParent, 'position') === 'static')) {\n        offsetParent = offsetParent.offsetParent;\n    }\n    return offsetParent;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    win = getWindow(this);\n    if (win) {\n        win.scrollTo(!i ? val : jQuery(win).scrollLeft(), i ? val : jQuery(win).scrollTop());\n    } else {\n        this[method] = val;\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i) {\n    var self = jQuery(this);\n    self[type](size.call(this, i, self[type]()));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (value, index, list) {\n    results[results.length] = iterator.call(context, value, index, list);\n}",
    "receiverBase": "",
    "receiverCallee": "each"
  },
  {
    "callback": "function (value, index, list) {\n    if (!initial) {\n        memo = value;\n        initial = true;\n    } else {\n        memo = iterator.call(context, memo, value, index, list);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "each"
  },
  {
    "callback": "function (value, index, list) {\n    if (iterator.call(context, value, index, list)) {\n        result = value;\n        return true;\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "any"
  },
  {
    "callback": "function (value, index, list) {\n    if (iterator.call(context, value, index, list))\n        results[results.length] = value;\n}",
    "receiverBase": "",
    "receiverCallee": "each"
  },
  {
    "callback": "function (value, index, list) {\n    if (!iterator.call(context, value, index, list))\n        results[results.length] = value;\n}",
    "receiverBase": "",
    "receiverCallee": "each"
  },
  {
    "callback": "function (value, index, list) {\n    if (!(result = result && iterator.call(context, value, index, list)))\n        return breaker;\n}",
    "receiverBase": "",
    "receiverCallee": "each"
  },
  {
    "callback": "function (value, index, list) {\n    if (result |= iterator.call(context, value, index, list))\n        return breaker;\n}",
    "receiverBase": "",
    "receiverCallee": "each"
  },
  {
    "callback": "function (value) {\n    if (found = value === target)\n        return true;\n}",
    "receiverBase": "",
    "receiverCallee": "any"
  },
  {
    "callback": "function (value) {\n    return (method.call ? method || value : value[method]).apply(value, args);\n}",
    "receiverBase": "_",
    "receiverCallee": "map"
  },
  {
    "callback": "function (value) {\n    return value[key];\n}",
    "receiverBase": "_",
    "receiverCallee": "map"
  },
  {
    "callback": "function (value, index, list) {\n    var computed = iterator ? iterator.call(context, value, index, list) : value;\n    computed >= result.computed && (result = {\n        value: value,\n        computed: computed\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "each"
  },
  {
    "callback": "function (value, index, list) {\n    var computed = iterator ? iterator.call(context, value, index, list) : value;\n    computed < result.computed && (result = {\n        value: value,\n        computed: computed\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "each"
  },
  {
    "callback": "function (value, index, list) {\n    return {\n        value: value,\n        criteria: iterator.call(context, value, index, list)\n    };\n}",
    "receiverBase": "_",
    "receiverCallee": "map"
  },
  {
    "callback": "function (left, right) {\n    var a = left.criteria, b = right.criteria;\n    return a < b ? -1 : a > b ? 1 : 0;\n}",
    "receiverBase": "map",
    "receiverCallee": "sort"
  },
  {
    "callback": "function (value, index) {\n    var key = iterator(value, index);\n    (result[key] || (result[key] = [])).push(value);\n}",
    "receiverBase": "",
    "receiverCallee": "each"
  },
  {
    "callback": "function (value) {\n    return !!value;\n}",
    "receiverBase": "_",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (memo, value) {\n    if (_.isArray(value))\n        return memo.concat(_.flatten(value));\n    memo[memo.length] = value;\n    return memo;\n}",
    "receiverBase": "_",
    "receiverCallee": "reduce"
  },
  {
    "callback": "function (memo, el, i) {\n    if (0 == i || (isSorted === true ? _.last(memo) != el : !_.include(memo, el)))\n        memo[memo.length] = el;\n    return memo;\n}",
    "receiverBase": "_",
    "receiverCallee": "reduce"
  },
  {
    "callback": "function (item) {\n    return _.every(rest, function (other) {\n        return _.indexOf(other, item) >= 0;\n    });\n}",
    "receiverBase": "_",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (other) {\n    return _.indexOf(other, item) >= 0;\n}",
    "receiverBase": "_",
    "receiverCallee": "every"
  },
  {
    "callback": "function (value) {\n    return !_.include(other, value);\n}",
    "receiverBase": "_",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (f) {\n    obj[f] = _.bind(obj[f], obj);\n}",
    "receiverBase": "",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    return func.apply(func, args);\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (source) {\n    for (var prop in source) {\n        if (source[prop] !== void 0)\n            obj[prop] = source[prop];\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "each"
  },
  {
    "callback": "function (source) {\n    for (var prop in source) {\n        if (obj[prop] == null)\n            obj[prop] = source[prop];\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "each"
  },
  {
    "callback": "function (name) {\n    addToWrapper(name, _[name] = obj[name]);\n}",
    "receiverBase": "",
    "receiverCallee": "each"
  },
  {
    "callback": "function (match, code) {\n    return '\\',' + code.replace(/\\\\'/g, '\\'') + ',\\'';\n}",
    "receiverBase": "replace",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (match, code) {\n    return '\\');' + code.replace(/\\\\'/g, '\\'').replace(/[\\r\\n\\t]/g, ' ') + '__p.push(\\'';\n}",
    "receiverBase": "replace",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (name) {\n    var method = ArrayProto[name];\n    wrapper.prototype[name] = function () {\n        method.apply(this._wrapped, arguments);\n        return result(this._wrapped, this._chain);\n    };\n}",
    "receiverBase": "",
    "receiverCallee": "each"
  },
  {
    "callback": "function (name) {\n    var method = ArrayProto[name];\n    wrapper.prototype[name] = function () {\n        return result(method.apply(this._wrapped, arguments), this._chain);\n    };\n}",
    "receiverBase": "",
    "receiverCallee": "each"
  },
  {
    "callback": "function (model) {\n    return model.toJSON();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "map"
  },
  {
    "callback": "function (model) {\n    return model.get(attr);\n}",
    "receiverBase": "_",
    "receiverCallee": "map"
  },
  {
    "callback": "function (method) {\n    Backbone.Collection.prototype[method] = function () {\n        return _[method].apply(_, [this.models].concat(_.toArray(arguments)));\n    };\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (fragment) {\n    var args = this._extractParameters(route, fragment);\n    callback.apply(this, args);\n    this.trigger.apply(this, ['route:' + name].concat(args));\n}",
    "receiverBase": "_",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (handler) {\n    if (handler.route.test(fragment)) {\n        handler.callback(fragment);\n        return true;\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "any"
  },
  {
    "callback": "function (iframe, form) {\n    form.setAttribute('action', opts.url);\n    form.setAttribute('method', 'post');\n    janky._input(iframe, form, opts.data);\n    form.submit();\n    setTimeout(function () {\n        document.body.removeChild(iframe);\n    }, 2000);\n}",
    "receiverBase": "janky",
    "receiverCallee": "_form"
  },
  {
    "callback": "function () {\n    document.body.removeChild(iframe);\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    var form = iframe.contentWindow.document.createElement('form');\n    iframe.contentWindow.document.body.appendChild(form);\n    cb(iframe, form);\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    function Q() {\n    }\n    Q.prototype = L.prototype;\n    return new Q();\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    var Q = { f: j.getElementById };\n    try {\n        Q.f.call(j, 'abc');\n        return true;\n    } catch (Z) {\n        return false;\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (Z) {\n    var aa = j.getElementById(Z.id);\n    if (!aa) {\n        l('<proxyGetElementById - finish>', 'no element in writen markup with id ' + Z.id);\n        return;\n    }\n    P(Z.el.childNodes, function (ab) {\n        aa.appendChild(ab);\n    });\n    if (aa.contentWindow) {\n        a.setTimeout(function () {\n            Z.el.contentWindow.document.copyTo(aa.contentWindow.document);\n        }, 1);\n    }\n    E.copyAttrs(Z.el, aa);\n}",
    "receiverBase": "",
    "receiverCallee": "P"
  },
  {
    "callback": "function (ab) {\n    aa.appendChild(ab);\n}",
    "receiverBase": "",
    "receiverCallee": "P"
  },
  {
    "callback": "function () {\n    Z.el.contentWindow.document.copyTo(aa.contentWindow.document);\n}",
    "receiverBase": "a",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    ad.push(ab);\n}",
    "receiverBase": "",
    "receiverCallee": "J"
  },
  {
    "callback": "function () {\n    ad.resume();\n}",
    "receiverBase": "",
    "receiverCallee": "J"
  },
  {
    "callback": "function (ab) {\n    Q.push(ac);\n    function ac() {\n        ab.action(R(ab.html, ab.options, Q), ab);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "P"
  },
  {
    "callback": "function () {\n    var ah, ak, af, aj, ai;\n    Q = G(Q);\n    ai = Q.done;\n    Q.done = function () {\n        j.write = aa;\n        j.writeln = ad;\n        if (ai) {\n            ai();\n        }\n    };\n    for (var ag = 0, ae = ab.length; ag < ae; ag++) {\n        ah = ab[ag].el;\n        ak = j.createElement('div');\n        ah.parentNode.insertBefore(ak, ah.nextSibling);\n        af = ab[ag].out.join('');\n        aj = ae - ag === 1 ? R(af, Q) : R(af);\n        E.replaceWith(ak, aj);\n    }\n}",
    "receiverBase": "E",
    "receiverCallee": "onLoad"
  },
  {
    "callback": "function () {\n    c[this] = i(this);\n}",
    "receiverBase": "g",
    "receiverCallee": "each"
  },
  {
    "callback": "function (v) {\n    var u = r[v];\n    if (!u) {\n        return;\n    }\n    t[v] = function (y, x, w) {\n        if (!s && a(y)) {\n            try {\n                s = true;\n                return p.call(t, v, y, x, w);\n            } finally {\n                s = false;\n            }\n        }\n        return u.apply(t, arguments);\n    };\n}",
    "receiverBase": "g",
    "receiverCallee": "each"
  },
  {
    "callback": "function (v) {\n    return {\n        html: t,\n        options: s,\n        action: function (w) {\n            u.call(v, w);\n        }\n    };\n}",
    "receiverBase": "g",
    "receiverCallee": "map"
  },
  {
    "callback": "function (u) {\n    q[t] = u;\n    return 'jquery-writeCapture-script-placeholder-' + t++ + '-wc';\n}",
    "receiverBase": "s",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (u, v) {\n    return q[v];\n}",
    "receiverBase": "html",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (key, value, options) {\n    if (!key) {\n        return copy(memory);\n    }\n    if (value === undefined) {\n        return copy(memory[key]);\n    }\n    if (value === null) {\n        delete memory[key];\n        return null;\n    }\n    memory[key] = value;\n    if (options.expires) {\n        setTimeout(function () {\n            delete memory[key];\n        }, options.expires);\n    }\n    return value;\n}",
    "receiverBase": "store",
    "receiverCallee": "addType"
  },
  {
    "callback": "function () {\n    delete memory[key];\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (node) {\n    bool = (window.getComputedStyle ? getComputedStyle(node, null) : node.currentStyle)['position'] == 'absolute';\n}",
    "receiverBase": "",
    "receiverCallee": "injectElementWithStyles"
  },
  {
    "callback": "function (props) {\n    for (var i = 0, len = props.length; i < len; i++) {\n        attrs[props[i]] = !!(props[i] in inputElem);\n    }\n    return attrs;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    var elem = document.createElement('div');\n    elem.innerHTML = '<elem></elem>';\n    return elem.childNodes.length !== 1;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (elements) {\n    return this.every(function (element) {\n        return this.indexOf(element) >= 0;\n    }, elements);\n}",
    "receiverBase": "",
    "receiverCallee": "append"
  },
  {
    "callback": "function (element) {\n    return this.indexOf(element) >= 0;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "every"
  },
  {
    "callback": "function (elements) {\n    return this.filter(function (element) {\n        return this.indexOf(element) < 0;\n    }, elements);\n}",
    "receiverBase": "",
    "receiverCallee": "append"
  },
  {
    "callback": "function (element) {\n    return this.indexOf(element) < 0;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (fn, scope) {\n    for (var i = 0; i < this.length; i++)\n        if (!fn.call(scope || window, this[i], i, this))\n            return false;\n    return true;\n}",
    "receiverBase": "",
    "receiverCallee": "append"
  },
  {
    "callback": "function (fn, scope) {\n    var r = [];\n    for (var i = 0; i < this.length; i++)\n        if (fn.call(scope || window, this[i], i, this))\n            r.push(this[i]);\n    return r;\n}",
    "receiverBase": "",
    "receiverCallee": "append"
  },
  {
    "callback": "function (fn, scope) {\n    for (var i = 0; i < this.length; i++)\n        fn.call(scope || window, this[i], i, this);\n}",
    "receiverBase": "",
    "receiverCallee": "append"
  },
  {
    "callback": "function (start, end) {\n    var items = this;\n    if (items.length < 1)\n        return [];\n    start = start || 0;\n    end = Math.min(typeof end == 'undefined' ? this.length - 1 : end, this.length - 1);\n    var r = [];\n    if (start <= end)\n        for (var i = start; i <= end; i++)\n            r[r.length] = items[i];\n    else\n        for (var i = start; i >= end; i--)\n            r[r.length] = items[i];\n    return r;\n}",
    "receiverBase": "",
    "receiverCallee": "append"
  },
  {
    "callback": "function (subject, offset) {\n    for (var i = offset || 0; i < this.length; i++)\n        if (this[i] === subject)\n            return i;\n    return -1;\n}",
    "receiverBase": "",
    "receiverCallee": "append"
  },
  {
    "callback": "function (subject) {\n    for (var i = 0; i < this.length; i++)\n        if (subject == this[i])\n            return true;\n    return false;\n}",
    "receiverBase": "",
    "receiverCallee": "append"
  },
  {
    "callback": "function (index, element) {\n    for (var k = this.length; k > index; k--)\n        this[k] = this[k - 1];\n    this[index] = element;\n    return this;\n}",
    "receiverBase": "",
    "receiverCallee": "append"
  },
  {
    "callback": "function (fn, scope) {\n    scope = scope || window;\n    var r = [];\n    for (var i = 0; i < this.length; i++)\n        r[r.length] = fn.call(scope, this[i], i, this);\n    return r;\n}",
    "receiverBase": "",
    "receiverCallee": "append"
  },
  {
    "callback": "function (index) {\n    for (var k = index; k < this.length - 1; k++)\n        this[k] = this[k + 1];\n    this.length--;\n    return this;\n}",
    "receiverBase": "",
    "receiverCallee": "append"
  },
  {
    "callback": "function () {\n    return this.sort(function () {\n        return Math.round(Math.random()) - 0.5;\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "append"
  },
  {
    "callback": "function () {\n    return Math.round(Math.random()) - 0.5;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "sort"
  },
  {
    "callback": "function (fn, scope) {\n    for (var i = 0; i < this.length; i++)\n        if (fn.call(scope || window, this[i], i, this))\n            return true;\n    return false;\n}",
    "receiverBase": "",
    "receiverCallee": "append"
  },
  {
    "callback": "function () {\n    return this.filter(function (element, index, array) {\n        return array.indexOf(element) >= index;\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "append"
  },
  {
    "callback": "function (element, index, array) {\n    return array.indexOf(element) >= index;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (elementName) {\n    var constructor = window['HTML' + elementName + 'Element'];\n    if (constructor && constructor.prototype) {\n        wrapDOMEventsHelper(constructor.prototype);\n    }\n}",
    "receiverBase": "elementNames",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    return this[xhrWrappedProperty];\n}",
    "receiverBase": "prototype",
    "receiverCallee": "__defineGetter__"
  },
  {
    "callback": "function (listener) {\n    this[xhrWrappedProperty] = listener;\n    onreadystatechangeSetter.call(this, wrappedReadyStateChange);\n}",
    "receiverBase": "prototype",
    "receiverCallee": "__defineSetter__"
  },
  {
    "callback": "function (quoteLocation) {\n    var backslashCount = 0, index = quoteLocation;\n    while (index--) {\n        if (stacktraceLine.charAt(index) != '\\\\') {\n            break;\n        }\n        backslashCount = backslashCount + 1;\n    }\n    return backslashCount % 2 == 0;\n}",
    "receiverBase": "quoteLocations",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (errorObj) {\n    var key = '27461631-f992-4f72-b94d-b98996ef1a53';\n    var host = 'https://logs.loggly.com';\n    castor = new loggly({\n        url: host + '/inputs/' + key + '?rt=1',\n        level: 'log'\n    });\n    castor.error(JSON.stringify({\n        host: window.location.host,\n        error: errorObj\n    }));\n}",
    "receiverBase": "g",
    "receiverCallee": "errorCatcher"
  },
  {
    "callback": "function (str) {\n    return str.replace(/([\\#\\?\\&][Qq]\\=)[^\\=\\&\\#\\s]*/g, '$1[redacted]');\n}",
    "receiverBase": "g",
    "receiverCallee": "errorCatcher"
  },
  {
    "callback": "function (i, obj) {\n    if (forminputs[obj.name] === undefined) {\n        forminputs[obj.name] = obj.value;\n    } else if (typeof forminputs[obj.name] == Array || typeof forminputs[obj.name] == 'object') {\n        forminputs[obj.name].push(obj.value);\n    } else {\n        forminputs[obj.name] = [\n            forminputs[obj.name],\n            obj.value\n        ];\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    $jqib.toggleClass(options.prefix + 'warning');\n    if (i++ > 1) {\n        clearInterval(intervalid);\n        $jqib.removeClass(options.prefix + 'warning');\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "setInterval"
  },
  {
    "callback": "function () {\n    if (!$inputels)\n        return;\n    var el = $inputels[back === true ? $inputels.length - 1 : 0];\n    if (el)\n        el.focus();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    $jqif.unbind('click', fadeClicked);\n    $jqif.remove();\n    if (callCallback) {\n        options.callback(clicked, msg, formvals);\n    }\n    $jqib.unbind('keypress', keyPressEventHandler);\n    $jqib.remove();\n    if (ie6 && !options.useiframe) {\n        $('select').css('visibility', 'visible');\n    }\n}",
    "receiverBase": "$jqif",
    "receiverCallee": "fadeOut"
  },
  {
    "callback": "function () {\n    $(this).find('.' + $.prompt.currentPrefix + 'defaultbutton').focus();\n    if (typeof callback == 'function')\n        callback();\n}",
    "receiverBase": "$",
    "receiverCallee": "slideDown"
  },
  {
    "callback": "function () {\n    $next.find('.' + $.prompt.currentPrefix + 'defaultbutton').focus();\n    if (typeof callback == 'function')\n        callback();\n}",
    "receiverBase": "$next",
    "receiverCallee": "slideDown"
  },
  {
    "callback": "function () {\n    $next.find('.' + $.prompt.currentPrefix + 'defaultbutton').focus();\n    if (typeof callback == 'function')\n        callback();\n}",
    "receiverBase": "$next",
    "receiverCallee": "slideDown"
  },
  {
    "callback": "function () {\n    $(this).remove();\n}",
    "receiverBase": "$",
    "receiverCallee": "fadeOut"
  },
  {
    "callback": "function ($) {\n    $.fn.serializeToJson = function () {\n        attrs = {};\n        this.find('[name]').each(function (i, field) {\n            $field = $(field);\n            if ($field.is(':checkbox')) {\n                val = $field.is(':checked');\n            } else {\n                val = $field.val();\n            }\n            attrs[$field.attr('name')] = val;\n        });\n        return attrs;\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (i, field) {\n    $field = $(field);\n    if ($field.is(':checkbox')) {\n        val = $field.is(':checked');\n    } else {\n        val = $field.val();\n    }\n    attrs[$field.attr('name')] = val;\n}",
    "receiverBase": "find",
    "receiverCallee": "each"
  },
  {
    "callback": "function (a) {\n    var c = meta[a];\n    return typeof c === 'string' ? c : '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n}",
    "receiverBase": "string",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (a) {\n    return '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n}",
    "receiverBase": "text",
    "receiverCallee": "replace"
  },
  {
    "callback": "function () {\n    try {\n        jQuery(io).remove();\n        jQuery(form).remove();\n    } catch (e) {\n        jQuery.handleError(s, xml, null, e);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    if (!requestDone)\n        uploadCallback('timeout');\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (name) {\n    return require(name, dirname(path));\n}",
    "receiverBase": "",
    "receiverCallee": "fn"
  },
  {
    "callback": "function () {\n    __extends(LocationsCollection, UberCollection);\n    function LocationsCollection() {\n        LocationsCollection.__super__.constructor.apply(this, arguments);\n    }\n    LocationsCollection.prototype.model = app.models.location;\n    return LocationsCollection;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    __extends(PaymentProfilesCollection, UberCollection);\n    function PaymentProfilesCollection() {\n        PaymentProfilesCollection.__super__.constructor.apply(this, arguments);\n    }\n    PaymentProfilesCollection.prototype.model = app.models.paymentprofile;\n    return PaymentProfilesCollection;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    __extends(TripsCollection, UberCollection);\n    function TripsCollection() {\n        TripsCollection.__super__.constructor.apply(this, arguments);\n    }\n    TripsCollection.prototype.model = app.models.trip;\n    TripsCollection.prototype.url = '/trips';\n    TripsCollection.prototype.relationships = 'client,driver,city';\n    return TripsCollection;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    __extends(UberCollection, Backbone.Collection);\n    function UberCollection() {\n        UberCollection.__super__.constructor.apply(this, arguments);\n    }\n    UberCollection.prototype.parse = function (data) {\n        if (data.meta) {\n            this.meta = data.meta;\n            return data.resources;\n        }\n        return data;\n    };\n    return UberCollection;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (key) {\n    var event, func, selector, split;\n    split = key.split(' ');\n    event = split[0];\n    selector = split[1];\n    func = events[key];\n    return $(self.el).find(selector).live(event, function (e) {\n        return self[func](e);\n    });\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (e) {\n    return self[func](e);\n}",
    "receiverBase": "find",
    "receiverCallee": "live"
  },
  {
    "callback": "function () {\n    this.HideSpinner();\n    $.cookie('token', this.model.get('token'));\n    amplify.store('USERjson', this.model);\n    this.ReadUserInfo(true);\n    if (typeof callback === 'function') {\n        return callback.call();\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function () {\n    window.USER.client_promotions = this.model.get('valid_client_promotions');\n    this.CacheData('USERPromos', this.model.get('valid_client_promotions'));\n    if (typeof callback === 'function') {\n        return callback.call();\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function () {\n    window.USER.trips = app.collections.trips;\n    this.CacheData('USERtrips', window.USER.trips);\n    if (typeof callback === 'function') {\n        callback.call();\n    }\n    return this.HideSpinner();\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function () {\n    return google.load('maps', 3, {\n        callback: callback,\n        other_params: 'sensor=false&language=en&libraries=places'\n    });\n}",
    "receiverBase": "$",
    "receiverCallee": "getScript"
  },
  {
    "callback": "function () {\n    __extends(Client, UberModel);\n    function Client() {\n        Client.__super__.constructor.apply(this, arguments);\n    }\n    Client.prototype.url = function () {\n        if (this.id) {\n            return '/clients/' + this.id;\n        } else {\n            return '/clients';\n        }\n    };\n    return Client;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    __extends(ClientBills, Backbone.Model);\n    function ClientBills() {\n        ClientBills.__super__.constructor.apply(this, arguments);\n    }\n    ClientBills.prototype.url = function () {\n        return '/client_bills/' + this.id;\n    };\n    return ClientBills;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    __extends(Location, Backbone.Model);\n    function Location() {\n        Location.__super__.constructor.apply(this, arguments);\n    }\n    Location.prototype.url = function () {\n        if (this.id) {\n            return '/locations/' + this.id;\n        } else {\n            return '/locations';\n        }\n    };\n    return Location;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    __extends(PaymentProfile, Backbone.Model);\n    function PaymentProfile() {\n        PaymentProfile.__super__.constructor.apply(this, arguments);\n    }\n    PaymentProfile.prototype.url = function () {\n        if (this.id) {\n            return '/payment_profiles/' + this.id;\n        } else {\n            return '/payment_profiles';\n        }\n    };\n    return PaymentProfile;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    __extends(Promotions, Backbone.Model);\n    function Promotions() {\n        Promotions.__super__.constructor.apply(this, arguments);\n    }\n    Promotions.prototype.url = function () {\n        return '/clients_promotions';\n    };\n    return Promotions;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    __extends(Trip, Backbone.Model);\n    function Trip() {\n        Trip.__super__.constructor.apply(this, arguments);\n    }\n    Trip.prototype.url = function () {\n        return '/trips/' + this.get('id');\n    };\n    return Trip;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    var cards, newForm;\n    this.HideSpinner();\n    $(this.el).html(clientsBillingTemplate());\n    if (USER.payment_gateway.payment_profiles.length === 0) {\n        newForm = new app.views.clients.modules.creditcard();\n        $(this.el).find('#add_card_wrapper').html(newForm.render(0).el);\n    } else {\n        cards = new app.views.clients.modules.creditcard();\n        $('#cards').html(cards.render('all').el);\n    }\n    return this.delegateEvents();\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (data, textStatus, jqXHR) {\n    $el.parent().find('.success_message').text(t('Billing Succeeded'));\n    $el.hide();\n    return $el.parent().find('#card_to_charge').hide();\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (jqXHR, status, errorThrown) {\n    return $el.parent().find('.error_message').text(JSON.parse(status.responseText).error);\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function () {\n    return this.HideSpinner();\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (e) {\n    this.HideSpinner();\n    return $('.error_message').show();\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function () {\n    if (USER.trips.models[0]) {\n        if (!USER.trips.models[0].get('points')) {\n            return USER.trips.models[0].fetch({\n                data: { relationships: 'points' },\n                success: __bind(function () {\n                    this.CacheData('USERtrips', USER.trips);\n                    return displayFirstTrip();\n                }, this)\n            });\n        } else {\n            return displayFirstTrip();\n        }\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function () {\n    this.CacheData('USERtrips', USER.trips);\n    return displayFirstTrip();\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function () {\n    return this.DownloadUserTrips(displayPage, false, 10);\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (point) {\n    path.push(new google.maps.LatLng(point.lat, point.lng));\n    return bounds.extend(_.last(path));\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function () {\n    return blink(element);\n}",
    "receiverBase": "element",
    "receiverCallee": "fadeTo"
  },
  {
    "callback": "function (data, textStatus, jqXHR) {\n    return $el.html(t('Resend Email Succeeded'));\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (jqXHR, textStatus, errorThrown) {\n    return $el.html(t('Resend Email Failed'));\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (data, textStatus, jqXHR) {\n    return $el.html(t('Resend Text Succeeded'));\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (jqXHR, textStatus, errorThrown) {\n    return $el.html(t('Resend Text Failed'));\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (data, textStatus, jqXHR) {\n    this.HideSpinner();\n    $('.success_message').show();\n    return $('#forgot_password').hide();\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (e) {\n    this.HideSpinner();\n    return $('.error_message').show();\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (data, textStatus, jqXHR) {\n    this.HideSpinner();\n    $.cookie('token', data.token);\n    amplify.store('USERjson', data);\n    app.refreshMenu();\n    return location.hash = '!/dashboard';\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (e) {\n    this.HideSpinner();\n    return $('#error_reset').show();\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function () {\n    return this.RefreshUserInfo(__bind(function () {\n        this.render('all');\n        return this.HideSpinner();\n    }, this));\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function () {\n    this.render('all');\n    return this.HideSpinner();\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (e) {\n    this.HideSpinner();\n    $('#cc_form_wrapper').hide();\n    app.collections.paymentprofiles.trigger('refresh');\n    $(this.el).remove();\n    $('a#add_card').show();\n    return $('section').html(app.views.clients.billing.render().el);\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (e) {\n    var error, errors, _i, _len, _ref, _results;\n    this.HideSpinner();\n    errors = JSON.parse(e.responseText);\n    _ref = _.keys(errors);\n    _results = [];\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        error = _ref[_i];\n        _results.push(error === 'top_of_form' ? $('#top_of_form').html(errors[error]) : $('#credit_card_form').find('#' + error).parent().find('.error_message').html(errors[error]));\n    }\n    return _results;\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (e) {\n    this.HideSpinner();\n    return $('#top_of_form').html(t('Unable to Verify Card'));\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (response) {\n    this.HideSpinner();\n    this.ShowSuccess(t('Credit Card Update Succeeded'));\n    $('#e' + id).hide();\n    $('#d' + id).find('.edit_card_show').html(t('Edit'));\n    return app.collections.paymentprofiles.trigger('refresh');\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (e) {\n    this.HideSpinner();\n    this.ShowError(t('Credit Card Update Failed'));\n    return $el.removeAttr('disabled');\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (response) {\n    this.ShowSuccess(t('Credit Card Delete Succeeded'));\n    $('form').hide();\n    app.collections.paymentprofiles.trigger('refresh');\n    return $('section').html(app.views.clients.billing.render().el);\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (xhr, e) {\n    this.HideSpinner();\n    return this.ShowError(t('Credit Card Delete Failed'));\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (response) {\n    return this.ShowSuccess(t('Credit Card Update Category Succeeded'));\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (e) {\n    return this.ShowError(t('Credit Card Update Category Failed'));\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (response) {\n    this.ShowSuccess(t('Credit Card Update Default Succeeded'));\n    return app.collections.paymentprofiles.trigger('refresh');\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (e) {\n    return this.ShowError(t('Credit Card Update Default Failed'));\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function () {\n    $(this.el).html(clientsPromotionsTemplate({ promos: window.USER.unexpired_client_promotions || [] }));\n    return this.HideSpinner();\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function () {\n    $('section').html(this.render().el);\n    return this.HideSpinner();\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (response) {\n    this.HideSpinner();\n    if (response.get('first_name')) {\n        return this.ShowSuccess('Your promotion has been applied in the form of an account credit. <a href=\\'#!/billing\\'>Click here</a> to check your balance.');\n    } else {\n        this.ShowSuccess('Your promotion has successfully been applied');\n        return this.RefreshUserInfo(this.render, true);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (e) {\n    this.ShowError(JSON.parse(e.responseText).error);\n    return this.HideSpinner();\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function () {\n    return this.AskDispatch('NearestCab');\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (data) {\n    var location;\n    location = new google.maps.LatLng(data.coords.latitude, data.coords.longitude);\n    this.pickup_icon.setPosition(location);\n    this.map.panTo(location);\n    return this.map.setZoom(16);\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (cab) {\n    return cab.setIcon(this.cabMarker);\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (num) {\n    if ($el.find('.stars#' + (num + 1)).attr('src') === '/web/img/star_active.png') {\n        return rating = num + 1;\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "times"
  },
  {
    "callback": "function (point) {\n    path.push(new google.maps.LatLng(point.lat, point.lng));\n    return bounds.extend(_.last(path));\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (result, status) {\n    if (status !== 'OK') {\n        $('.error_message').html(t('Search Address Failed')).fadeIn();\n        return;\n    }\n    _.each(result, showResults);\n    $('#search_results').html($locationsDiv);\n    this.locationChange('search');\n    this.searchResults = result;\n    return this.displaySearchLoc();\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (index) {\n    return $('.stars#' + (index + 1)).attr('src', '/web/img/star_active.png');\n}",
    "receiverBase": "_",
    "receiverCallee": "times"
  },
  {
    "callback": "function (v, m, f) {\n    if (v) {\n        this.AskDispatch('PickupCanceledClient');\n        return this.setStatus('ready');\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (point) {\n    return point.setMap(null);\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (data, textStatus, jqXHR) {\n    return $el.html(t('Favorite Location Save Succeeded'));\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (jqXHR, textStatus, errorThrown) {\n    return $el.find('.error_message').html(t('Favorite Location Save Failed'));\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (data) {\n    return this.HideSpinner();\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function () {\n    return this.pickup_icon.setPosition(marker.getPosition());\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (marker) {\n    return marker.setMap(null);\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (cab) {\n    var point;\n    point = new google.maps.Marker({\n        position: new google.maps.LatLng(cab.latitude, cab.longitude),\n        map: this.map,\n        icon: this.cabMarker,\n        title: t('ETA Message', { minutes: app.helpers.FormatSeconds(cab != null ? cab.eta : void 0, true) })\n    });\n    if (cab.eta < lowestETA) {\n        lowestETA = cab.eta;\n    }\n    return this.cabs.push(point);\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (location) {\n    if (parseFloat(location.latitude) === parseFloat(data.pickupLocation.latitude) && parseFloat(location.longitude) === parseFloat(data.pickupLocation.longitude)) {\n        return locationSaved = true;\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (result, status) {\n    $('#rideAddress').html(result[0].formatted_address);\n    return $('#favLocNickname').val('' + result[0].address_components[0].short_name + ' ' + result[0].address_components[1].short_name);\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (data, textStatus, jqXHR) {\n    if (data.messageType === 'Error') {\n        return $('#status_message').html(data.description);\n    } else {\n        return this.AskDispatch('StatusClient');\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (data, textStatus, jqXHR) {\n    if (data.messageType === 'OK') {\n        return this.setStatus('ready');\n    } else {\n        return $('#status_message').html(data.description);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (data, textStatus, jqXHR) {\n    if (data.messageType === 'OK') {\n        this.setStatus('init');\n    } else {\n        $('status_message').html(t('Rating Driver Failed'));\n    }\n    return this.HideSpinner();\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (data, textStatus, jqXHR) {\n    if (data.messageType === 'OK') {\n        return alert('rated');\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (jqXHR, textStatus, errorThrown) {\n    $('#status_message').html(errorThrown);\n    return this.HideSpinner();\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function () {\n    var $el, alphabet;\n    this.delegateEvents();\n    this.HideSpinner();\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    $el = $(this.el);\n    $(this.el).html(clientsSettingsTemplate({ type: type }));\n    $el.find('#' + type + '_div').show();\n    $el.find('a[href=\\'' + type + '_div\\']').parent().addClass('active');\n    return document.title = '' + this.tabTitle[type + '_div'] + ' ' + this.pageTitle;\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (response) {\n    this.ShowSuccess(t('Information Update Succeeded'));\n    return this.RefreshUserInfo();\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (model, data) {\n    var errors;\n    if (data.status === 406) {\n        errors = JSON.parse(data.responseText);\n        return _.each(_.keys(errors), function (field) {\n            return $('#' + field).parent().find('span.error_message').text(errors[field]);\n        });\n    } else {\n        return this.ShowError(t('Information Update Failed'));\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (field) {\n    return $('#' + field).parent().find('span.error_message').text(errors[field]);\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    return $('#settingsProfPic').attr('src', USER.picture_url + ('?' + Math.floor(Math.random() * 1000)));\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function () {\n    if (!$('#mobile').val()) {\n        return $('#mobile_country').find('option[value=' + $(this).val() + ']').attr('selected', 'selected').end().trigger('change');\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "live"
  },
  {
    "callback": "function (response) {\n    return this.HideSpinner();\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (point) {\n    path.push(new google.maps.LatLng(point.lat, point.lng));\n    return bounds.extend(_.last(path));\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (response) {\n    $('.success_message').fadeIn();\n    return $('#fare_review_form_wrapper').slideUp();\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (error) {\n    return errorMessage.fadeIn();\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (xhr) {\n    var response;\n    response = JSON.parse(xhr.responseText);\n    $('#spinner').hide();\n    switch (xhr.status) {\n    case 200:\n        this.$('.resendReceiptSuccess').html('Receipt has been emailed');\n        return this.$('.resendReceiptSuccess').fadeOut(2000);\n    default:\n        this.$('.resendReceiptError').html('Receipt has failed to be emailed');\n        return this.$('.resendReceiptError').fadeOut(2000);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function () {\n    __extends(CountriesCollection, UberCollection);\n    function CountriesCollection() {\n        CountriesCollection.__super__.constructor.apply(this, arguments);\n    }\n    CountriesCollection.prototype.model = app.models.country;\n    CountriesCollection.prototype.url = '/countries';\n    return CountriesCollection;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (m, p1, p2) {\n    return p1 + p2.toUpperCase();\n}",
    "receiverBase": "replace",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (doc) {\n    return __indexOf.call((documents != null ? documents.pluck('name') : void 0) || [], doc) >= 0;\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function () {\n    __extends(Country, UberModel);\n    function Country() {\n        Country.__super__.constructor.apply(this, arguments);\n    }\n    Country.prototype.url = function () {\n        if (this.id) {\n            return '/countries/' + this.id;\n        } else {\n            return '/countries';\n        }\n    };\n    return Country;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (model) {\n    return tableRows.push(model.toTableRow(cols));\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (model) {\n    if (this.options.urlRendering) {\n        window.location.hash = '#/' + this.model.endpoint + '/' + this.model.get('id');\n    } else {\n        this.view = 'show';\n    }\n    return this.flash('success', 'Uber save!');\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (xhr) {\n    this.errors = JSON.parse(xhr.responseText);\n    return this.flash('error', 'That was not Uber.');\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (model, xhr) {\n    var code, message, responseJSON, responseText;\n    code = xhr.status;\n    responseText = xhr.responseText;\n    if (responseText) {\n        responseJSON = JSON.parse(responseText);\n    }\n    if (responseJSON && typeof responseJSON === 'object' && responseJSON.hasOwnProperty('error')) {\n        message = responseJSON.error;\n    }\n    return this.flash('error', (code || 'Unknown') + ' error' + (': ' + message || ''));\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function () {\n    return this.model.change();\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function () {\n    return this.model.change();\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (key) {\n    var event, func, selector, split;\n    split = key.split(' ');\n    event = split[0];\n    selector = split[1];\n    func = events[key];\n    return $(self.el).find(selector).live(event, function (e) {\n        return self[func](e);\n    });\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (e) {\n    return self[func](e);\n}",
    "receiverBase": "find",
    "receiverCallee": "live"
  },
  {
    "callback": "function () {\n    if ($dataTable && $dataTable.length > 0) {\n        return $dataTable.fnAdjustColumnSizing();\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function () {\n    var $this, latLng, point;\n    $this = $(this);\n    point = JSON.parse($this.attr('data-point'));\n    latLng = new google.maps.LatLng(point.latitude, point.longitude);\n    return geocoder.geocode({ latLng: latLng }, function (data, status) {\n        if (status === google.maps.GeocoderStatus.OK) {\n            return $this.text(data[0].formatted_address);\n        }\n    });\n}",
    "receiverBase": "find",
    "receiverCallee": "each"
  },
  {
    "callback": "function (data, status) {\n    if (status === google.maps.GeocoderStatus.OK) {\n        return $this.text(data[0].formatted_address);\n    }\n}",
    "receiverBase": "geocoder",
    "receiverCallee": "geocode"
  },
  {
    "callback": "function () {\n    var $this;\n    $this = $(this);\n    return attrs['' + $this.attr('name')] = $this.val();\n}",
    "receiverBase": "find",
    "receiverCallee": "each"
  },
  {
    "callback": "function (error, field) {\n    return $el.find('[name=' + field + ']').parent().find('span.error').text(error);\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    return $banner.animate({ top: -$banner.outerHeight() }, 500);\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    return google.load('maps', 3, {\n        callback: callback,\n        other_params: 'sensor=false&language=en'\n    });\n}",
    "receiverBase": "$",
    "receiverCallee": "getScript"
  },
  {
    "callback": "function (i, e) {\n    arbData[$(e).attr('name')] = $(e).val();\n    if ($(e).val() === '') {\n        invalid = true;\n        return $(e).addClass('validationError');\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "__bind"
  },
  {
    "callback": "function (result, value, key) {\n    (hasOwnProperty.call(result, key) ? result[key] : result[key] = []).push(value);\n}",
    "receiverBase": "",
    "receiverCallee": "createAggregator"
  },
  {
    "callback": "function (e) {\n    if (e.distX > e.distY && e.distX < -e.distY || e.distX < e.distY && e.distX > -e.distY) {\n        e.preventDefault();\n    }\n}",
    "receiverBase": "$element",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    self.shift('next');\n}",
    "receiverBase": "$element",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    self.shift('prev');\n}",
    "receiverBase": "$element",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (event, index) {\n    self.shift(index);\n}",
    "receiverBase": "$element",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (event, index) {\n    self.startClock();\n}",
    "receiverBase": "$element",
    "receiverCallee": "bind"
  },
  {
    "callback": "function (event, index) {\n    self.stopClock();\n}",
    "receiverBase": "$element",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    imagesLoadedCount += 1;\n    if (imagesLoadedCount === $imageSlides.length) {\n        self.loaded();\n    }\n}",
    "receiverBase": "$imageSlides",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    self.orbitWidth = self.$element.outerWidth();\n    self.orbitHeight = self.$element.height();\n}",
    "receiverBase": "$",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    self.$slides.css({ 'display': 'block' });\n}",
    "receiverBase": "css",
    "receiverCallee": "fadeIn"
  },
  {
    "callback": "function () {\n    self.$element.trigger('orbit.next');\n}",
    "receiverBase": "",
    "receiverCallee": "setInterval"
  },
  {
    "callback": "function () {\n    if (!self.timerRunning) {\n        self.startClock();\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    self.stopClock();\n    if (self.options.resetTimerOnClick) {\n        self.rotateTimer(true);\n        self.startClock();\n    }\n    self.$element.trigger('orbit.prev');\n}",
    "receiverBase": "find",
    "receiverCallee": "click"
  },
  {
    "callback": "function () {\n    self.stopClock();\n    if (self.options.resetTimerOnClick) {\n        self.rotateTimer(true);\n        self.startClock();\n    }\n    self.$element.trigger('orbit.next');\n}",
    "receiverBase": "find",
    "receiverCallee": "click"
  },
  {
    "callback": "function () {\n    self.stopClock();\n    if (self.options.resetTimerOnClick) {\n        self.rotateTimer(true);\n        self.startClock();\n    }\n    self.$element.trigger('orbit.goto', [$li.data('index')]);\n}",
    "receiverBase": "$li",
    "receiverCallee": "click"
  },
  {
    "callback": "function () {\n    $(this).css({ 'opacity': 0 });\n}",
    "receiverBase": "eq",
    "receiverCallee": "animate"
  },
  {
    "callback": "function () {\n    $(this).css({ 'opacity': 0 });\n}",
    "receiverBase": "eq",
    "receiverCallee": "animate"
  },
  {
    "callback": "function () {\n    var orbit = $.extend({}, ORBIT);\n    orbit.init(this, options);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    callback.apply(element, arguments);\n    $this.unbind('load.imageready');\n}",
    "receiverBase": "$this",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    preempted || app.run();\n}",
    "receiverBase": "",
    "receiverCallee": "contentLoaded"
  },
  {
    "callback": "function () {\n    expect(this.view.$('.name')).toContainText('john_the_table');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(this.view.$('img')).toHaveAttr('src', this.dataset.iconUrl());\n    expect(this.view.$('img')).toHaveAttr('title', Handlebars.helpers.humanizedDatasetType(this.dataset.attributes));\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    this.dataset = backboneFixtures.workspaceDataset.datasetTable({ objectName: 'john_the_table' });\n    this.qtipSpy = stubQtip();\n    this.view = new chorus.views.DatasetItem({\n        model: this.dataset,\n        hasActiveWorkspace: true\n    });\n    this.view.render();\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    expect(this.view.$('.data_source')).toContainText(this.dataset.dataSource().get('name'));\n    expect(this.view.$('.database')).toContainText(this.dataset.database().get('name'));\n    expect(this.view.$('.schema')).toContainText(this.dataset.schema().get('name'));\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(this.view.$('.data_source').data('data_source')).toEqual(this.dataset.dataSource().attributes);\n    expect(this.view.$('.database').data('data_source')).toEqual(this.dataset.dataSource().attributes);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    this.dataset = backboneFixtures.dataset();\n    this.view = new chorus.views.DatasetItem({\n        model: this.dataset,\n        hasActiveWorkspace: true\n    });\n    this.view.render();\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    expect(this.view.$('.found_in')).toContainText('Hoge');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(this.qtipSpy).not.toHaveVisibleQtip();\n    this.view.$('.found_in .open_other_menu').click();\n    expect(this.qtipSpy).toHaveVisibleQtip();\n    expect(this.qtipSpy.find('li').length).toBe(2);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    beforeEach(function () {\n        this.dataset.unset('workspaceUsed');\n        delete this.dataset._workspaceAssociated;\n        this.view.render();\n    });\n    it('renders successfully without the workspace usage section', function () {\n        expect(this.view.$('.found_in')).not.toExist();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "context"
  },
  {
    "callback": "function () {\n    this.dataset.unset('workspaceUsed');\n    delete this.dataset._workspaceAssociated;\n    this.view.render();\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    expect(this.view.$('.found_in')).not.toExist();\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    beforeEach(function () {\n        this.view.options.hasActiveWorkspace = false;\n        this.view.render();\n    });\n    it('does not have dataset links (still has data source links)', function () {\n        expect(this.view.$('a.image')).not.toExist();\n        expect(this.view.$('a.name')).not.toExist();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "xdescribe"
  },
  {
    "callback": "function () {\n    this.view.options.hasActiveWorkspace = false;\n    this.view.render();\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    expect(this.view.$('a.image')).not.toExist();\n    expect(this.view.$('a.name')).not.toExist();\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    itRendersTheNameAndIcon();\n    it('links the dataset name and icon to its show page', function () {\n        expect(this.view.$('.name')).toHaveHref(this.dataset.showUrl());\n        expect(this.view.$('.image')).toHaveHref(this.dataset.showUrl());\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "context"
  },
  {
    "callback": "function () {\n    expect(this.view.$('.name')).toHaveHref(this.dataset.showUrl());\n    expect(this.view.$('.image')).toHaveHref(this.dataset.showUrl());\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    beforeEach(function () {\n        this.dataset.set({ hasCredentials: false });\n    });\n    it('adds the \\'no_credentials\\' class to the element', function () {\n        expect($(this.view.el)).toHaveClass('no_credentials');\n    });\n    itRendersTheNameAndIcon();\n    it('does not link the dataset name or icon to its show page', function () {\n        expect(this.view.$('.name')).toBe('span');\n        expect(this.view.$('.image')).toBe('span');\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "context"
  },
  {
    "callback": "function () {\n    this.dataset.set({ hasCredentials: false });\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    expect($(this.view.el)).toHaveClass('no_credentials');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(this.view.$('.name')).toBe('span');\n    expect(this.view.$('.image')).toBe('span');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    this.dataset.set({\n        recentComments: [{\n                body: 'I love you john.',\n                author: {\n                    id: '1',\n                    lastName: 'Smith',\n                    firstName: 'Bob'\n                },\n                timestamp: '2011-12-15T12:34:56Z'\n            }]\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    expect(this.view.$('.comment .body')).toContainText('I love you john.');\n    expect(this.view.$('.comment a')).toContainText('Bob Smith');\n    expect(this.view.$('.comment_info .on')).toContainText('Dec 15');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(this.view.$('.comment')).not.toContainText(t('comments.other_comments', { count: 0 }));\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    beforeEach(function () {\n        this.dataset.unset('recentComments');\n    });\n    it('does not display the most recent comment', function () {\n        expect(this.view.$('.comment')).not.toExist();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "context"
  },
  {
    "callback": "function () {\n    this.dataset.unset('recentComments');\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    expect(this.view.$('.comment')).not.toExist();\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    beforeEach(function () {\n        this.dataset.set({ commentCount: 3 });\n    });\n    it('displays the \\'other comments\\' text', function () {\n        expect(this.view.$('.comment')).toContainText(t('comments.other_comments', { count: 2 }));\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "context"
  },
  {
    "callback": "function () {\n    this.dataset.set({ commentCount: 3 });\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    expect(this.view.$('.comment')).toContainText(t('comments.other_comments', { count: 2 }));\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    beforeEach(function () {\n        this.dataset.tags().reset([\n            { name: 'tag1' },\n            { name: 'tag2' }\n        ]);\n        this.view.render();\n    });\n    it('shows a list of tags', function () {\n        expect(this.view.$('.item_tag_list')).toContainTranslation('tag_list.title');\n        expect(this.view.$('.item_tag_list')).toContainText('tag1 tag2');\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "context"
  },
  {
    "callback": "function () {\n    this.dataset.tags().reset([\n        { name: 'tag1' },\n        { name: 'tag2' }\n    ]);\n    this.view.render();\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    expect(this.view.$('.item_tag_list')).toContainTranslation('tag_list.title');\n    expect(this.view.$('.item_tag_list')).toContainText('tag1 tag2');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var table = backboneFixtures.dataset({ objectName: 'yyy' });\n    var view = new chorus.views.DatasetItem({ model: table });\n    view.render();\n    expect(view.$('.name')).toHaveHref(table.showUrl());\n    expect(view.$('.image')).toHaveHref(table.showUrl());\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    beforeEach(function () {\n        spyOn(this.view, 'render');\n    });\n    it('reloads the model', function () {\n        this.dataset.trigger('invalidated');\n        expect(this.dataset).toHaveBeenFetched();\n    });\n    it('rerenders the view', function () {\n        this.dataset.trigger('invalidated');\n        expect(this.view.render).toHaveBeenCalled();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "describe"
  },
  {
    "callback": "function () {\n    spyOn(this.view, 'render');\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    this.dataset.trigger('invalidated');\n    expect(this.dataset).toHaveBeenFetched();\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    this.dataset.trigger('invalidated');\n    expect(this.view.render).toHaveBeenCalled();\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    beforeEach(function () {\n        this.model = this.dataset;\n    });\n    itBehavesLike.ItPresentsModelWithTags();\n}",
    "receiverBase": "",
    "receiverCallee": "describe"
  },
  {
    "callback": "function () {\n    this.model = this.dataset;\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    this.dataset = backboneFixtures.workspaceDataset.hdfsDataset({ objectName: 'john_the_table' });\n    this.qtipSpy = stubQtip();\n    this.view = new chorus.views.DatasetItem({\n        model: this.dataset,\n        hasActiveWorkspace: true\n    });\n    this.view.render();\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    expect(this.view.$('.data_source')).toContainText(this.dataset.dataSource().get('name'));\n    expect(this.view.$('.database')).not.toExist();\n    expect(this.view.$('.schema')).not.toExist();\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(this.view.$('.data_source').data('data_source')).toEqual(this.dataset.dataSource().attributes);\n    expect(this.view.$('.database').data('data_source')).toBeUndefined();\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    itRendersTheNameAndIcon();\n    it('links the dataset name and icon to its show page', function () {\n        expect(this.view.$('.name')).toHaveHref(this.dataset.showUrl());\n        expect(this.view.$('.image')).toHaveHref(this.dataset.showUrl());\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "context"
  },
  {
    "callback": "function () {\n    expect(this.view.$('.name')).toHaveHref(this.dataset.showUrl());\n    expect(this.view.$('.image')).toHaveHref(this.dataset.showUrl());\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    beforeEach(function () {\n        this.dataset.set({ hasCredentials: false });\n    });\n    it('adds the \\'no_credentials\\' class to the element', function () {\n        expect($(this.view.el)).toHaveClass('no_credentials');\n    });\n    itRendersTheNameAndIcon();\n    it('does not link the dataset name or icon to its show page', function () {\n        expect(this.view.$('.name')).toBe('span');\n        expect(this.view.$('.image')).toBe('span');\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "context"
  },
  {
    "callback": "function () {\n    this.dataset.set({ hasCredentials: false });\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    expect($(this.view.el)).toHaveClass('no_credentials');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(this.view.$('.name')).toBe('span');\n    expect(this.view.$('.image')).toBe('span');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    this.author = {\n        id: '1',\n        lastName: 'Buganvilia',\n        firstName: 'Sally'\n    };\n    this.dataset.set({\n        recentComments: [{\n                body: 'I love you john.',\n                author: this.author,\n                timestamp: '2011-12-15T12:34:56Z'\n            }]\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    expect(this.view.$('.comment .body')).toContainText('I love you john.');\n    expect(this.view.$('.comment a')).toContainText(this.author.firstName + ' ' + this.author.lastName);\n    expect(this.view.$('.comment_info .on')).toContainText('Dec 15');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(this.view.$('.comment')).not.toContainText(t('comments.other_comments', { count: 0 }));\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    beforeEach(function () {\n        this.dataset.set({ commentCount: 3 });\n    });\n    it('displays the \\'other comments\\' text', function () {\n        var $comment = this.view.$('.comment');\n        var text = t('comments.other_comments', { count: 2 });\n        expect($comment).toContainText(text);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "context"
  },
  {
    "callback": "function () {\n    this.dataset.set({ commentCount: 3 });\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    var $comment = this.view.$('.comment');\n    var text = t('comments.other_comments', { count: 2 });\n    expect($comment).toContainText(text);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    beforeEach(function () {\n        this.dataset.unset('recentComments');\n    });\n    it('does not display the most recent comment', function () {\n        expect(this.view.$('.comment')).not.toExist();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "context"
  },
  {
    "callback": "function () {\n    this.dataset.unset('recentComments');\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    expect(this.view.$('.comment')).not.toExist();\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    beforeEach(function () {\n        this.dataset.tags().reset([\n            { name: 'tag1' },\n            { name: 'tag2' }\n        ]);\n        this.view.render();\n    });\n    it('shows a list of tags', function () {\n        expect(this.view.$('.item_tag_list')).toContainTranslation('tag_list.title');\n        expect(this.view.$('.item_tag_list')).toContainText('tag1 tag2');\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "context"
  },
  {
    "callback": "function () {\n    this.dataset.tags().reset([\n        { name: 'tag1' },\n        { name: 'tag2' }\n    ]);\n    this.view.render();\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    expect(this.view.$('.item_tag_list')).toContainTranslation('tag_list.title');\n    expect(this.view.$('.item_tag_list')).toContainText('tag1 tag2');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var table = backboneFixtures.dataset({ objectName: 'yyy' });\n    var view = new chorus.views.DatasetItem({ model: table });\n    view.render();\n    expect(view.$('.name')).toHaveHref(table.showUrl());\n    expect(view.$('.image')).toHaveHref(table.showUrl());\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    beforeEach(function () {\n        spyOn(this.dataset, 'fetch');\n    });\n    it('reloads the model', function () {\n        this.dataset.trigger('invalidated');\n        expect(this.dataset.fetch).toHaveBeenCalled();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "describe"
  },
  {
    "callback": "function () {\n    spyOn(this.dataset, 'fetch');\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    this.dataset.trigger('invalidated');\n    expect(this.dataset.fetch).toHaveBeenCalled();\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    beforeEach(function () {\n        this.model = this.dataset;\n    });\n    itBehavesLike.ItPresentsModelWithTags();\n}",
    "receiverBase": "",
    "receiverCallee": "describe"
  },
  {
    "callback": "function () {\n    this.model = this.dataset;\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    it('displays a link with an stale/invalid marker', function () {\n        this.dataset.set('stale', true);\n        expect(this.view.$('.stale_marker')).toExist();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "context"
  },
  {
    "callback": "function () {\n    this.dataset.set('stale', true);\n    expect(this.view.$('.stale_marker')).toExist();\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function ($locationProvider, startupInfoProvider, routesManagerProvider) {\n    $locationProvider.html5Mode(true).hashPrefix('!');\n    startupInfoProvider.setURLsConfig($locationProvider.html5Mode(), $locationProvider.hashPrefix());\n    var baseRouteURL = startupInfoProvider.$get().getBaseURL() + '/html5';\n    routesManagerProvider.configRoutes(baseRouteURL);\n}",
    "receiverBase": "module",
    "receiverCallee": "config"
  }
]