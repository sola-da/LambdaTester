[
  {
    "callback": "function () {\n    var div = document.createElement('div');\n    div.innerHTML = 'onDOMReady successfully fired after the DOM was ready :)';\n    try {\n        document.body.appendChild(div);\n    } catch (e) {\n        alert('onDOMReady fired before the DOM was ready :(');\n    }\n}",
    "receiverBase": "Event",
    "receiverCallee": "onDOMReady"
  },
  {
    "callback": "function (exercise) {\n    result.en.exercise[exercise] = exercise;\n}",
    "receiverBase": "exercises",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    this.isSeeded = true;\n    cb && cb();\n}",
    "receiverBase": "random",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function () {\n    var ctx = context({ url: '/store/shoes' });\n    ctx.querystring = 'page=2&color=blue';\n    ctx.url.should.equal('/store/shoes?page=2&color=blue');\n    ctx.querystring.should.equal('page=2&color=blue');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var ctx = context({ url: '/store/shoes' });\n    ctx.querystring = 'page=2&color=blue';\n    ctx.url.should.equal('/store/shoes?page=2&color=blue');\n    ctx.search.should.equal('?page=2&color=blue');\n    ctx.query.should.eql({\n        page: '2',\n        color: 'blue'\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var ctx = context({ url: '/store/shoes' });\n    ctx.querystring = 'page=2&color=blue';\n    ctx.url.should.equal('/store/shoes?page=2&color=blue');\n    ctx.originalUrl.should.equal('/store/shoes');\n    ctx.request.originalUrl.should.equal('/store/shoes');\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (name, index) {\n    item[name] = row[index];\n}",
    "receiverBase": "names",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    var config = {\n            type: 'file',\n            field: 'avatar',\n            extension: [\n                'jpg',\n                'jpeg',\n                'gif',\n                'png'\n            ]\n        };\n    expect(validations.file(config, 'user.gif')).toBeTruthy();\n    expect(validations.file(config, 'user.doc')).toBeFalsy();\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var config = {\n            type: 'range',\n            field: 'euro'\n        };\n    expect(validations.range(config, 34)).toBeTruthy();\n    expect(validations.range(config, 3.4)).toBeTruthy();\n    expect(validations.range(config, '3.4')).toBeTruthy();\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var config = {\n            type: 'range',\n            field: 'euro',\n            min: 0\n        };\n    expect(validations.range(config, 3.4)).toBeTruthy();\n    expect(validations.range(config, 0)).toBeTruthy();\n    expect(validations.range(config, -3.4)).toBeFalsy();\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var config = {\n            type: 'range',\n            field: 'euro',\n            max: 10\n        };\n    expect(validations.range(config, 2)).toBeTruthy();\n    expect(validations.range(config, 10)).toBeTruthy();\n    expect(validations.range(config, 11)).toBeFalsy();\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var config = {\n            type: 'range',\n            field: 'euro',\n            min: 0,\n            max: 10\n        };\n    expect(validations.range(config, -3.4)).toBeFalsy();\n    expect(validations.range(config, 0)).toBeTruthy();\n    expect(validations.range(config, 10)).toBeTruthy();\n    expect(validations.range(config, 11)).toBeFalsy();\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (a, b) {\n    return a.id > b.id ? 1 : 0;\n}",
    "receiverBase": "concat",
    "receiverCallee": "sort"
  },
  {
    "callback": "function (a, b) {\n    if (a.rollup && !b.rollup) {\n        return 1;\n    } else if (!a.rollup && b.rollup) {\n        return -1;\n    } else {\n        return a.line - b.line;\n    }\n}",
    "receiverBase": "messages",
    "receiverCallee": "sort"
  },
  {
    "callback": "function (event) {\n    var name = event.property.text.toLowerCase();\n    if (name == 'box-sizing') {\n        reporter.report('The box-sizing property isn\\'t supported in IE6 and IE7.', event.line, event.col, rule);\n    }\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function () {\n    properties = [];\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function (event) {\n    var name = event.property;\n    if (CSSLint.Util.indexOf(applyTo, name.text) > -1) {\n        properties.push(name);\n    }\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function (event) {\n    var name = event.property.text.toLowerCase();\n    if (propertiesToCheck[name]) {\n        properties[name] = {\n            value: event.value.text,\n            line: event.property.line,\n            col: event.property.col\n        };\n    }\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function (event) {\n    var property = event.property, name = property.text.toLowerCase();\n    if (properties[name] && (lastProperty != name || properties[name] == event.value.text)) {\n        reporter.report('Duplicate property \\'' + event.property + '\\' found.', event.line, event.col, rule);\n    }\n    properties[name] = event.value.text;\n    lastProperty = name;\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function () {\n    count = 0;\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function () {\n    count++;\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function (event) {\n    var selectors = event.selectors;\n    if (count === 0) {\n        reporter.report('Rule is empty.', selectors[0].line, selectors[0].col, rule);\n    }\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function (event) {\n    reporter.error(event.message, event.line, event.col, rule);\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function (event) {\n    if (event.property.text.toLowerCase() == 'float' && event.value.text.toLowerCase() != 'none') {\n        count++;\n    }\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function () {\n    reporter.stat('floats', count);\n    if (count >= 10) {\n        reporter.rollupWarn('Too many floats (' + count + '), you\\'re probably using them for layout. Consider using a grid system instead.', rule);\n    }\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function () {\n    count++;\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function () {\n    if (count > 5) {\n        reporter.rollupWarn('Too many @font-face declarations (' + count + ').', rule);\n    }\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function (event) {\n    if (event.property == 'font-size') {\n        count++;\n    }\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function () {\n    reporter.stat('font-sizes', count);\n    if (count >= 10) {\n        reporter.rollupWarn('Too many font-size declarations (' + count + '), abstraction needed.', rule);\n    }\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function () {\n    gradients = {\n        moz: 0,\n        webkit: 0,\n        oldWebkit: 0,\n        ms: 0,\n        o: 0\n    };\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function (event) {\n    if (/\\-(moz|ms|o|webkit)(?:\\-(?:linear|radial))\\-gradient/i.test(event.value)) {\n        gradients[RegExp.$1] = 1;\n    } else if (/\\-webkit\\-gradient/i.test(event.value)) {\n        gradients.oldWebkit = 1;\n    }\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function (event) {\n    reporter.report('@import prevents parallel downloads, use <link> instead.', event.line, event.col, rule);\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function (event) {\n    if (event.important === true) {\n        count++;\n        reporter.report('Use of !important', event.line, event.col, rule);\n    }\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function () {\n    reporter.stat('important', count);\n    if (count >= 10) {\n        reporter.rollupWarn('Too many !important declarations (' + count + '), try to use less than 10 to avoid specifity issues.', rule);\n    }\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function (event) {\n    var name = event.property.text.toLowerCase();\n    if (event.invalid) {\n        reporter.report(event.invalid.message, event.line, event.col, rule);\n    }\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function (event) {\n    var name = event.property.text.toLowerCase(), value = event.value;\n    if (lastRule) {\n        lastRule.propCount++;\n        if (name == 'outline' && (value == 'none' || value == '0')) {\n            lastRule.outline = true;\n        }\n    }\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function () {\n    var prop;\n    for (prop in classes) {\n        if (classes.hasOwnProperty(prop)) {\n            if (classes[prop].length == 1 && classes[prop][0].part.elementName) {\n                reporter.report('Element (' + classes[prop][0].part + ') is overqualified, just use ' + classes[prop][0].modifier + ' without element name.', classes[prop][0].part.line, classes[prop][0].part.col, rule);\n            }\n        }\n    }\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function () {\n    count++;\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function () {\n    reporter.stat('rule-count', count);\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function (event) {\n    var name = event.property.toString().toLowerCase(), value = event.value.parts[0].value;\n    if (propertiesToCheck[name]) {\n        properties[name] = 1;\n    }\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function (event) {\n    var name = event.property.toString().toLowerCase(), value = event.value;\n    if (name == 'text-indent' && value.parts[0].value < -99) {\n        textIndent = event.property;\n    } else if (name == 'direction' && value == 'ltr') {\n        textIndent = false;\n    }\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function (event) {\n    var prop, messages = [];\n    for (prop in headings) {\n        if (headings.hasOwnProperty(prop)) {\n            if (headings[prop] > 1) {\n                messages.push(headings[prop] + ' ' + prop + 's');\n            }\n        }\n    }\n    if (messages.length) {\n        reporter.rollupWarn('You have ' + messages.join(', ') + ' defined in this stylesheet.', rule);\n    }\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function (event) {\n    var selectors = event.selectors, selector, part, modifier, i, j, k;\n    for (i = 0; i < selectors.length; i++) {\n        selector = selectors[i];\n        part = selector.parts[selector.parts.length - 1];\n        if (part.elementName == '*') {\n            reporter.report(rule.desc, part.line, part.col, rule);\n        }\n    }\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function (event) {\n    var name = event.property.text.toLowerCase();\n    if (!properties[name]) {\n        properties[name] = [];\n    }\n    properties[name].push({\n        name: event.property,\n        value: event.value,\n        pos: num++\n    });\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function (event) {\n    var parts = event.value.parts, i = 0, len = parts.length;\n    while (i < len) {\n        if ((parts[i].units || parts[i].type == 'percentage') && parts[i].value === 0 && parts[i].type != 'time') {\n            reporter.report('Values of 0 shouldn\\'t have units specified.', parts[i].line, parts[i].col, rule);\n        }\n        i++;\n    }\n}",
    "receiverBase": "parser",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function (message, i) {\n    if (!message.rollup) {\n        output.push('<error line=\"' + message.line + '\" column=\"' + message.col + '\" severity=\"' + message.type + '\"' + ' message=\"' + escapeSpecialCharacters(message.message) + '\" source=\"' + generateSource(message.rule) + '\"/>');\n    }\n}",
    "receiverBase": "Util",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (message, i) {\n    if (message.rollup) {\n        output += filename + ': ' + capitalize(message.type) + ' - ' + message.message + '\\n';\n    } else {\n        output += filename + ': ' + 'line ' + message.line + ', col ' + message.col + ', ' + capitalize(message.type) + ' - ' + message.message + '\\n';\n    }\n}",
    "receiverBase": "Util",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (message, i) {\n    if (message.rollup) {\n        output.push('<issue severity=\"' + message.type + '\" reason=\"' + escapeSpecialCharacters(message.message) + '\" evidence=\"' + escapeSpecialCharacters(message.evidence) + '\"/>');\n    } else {\n        output.push('<issue line=\"' + message.line + '\" char=\"' + message.col + '\" severity=\"' + message.type + '\"' + ' reason=\"' + escapeSpecialCharacters(message.message) + '\" evidence=\"' + escapeSpecialCharacters(message.evidence) + '\"/>');\n    }\n}",
    "receiverBase": "Util",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (message, i) {\n    if (message.rollup) {\n        output.push('<issue severity=\"' + message.type + '\" reason=\"' + escapeSpecialCharacters(message.message) + '\" evidence=\"' + escapeSpecialCharacters(message.evidence) + '\"/>');\n    } else {\n        output.push('<issue line=\"' + message.line + '\" char=\"' + message.col + '\" severity=\"' + message.type + '\"' + ' reason=\"' + escapeSpecialCharacters(message.message) + '\" evidence=\"' + escapeSpecialCharacters(message.evidence) + '\"/>');\n    }\n}",
    "receiverBase": "Util",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (message, i) {\n    output = output + '\\n\\n' + shortFilename;\n    if (message.rollup) {\n        output += '\\n' + (i + 1) + ': ' + message.type;\n        output += '\\n' + message.message;\n    } else {\n        output += '\\n' + (i + 1) + ': ' + message.type + ' at line ' + message.line + ', col ' + message.col;\n        output += '\\n' + message.message;\n        output += '\\n' + message.evidence;\n    }\n}",
    "receiverBase": "Util",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (URL) {\n    if (requestMap[URL].promise === promise) {\n        request = requestMap[URL].request;\n        return true;\n    }\n}",
    "receiverBase": "keys",
    "receiverCallee": "some"
  },
  {
    "callback": "function (destination) {\n    destination.fixedDestinationTag = destination.fixedDestinationTag || fixedDestinationTag;\n    return destination;\n}",
    "receiverBase": "destinationPromise",
    "receiverCallee": "then"
  },
  {
    "callback": "function (result) {\n    return new Destination({\n        inputType: 'federatedName',\n        address: result.destination_address,\n        federatedName: federatedName,\n        destinationTag: result.destination_tag || destinationTag,\n        fixedDestinationTag: !!result.destination_tag\n    });\n}",
    "receiverBase": "fetchContactByEmail",
    "receiverCallee": "then"
  },
  {
    "callback": "function (account) {\n    var accountFlags = account.Flags || 0;\n    var requiresDestTagMask = stellar.Remote.flags.account_root.RequireDestTag;\n    destination.requireDestinationTag = !!(accountFlags & requiresDestTagMask);\n    destination.balance = account.Balance || 0;\n    return destination;\n}",
    "receiverBase": "getAccount",
    "receiverCallee": "then"
  },
  {
    "callback": "function (err) {\n    destination.requireDestinationTag = false;\n    destination.balance = 0;\n    return destination;\n}",
    "receiverBase": "then",
    "receiverCallee": "catch"
  },
  {
    "callback": "function (result) {\n    destination.currencyChoices = _.uniq(result.receive_currencies || []);\n    destination.currencyChoices.unshift('STR');\n    return destination;\n}",
    "receiverBase": "request",
    "receiverCallee": "then"
  },
  {
    "callback": "function (err) {\n    destination.currencyChoices = ['STR'];\n    return destination;\n}",
    "receiverBase": "then",
    "receiverCallee": "catch"
  },
  {
    "callback": "function (result) {\n    self.federatedName = result.destination;\n    return self.federatedName;\n}",
    "receiverBase": "fetchContactByAddress",
    "receiverCallee": "then"
  },
  {
    "callback": "function (previousPromise, func, i) {\n    return Deferred.when(previousPromise, func);\n}",
    "receiverBase": "reduce",
    "receiverCallee": "call"
  },
  {
    "callback": "function (Modernizr) {\n    Modernizr.addTest('contentsecuritypolicy', 'SecurityPolicy' in document);\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function () {\n    return data;\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function () {\n    expect(sieveOfEratosthenes(12).toString()).toEqual([\n        2,\n        3,\n        5,\n        7,\n        11\n    ].toString());\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(sieveOfEratosthenes(-12).toString()).toEqual([].toString());\n    expect(sieveOfEratosthenes(0).toString()).toEqual([].toString());\n    expect(sieveOfEratosthenes(1).toString()).toEqual([].toString());\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var sieve = sieveOfEratosthenes(2000000);\n    var sumOfPrimes = sieve.reduce(function (previousValue, currentValue) {\n            return previousValue + currentValue;\n        });\n    expect(sumOfPrimes).toEqual(142913828922);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (previousValue, currentValue) {\n    return previousValue + currentValue;\n}",
    "receiverBase": "sieve",
    "receiverCallee": "reduce"
  }
]