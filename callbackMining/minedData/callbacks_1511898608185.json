[
  {
    "callback": "function (err, data, res) {\n    if (err) {\n        return callback(err, data, res);\n    }\n    if (data) {\n        data.url = that.resourceURL(data.key);\n    }\n    callback(null, data, res);\n}",
    "receiverBase": "that",
    "receiverCallee": "_request"
  },
  {
    "callback": "function (window, $) {\n    var EdgeCommons = function () {\n    };\n    EdgeCommons.VERSION = '0.0.0';\n    EdgeCommons.$ = $;\n    var LOG_GROUP = 'EdgeCommons';\n    window.EC = window.EdgeCommons = EdgeCommons;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    var vendors = [\n            'webkit',\n            'moz'\n        ];\n    for (var x = 0; x < vendors.length && !goog.global.requestAnimationFrame; ++x) {\n        goog.global.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n        goog.global.cancelAnimationFrame = goog.global[vendors[x] + 'CancelAnimationFrame'] || goog.global[vendors[x] + 'CancelRequestAnimationFrame'];\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    var performance = goog.global['performance'];\n    var now = performance && (performance['now'] || performance['webkitNow']);\n    lime.scheduleManager.now = function () {\n        return now ? now.call(performance) : goog.now();\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    return function (scope, elem, attr) {\n        elem[0].focus();\n    };\n}",
    "receiverBase": "module",
    "receiverCallee": "directive"
  },
  {
    "callback": "function (a, b) {\n    return order(b) - order(a);\n}",
    "receiverBase": "buffer",
    "receiverCallee": "sort"
  },
  {
    "callback": "function (item) {\n    p.add(item, outline);\n}",
    "receiverBase": "dojo",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (item) {\n    return Math.floor(epsilon + v.dotProduct(n, v.substract(item, a))) <= 0;\n}",
    "receiverBase": "dojo",
    "receiverCallee": "every"
  },
  {
    "callback": "function (item) {\n    return Math.floor(epsilon + v.dotProduct(n, v.substract(item, a))) >= 0;\n}",
    "receiverBase": "dojo",
    "receiverCallee": "every"
  },
  {
    "callback": "function (item) {\n    item.destroy();\n}",
    "receiverBase": "dojo",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (item) {\n    item.draw(viewport.lighting);\n}",
    "receiverBase": "dojo",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (item) {\n    item.draw(viewport.lighting);\n}",
    "receiverBase": "dojo",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (lang) {\n    if (lang.get('locale') != workingL) {\n        newL.push(lang.getData());\n    }\n}",
    "receiverBase": "Array",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (target) {\n    target.set('translateToLanguage', newL[0].locale);\n}",
    "receiverBase": "Array",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (target) {\n    target.set('translateToLanguage', newL[0].locale);\n}",
    "receiverBase": "Array",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (target) {\n    target.set('translatedElement', secondStore.getRange()[0].get('csvIndex'));\n}",
    "receiverBase": "Array",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (target) {\n    target.set('translatedElement', Ext.getStore('InportAsTaxoStore').getRange()[0].get('csvIndex'));\n}",
    "receiverBase": "Array",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (mediaield) {\n    if (Ext.isEmpty(mediaield.get('mediaTypeId'))) {\n        mediaError = true;\n    }\n}",
    "receiverBase": "Array",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (record) {\n    if (Ext.isEmpty(record.get('translatedElement')) || Ext.isEmpty(record.get('translateToLanguage'))) {\n        allGood = false;\n    }\n}",
    "receiverBase": "Array",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    if (Ext.isEmpty(field.getValue())) {\n        field.setValue(';');\n    }\n}",
    "receiverBase": "field",
    "receiverCallee": "addListener"
  },
  {
    "callback": "function (record) {\n    if (record.get('protoId') == 'text' || record.get('protoId') == 'summary') {\n        record.set('localizable', true);\n        record.set('searchable', true);\n    } else if (record.get('protoId') == '51234e09c0e0516a0b00000d') {\n        record.set('localizable', false);\n        record.set('searchable', true);\n    }\n}",
    "receiverBase": "Array",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (item) {\n    item.submitValue = true;\n    item.allowBlank = false;\n}",
    "receiverBase": "Array",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (item) {\n    item.submitValue = false;\n    item.allowBlank = true;\n    item.setValue(null);\n}",
    "receiverBase": "Array",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    expect(controller.artists).toEqual([]);\n    expect(controller.albums).toEqual([]);\n    expect(controller.tracks).toEqual([]);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    expect(ApiFactory.artist.getAll).toHaveBeenCalledWith();\n    expect(ApiFactory.artist.getAll.calls.count()).toBe(1);\n    expect(DataLoaderFactory).toHaveBeenCalledWith(artistGetAllOutput, controller.artists, 100);\n    expect(DataLoaderFactory.calls.count()).toBe(1);\n    expect($scope.artistRequest).toBe(mockDataLoaderFactory);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (e) {\n    setTimeout(function () {\n        test.resume(function () {\n            Y.Assert.isNull(Y.one('#demo'));\n        });\n    }, 4000);\n}",
    "receiverBase": "node",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    test.resume(function () {\n        Y.Assert.isNull(Y.one('#demo'));\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    Y.Assert.isNull(Y.one('#demo'));\n}",
    "receiverBase": "test",
    "receiverCallee": "resume"
  },
  {
    "callback": "function () {\n    node.simulate('click');\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    jQuery('.gallery-image.visible').elevateZoom();\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "click"
  },
  {
    "callback": "function () {\n    jQuery('.gallery-image.visible').elevateZoom({\n        constrainType: 'height',\n        constrainSize: 274,\n        zoomType: 'lens',\n        containLensZoom: true,\n        cursor: 'pointer',\n        galleryActiveClass: 'active',\n        zoomWindowFadeIn: 500,\n        zoomWindowFadeOut: 750\n    });\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "click"
  },
  {
    "callback": "function () {\n    if (jQuery(this).scrollTop() > 100) {\n        jQuery('.scrollToTop').fadeIn();\n    } else {\n        jQuery('.scrollToTop').fadeOut();\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "scroll"
  },
  {
    "callback": "function () {\n    jQuery('html, body').animate({ scrollTop: 0 }, 800);\n    return false;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "click"
  },
  {
    "callback": "function () {\n    jQuery('#carousel').flexslider({\n        animation: 'slide',\n        controlNav: false,\n        animationLoop: false,\n        slideshow: false,\n        itemWidth: 210,\n        itemMargin: 5,\n        asNavFor: '#slider'\n    });\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "load"
  }
]