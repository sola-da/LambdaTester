[
  {
    "callback": "function (info) {\n    console.log('Error loading plugin: ' + info.plugin);\n    console.log(info.error.message);\n    console.dir(info.error.stack.split('\\n'));\n}",
    "receiverBase": "carapace",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    carapace.chdir(path.join(__dirname, 'app'));\n    carapace.run(script, [\n        '--port',\n        scriptPort\n    ], function afterRun() {\n        carapace.heartbeat(function () {\n            carapace.on('heartbeat', function () {\n                console.log('still running');\n            });\n        }, 1000);\n        console.log(script + ' running on port ' + scriptPort.toString());\n    });\n}",
    "receiverBase": "carapace",
    "receiverCallee": "use"
  },
  {
    "callback": "function afterRun() {\n    carapace.heartbeat(function () {\n        carapace.on('heartbeat', function () {\n            console.log('still running');\n        });\n    }, 1000);\n    console.log(script + ' running on port ' + scriptPort.toString());\n}",
    "receiverBase": "carapace",
    "receiverCallee": "run"
  },
  {
    "callback": "function () {\n    carapace.on('heartbeat', function () {\n        console.log('still running');\n    });\n}",
    "receiverBase": "carapace",
    "receiverCallee": "heartbeat"
  },
  {
    "callback": "function () {\n    console.log('still running');\n}",
    "receiverBase": "carapace",
    "receiverCallee": "on"
  },
  {
    "callback": "function (array_tag) {\n    that.kag.layer.showEventLayer();\n    that.kag.ftag.buildTag(array_tag, label_name);\n}",
    "receiverBase": "kag",
    "receiverCallee": "loadScenario"
  },
  {
    "callback": "function (array_tag) {\n    if (typeof insert == 'object') {\n        array_tag.splice(index + 1, 0, insert);\n    }\n    that.kag.layer.showEventLayer();\n    that.kag.ftag.buildTagIndex(array_tag, index, auto_next);\n}",
    "receiverBase": "kag",
    "receiverCallee": "loadScenario"
  },
  {
    "callback": "function () {\n    pchar(pchar);\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    pchar(pchar);\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    that.kag.ftag.nextOrder();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    pchar(pchar);\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    pchar(pchar);\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    that.kag.ftag.nextOrder();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    that.kag.ftag.nextOrder();\n}",
    "receiverBase": "img_obj",
    "receiverCallee": "animate"
  },
  {
    "callback": "function () {\n    that.kag.layer.getLayer(pm.layer, pm.page).empty();\n    cnt++;\n    if (s_cnt == cnt) {\n        that.kag.ftag.nextOrder();\n    }\n}",
    "receiverBase": "j_obj",
    "receiverCallee": "animate"
  },
  {
    "callback": "function () {\n    var _target = pm.target;\n    var _storage = pm.storage;\n    that.kag.event.addEventElement({\n        'tag': 'link',\n        'j_target': j_span,\n        'pm': pm\n    });\n    that.setEvent(j_span, pm);\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (e) {\n    TYRANO.kag.ftag.nextOrderWithLabel(_target, _storage);\n    TYRANO.kag.layer.showEventLayer();\n}",
    "receiverBase": "j_span",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    that.kag.stat.is_strong_stop = false;\n    that.kag.layer.showEventLayer();\n    that.kag.ftag.nextOrder();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    if (pm.wait == 'true') {\n        that.kag.ftag.nextOrder();\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "effect"
  },
  {
    "callback": "function () {\n    if (pm.wait == 'true') {\n        that.kag.ftag.nextOrder();\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "effect"
  },
  {
    "callback": "function () {\n    if (_pm.enterse != '') {\n        that.kag.ftag.startTag('playse', {\n            'storage': _pm.enterse,\n            'stop': true\n        });\n    }\n    if (_pm.enterimg != '') {\n        var enter_img_url = '';\n        if ($.isHTTP(_pm.enterimg)) {\n            enter_img_url = _pm.enterimg;\n        } else {\n            enter_img_url = './data/' + _pm.folder + '/' + _pm.enterimg;\n        }\n        $(this).attr('src', enter_img_url);\n    }\n}",
    "receiverBase": "j_button",
    "receiverCallee": "hover"
  },
  {
    "callback": "function () {\n    if (_pm.leavese != '') {\n        that.kag.ftag.startTag('playse', {\n            'storage': _pm.leavese,\n            'stop': true\n        });\n    }\n    if (_pm.enterimg != '') {\n        var enter_img_url = '';\n        if ($.isHTTP(_pm.graphic)) {\n            enter_img_url = _pm.graphic;\n        } else {\n            enter_img_url = './data/' + _pm.folder + '/' + _pm.graphic;\n        }\n        $(this).attr('src', enter_img_url);\n    }\n}",
    "receiverBase": "j_button",
    "receiverCallee": "hover"
  },
  {
    "callback": "function () {\n    if (_pm.clickse != '') {\n        that.kag.ftag.startTag('playse', { 'storage': _pm.clickse });\n    }\n    if (that.kag.stat.is_strong_stop != true) {\n        return false;\n    }\n    button_clicked = true;\n    if (_pm.exp != '') {\n        that.kag.embScript(_pm.exp, preexp);\n    }\n    that.kag.layer.showEventLayer();\n    that.kag.ftag.startTag('cm', {});\n    that.kag.ftag.startTag('jump', _pm);\n}",
    "receiverBase": "j_button",
    "receiverCallee": "click"
  },
  {
    "callback": "function () {\n    j_button.css('opacity', $.convertOpacity(_pm.mouseopacity));\n}",
    "receiverBase": "j_button",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    j_button.css('opacity', $.convertOpacity(_pm.opacity));\n}",
    "receiverBase": "j_button",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    var is_s = function (obj) {\n            if (obj.kag.stat.is_strong_stop != true) {\n                return false;\n            }\n            return true;\n        }(that);\n    if (is_s == false) {\n        return false;\n    }\n    that.kag.ftag.startTag('cm', {});\n    that.kag.layer.showEventLayer();\n    that.kag.ftag.startTag('jump', _pm);\n}",
    "receiverBase": "j_button",
    "receiverCallee": "click"
  },
  {
    "callback": "function (obj) {\n    if (obj.kag.stat.is_strong_stop != true) {\n        return false;\n    }\n    return true;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n}",
    "receiverBase": "$",
    "receiverCallee": "trans"
  },
  {
    "callback": "function () {\n    comp_num++;\n    that.kag.layer.forelay(_key);\n    if (layer_num <= comp_num) {\n        that.kag.ftag.completeTrans();\n    }\n    that.kag.ftag.hideNextImg();\n}",
    "receiverBase": "$",
    "receiverCallee": "trans"
  },
  {
    "callback": "function () {\n    j_old_bg.remove();\n}",
    "receiverBase": "$",
    "receiverCallee": "trans"
  },
  {
    "callback": "function () {\n    that.kag.layer.showEventLayer();\n    if (pm.wait == 'true') {\n        that.kag.ftag.nextOrder();\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "trans"
  },
  {
    "callback": "function (test) {\n    test.equal(true, true);\n}",
    "receiverBase": "Tinytest",
    "receiverCallee": "add"
  },
  {
    "callback": "function (req, res) {\n    fs.readFile('dist/404.html', function (err, data) {\n        res.end(data);\n    });\n}",
    "receiverBase": "editorialishDev",
    "receiverCallee": "get"
  },
  {
    "callback": "function (err, data) {\n    res.end(data);\n}",
    "receiverBase": "fs",
    "receiverCallee": "readFile"
  },
  {
    "callback": "function (boolVal) {\n    if (negate) {\n        boolVal = !boolVal;\n    }\n    elem.attr(ariaAttr, boolVal);\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function ngAriaValueNowReaction(newVal) {\n    elem.attr('aria-valuenow', newVal);\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function ngAriaRequiredWatch() {\n    return ngModel.$error.required;\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function ngAriaRequiredReaction(newVal) {\n    elem.attr('aria-required', !!newVal);\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function ngAriaInvalidWatch() {\n    return ngModel.$invalid;\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function ngAriaInvalidReaction(newVal) {\n    elem.attr('aria-invalid', !!newVal);\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function () {\n    return {\n        restrict: 'A',\n        require: '?ngMessages',\n        link: function (scope, elem, attr, ngMessages) {\n            if (!elem.attr('aria-live')) {\n                elem.attr('aria-live', 'assertive');\n            }\n        }\n    };\n}",
    "receiverBase": "directive",
    "receiverCallee": "directive"
  },
  {
    "callback": "function (event) {\n    if (event.keyCode === 32 || event.keyCode === 13) {\n        scope.$apply(callback);\n    }\n    function callback() {\n        fn(scope, { $event: event });\n    }\n}",
    "receiverBase": "elem",
    "receiverCallee": "on"
  },
  {
    "callback": "function (user) {\n    usersList.push('<div>', Y.Escape.html(user), '</div>');\n}",
    "receiverBase": "users",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    socket.emit('ready');\n}",
    "receiverBase": "socket",
    "receiverCallee": "set"
  },
  {
    "callback": "function () {\n    socket.get('userName', function (error, userName) {\n        var escapedUserName = Y.Escape.html(userName);\n        socket.broadcast.emit(SYSTEM, '<em>user: <strong>' + escapedUserName + '</strong> disconnected</em>');\n        var index = users.indexOf(userName);\n        if (index >= 0) {\n            users.splice(index, 1);\n            socket.broadcast.emit(USER, {\n                connected: false,\n                user: escapedUserName\n            });\n        }\n    });\n}",
    "receiverBase": "socket",
    "receiverCallee": "on"
  },
  {
    "callback": "function (error, userName) {\n    var escapedUserName = Y.Escape.html(userName);\n    socket.broadcast.emit(SYSTEM, '<em>user: <strong>' + escapedUserName + '</strong> disconnected</em>');\n    var index = users.indexOf(userName);\n    if (index >= 0) {\n        users.splice(index, 1);\n        socket.broadcast.emit(USER, {\n            connected: false,\n            user: escapedUserName\n        });\n    }\n}",
    "receiverBase": "socket",
    "receiverCallee": "get"
  },
  {
    "callback": "function (row) {\n    panel = FBTest.selectPanel('console');\n    var counterValue = row.getElementsByClassName('logCounterValue')[0].textContent;\n    FBTest.compare(2, counterValue, 'There must be two \\'Hello Firebug user!\\' messages logged to the console.');\n    FBTest.clickContinueButton();\n    FBTest.testDone();\n}",
    "receiverBase": "FBTest",
    "receiverCallee": "waitForDisplayedElement"
  },
  {
    "callback": "function (result) {\n    self.smd = result;\n}",
    "receiverBase": "d",
    "receiverCallee": "addCallback"
  },
  {
    "callback": "function (result) {\n    deferred.callback(self._getResult(result));\n}",
    "receiverBase": "d",
    "receiverCallee": "addCallbacks"
  },
  {
    "callback": "function (error) {\n    deferred.errback(error);\n}",
    "receiverBase": "d",
    "receiverCallee": "addCallbacks"
  },
  {
    "callback": "function (e) {\n    if ($(e.target).closest('.datepicker').length == 0) {\n        that.hide();\n    }\n}",
    "receiverBase": "$",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    return $(this).css('z-index') != 'auto';\n}",
    "receiverBase": "parents",
    "receiverCallee": "filter"
  },
  {
    "callback": "function () {\n    var $this = $(this), data = $this.data('datepicker'), options = typeof option == 'object' && option;\n    if (!data) {\n        $this.data('datepicker', data = new Datepicker(this, $.extend({}, $.fn.datepicker.defaults, options)));\n    }\n    if (typeof option == 'string' && typeof data[option] == 'function') {\n        data[option].apply(data, args);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var m = this.slice(0, parts[i].length), p = parts[i].slice(0, m.length);\n    return m == p;\n}",
    "receiverBase": "$",
    "receiverCallee": "filter"
  },
  {
    "callback": "function () {\n    var m = this.slice(0, parts[i].length), p = parts[i].slice(0, m.length);\n    return m == p;\n}",
    "receiverBase": "$",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(['moment'], factory);\n    } else if (typeof exports === 'object') {\n        factory(require('../moment'));\n    } else {\n        factory(window.moment);\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (err) {\n    if (Array.isArray(err)) {\n        err = _.filter(err, function (x) {\n            return x !== undefined && x !== null;\n        });\n        if (err.length === 0) {\n            err = null;\n        }\n    }\n    if (err && cbError) {\n        cbError(self._wrapError(err));\n    } else if (cbEnd) {\n        cbEnd(null);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "_cmd"
  },
  {
    "callback": "function (x) {\n    return x !== undefined && x !== null;\n}",
    "receiverBase": "_",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (store) {\n    store.filterBy(this.getRecordFilter());\n}",
    "receiverBase": "store",
    "receiverCallee": "on"
  },
  {
    "callback": "function (filter) {\n    if (filter.active) {\n        filters[filter.dataIndex] = filter.getValue();\n    }\n}",
    "receiverBase": "filters",
    "receiverCallee": "each"
  },
  {
    "callback": "function (filter) {\n    if (filter.active) {\n        f.push(filter);\n    }\n}",
    "receiverBase": "filters",
    "receiverCallee": "each"
  },
  {
    "callback": "function (filter) {\n    filter.setActive(false);\n}",
    "receiverBase": "filters",
    "receiverCallee": "each"
  },
  {
    "callback": "function (f) {\n    if (f.active) {\n        var d = [].concat(f.serialize());\n        for (var i = 0, len = d.length; i < len; i++) {\n            filters.push({\n                field: f.dataIndex,\n                data: d[i]\n            });\n        }\n    }\n}",
    "receiverBase": "filters",
    "receiverCallee": "each"
  },
  {
    "callback": "function ($) {\n    $.fn.selectpicker.defaults = {\n        noneSelectedText: 'Nessuna selezione',\n        noneResultsText: 'Nessun risultato',\n        countSelectedText: 'Selezionati {0} di {1}',\n        maxOptionsText: [\n            'Limite raggiunto ({n} {var} max)',\n            'Limite del gruppo raggiunto ({n} {var} max)',\n            [\n                'elementi',\n                'elemento'\n            ]\n        ],\n        multipleSeparator: ', '\n    };\n}",
    "receiverBase": ""
  }
]