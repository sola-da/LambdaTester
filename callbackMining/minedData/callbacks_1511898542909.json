[
  {
    "callback": "function (format) {\n    return find(format) !== true;\n}",
    "receiverBase": "",
    "receiverCallee": "EACH"
  },
  {
    "callback": "function () {\n    it('can be imported without blowing up', function () {\n        var app = require('../app');\n        assert(app !== undefined);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "describe"
  },
  {
    "callback": "function () {\n    var app = require('../app');\n    assert(app !== undefined);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (results) {\n    session.setAnnotations(results.data);\n}",
    "receiverBase": "worker",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    session.clearAnnotations();\n}",
    "receiverBase": "worker",
    "receiverCallee": "on"
  },
  {
    "callback": "function (state, action, editor, session, range) {\n    var selected = session.doc.getTextRange(range);\n    if (!range.isMultiLine() && selected == '{') {\n        var line = session.doc.getLine(range.start.row);\n        var rightChar = line.substring(range.end.column, range.end.column + 1);\n        if (rightChar == '}') {\n            range.end.column++;\n            return range;\n        } else {\n            maybeInsertedBrackets--;\n        }\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "add"
  },
  {
    "callback": "function (state, action, editor, session, range) {\n    var selected = session.doc.getTextRange(range);\n    if (!range.isMultiLine() && selected == '(') {\n        var line = session.doc.getLine(range.start.row);\n        var rightChar = line.substring(range.start.column + 1, range.start.column + 2);\n        if (rightChar == ')') {\n            range.end.column++;\n            return range;\n        }\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "add"
  },
  {
    "callback": "function (state, action, editor, session, range) {\n    var selected = session.doc.getTextRange(range);\n    if (!range.isMultiLine() && selected == '[') {\n        var line = session.doc.getLine(range.start.row);\n        var rightChar = line.substring(range.start.column + 1, range.start.column + 2);\n        if (rightChar == ']') {\n            range.end.column++;\n            return range;\n        }\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "add"
  },
  {
    "callback": "function (state, action, editor, session, range) {\n    var selected = session.doc.getTextRange(range);\n    if (!range.isMultiLine() && (selected == '\"' || selected == '\\'')) {\n        var line = session.doc.getLine(range.start.row);\n        var rightChar = line.substring(range.start.column + 1, range.start.column + 2);\n        if (rightChar == selected) {\n            range.end.column++;\n            return range;\n        }\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "add"
  },
  {
    "callback": "function (e) {\n    session.setAnnotations(e.data);\n}",
    "receiverBase": "worker",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    session.clearAnnotations();\n}",
    "receiverBase": "worker",
    "receiverCallee": "on"
  },
  {
    "callback": "function (state, action, editor, session, text) {\n    if (text === ';') {\n        var cursor = editor.getCursorPosition();\n        var line = session.doc.getLine(cursor.row);\n        var rightChar = line.substring(cursor.column, cursor.column + 1);\n        if (rightChar === ';') {\n            return {\n                text: '',\n                selection: [\n                    1,\n                    1\n                ]\n            };\n        }\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "add"
  },
  {
    "callback": "function (type) {\n    return tokenTypes.indexOf(type) !== -1;\n}",
    "receiverBase": "split",
    "receiverCallee": "every"
  },
  {
    "callback": "function (type) {\n    return tokenTypes.indexOf(type) !== -1;\n}",
    "receiverBase": "split",
    "receiverCallee": "every"
  },
  {
    "callback": "function () {\n    $('#container').highcharts('StockChart', {\n        chart: { width: 800 },\n        xAxis: {\n            dateTimeLabelFormats: { week: '%a,<br/>%e. %b' },\n            tickPixelInterval: 70\n        },\n        rangeSelector: { selected: 1 },\n        series: [{\n                name: 'USD to EUR',\n                data: usdeur\n            }]\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "$"
  },
  {
    "callback": "function (Y) {\n    function CachePlugin(config) {\n        var cache = config && config.cache ? config.cache : Y.Cache, tmpclass = Y.Base.create('dataSourceCache', cache, [Y.Plugin.Base]), tmpinstance = new tmpclass(config);\n        tmpclass.NS = 'tmpClass';\n        return tmpinstance;\n    }\n    Y.mix(CachePlugin, {\n        NS: 'cache',\n        NAME: 'cachePlugin'\n    });\n    Y.namespace('Plugin').Cache = CachePlugin;\n}",
    "receiverBase": "YUI",
    "receiverCallee": "add"
  },
  {
    "callback": "function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([\n            'uijet_dir/uijet',\n            'jquery'\n        ], function (uijet, $) {\n            return factory(uijet, $);\n        });\n    } else {\n        factory(uijet, jQuery);\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (uijet, $) {\n    return factory(uijet, $);\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function () {\n    this.watch();\n}",
    "receiverBase": "$",
    "receiverCallee": "proxy"
  },
  {
    "callback": "function () {\n    this._onAfter();\n}",
    "receiverBase": "$",
    "receiverCallee": "proxy"
  },
  {
    "callback": "function () {\n    this._onAfter();\n}",
    "receiverBase": "$",
    "receiverCallee": "proxy"
  },
  {
    "callback": "function (e) {\n    e.preventDefault();\n}",
    "receiverBase": "$",
    "receiverCallee": "proxy"
  },
  {
    "callback": "function () {\n    console.log('transition ended');\n    if (clearOnTransitionEnd)\n        elem.css(this.properties.transition, '');\n    if (typeof callback == 'function')\n        callback();\n}",
    "receiverBase": "$",
    "receiverCallee": "proxy"
  },
  {
    "callback": "function () {\n    console.log('transform ended');\n    if (clearOnTransitionEnd)\n        elem.css(this.properties.transform, '');\n    if (typeof callback == 'function')\n        callback();\n}",
    "receiverBase": "$",
    "receiverCallee": "proxy"
  },
  {
    "callback": "function () {\n    var $this = $(this);\n    if (!$this.data('plugin_' + pluginName)) {\n        $this.data('plugin_' + pluginName, new Deluxe(this, options));\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (parentReferenceValue) {\n    var bfField = backReferenceField();\n    if (!entity[bfField] || !_.isEqual(entity[bfField], parentReferenceValue)) {\n        entity[bfField] = parentReferenceValue;\n    }\n    return storageDriver.createEntity(entityDescriptionService.tableDescription(crudId), entity);\n}",
    "receiverBase": "getParentReferenceValue",
    "receiverCallee": "then"
  },
  {
    "callback": "function (oldEntity) {\n    validationService.validateEntity(crudId, _.extend(oldEntity, entity));\n    return getParentReferenceValue().then(function (parentReferenceValue) {\n        var bfField = backReferenceField();\n        if (!_.isUndefined(entity[bfField]) && !_.isEqual(entity[bfField], parentReferenceValue)) {\n            entity[bfField] = parentReferenceValue;\n        }\n        return storageDriver.updateEntity(entityDescriptionService.tableDescription(crudId), entity);\n    });\n}",
    "receiverBase": "readEntity",
    "receiverCallee": "then"
  },
  {
    "callback": "function (parentReferenceValue) {\n    var bfField = backReferenceField();\n    if (!_.isUndefined(entity[bfField]) && !_.isEqual(entity[bfField], parentReferenceValue)) {\n        entity[bfField] = parentReferenceValue;\n    }\n    return storageDriver.updateEntity(entityDescriptionService.tableDescription(crudId), entity);\n}",
    "receiverBase": "getParentReferenceValue",
    "receiverCallee": "then"
  },
  {
    "callback": "function (oldEntity) {\n    validationService.validateEntity(crudId, _.extend(oldEntity, entity));\n    return storageDriver.updateEntity(entityDescriptionService.tableDescription(crudId), entity);\n}",
    "receiverBase": "readEntity",
    "receiverCallee": "then"
  },
  {
    "callback": "function (f, fieldName) {\n    return f.totalRowFun && [\n        fieldName,\n        f.totalRowFun\n    ] || undefined;\n}",
    "receiverBase": "chain",
    "receiverCallee": "map"
  },
  {
    "callback": "function (f) {\n    return !!f;\n}",
    "receiverBase": "map",
    "receiverCallee": "filter"
  },
  {
    "callback": "function () {\n    self.ended = true;\n    self.endedListeners.forEach(function (f) {\n        f.call(self);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (f) {\n    f.call(self);\n}",
    "receiverBase": "endedListeners",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function () {\n    expect(2);\n    window.Audio = MockAudio;\n    Crafty.support.audio = true;\n    Crafty.audio.setChannels(5);\n    Crafty.audio.add('mockSound', ['sound.ogg']);\n    var a = Crafty.audio.play('mockSound', 1);\n    ok(typeof a === 'object', 'Type of a is object: ' + a);\n    a.addEventListener('ended', function () {\n        ok(true, 'Sound played');\n        delete window.Audio;\n        Crafty.audio.channels = [];\n        start();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "asyncTest"
  },
  {
    "callback": "function () {\n    ok(true, 'Sound played');\n    delete window.Audio;\n    Crafty.audio.channels = [];\n    start();\n}",
    "receiverBase": "a",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function () {\n    expect(10);\n    window.Audio = ChromeBuggedAudio;\n    Crafty.support.audio = true;\n    Crafty.audio.setChannels(1);\n    Crafty.support.audio = true;\n    Crafty.audio.add('mockSound', ['sound.ogg']);\n    var a;\n    for (var i = 0; i < 10; i++) {\n        a = Crafty.audio.play('mockSound', 1);\n    }\n    delete window.Audio;\n    Crafty.audio.channels = [];\n}",
    "receiverBase": "",
    "receiverCallee": "test"
  }
]