[
  {
    "callback": "function () {\n    scope.fireEvent(name, scope, this);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "setHandler"
  },
  {
    "callback": "function () {\n    if (element) {\n        element.addCls(pressedCls);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    if (me && me.element) {\n        me.element.removeCls(me.getPressedCls());\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    Method(function () {\n    }).should.be.instanceof(Method);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n}",
    "receiverBase": "",
    "receiverCallee": "Method"
  },
  {
    "callback": "function () {\n    method = new Method();\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function () {\n    method = new Method({ handler: fn });\n    method.getHandler().should.equal(fn);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    method.setHandler(fn);\n    method.getHandler().should.equal(fn);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var method = new Method(fn);\n    method.getHandler().should.equal(fn);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    server = new jayson.Server();\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function (sum, value) {\n    return sum + value;\n}",
    "receiverBase": "args",
    "receiverCallee": "reduce"
  },
  {
    "callback": "function () {\n    method = new Method(add, {\n        collect: true,\n        params: Array\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function (done) {\n    method.execute(server, {\n        a: 1,\n        b: 2,\n        c: 3\n    }, function (err, sum) {\n        if (err)\n            throw err;\n        sum.should.eql(1 + 2 + 3);\n        done();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (err, sum) {\n    if (err)\n        throw err;\n    sum.should.eql(1 + 2 + 3);\n    done();\n}",
    "receiverBase": "method",
    "receiverCallee": "execute"
  },
  {
    "callback": "function (done) {\n    method.execute(server, [\n        1,\n        2,\n        3,\n        4\n    ], function (err, sum) {\n        if (err)\n            throw err;\n        sum.should.eql(1 + 2 + 3 + 4);\n        done();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (err, sum) {\n    if (err)\n        throw err;\n    sum.should.eql(1 + 2 + 3 + 4);\n    done();\n}",
    "receiverBase": "method",
    "receiverCallee": "execute"
  },
  {
    "callback": "function () {\n    method = new Method(add, {\n        collect: true,\n        params: Object\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function (done) {\n    method.execute(server, {\n        a: 1,\n        b: 2,\n        c: 3\n    }, function (err, sum) {\n        if (err)\n            throw err;\n        sum.should.eql(1 + 2 + 3);\n        done();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (err, sum) {\n    if (err)\n        throw err;\n    sum.should.eql(1 + 2 + 3);\n    done();\n}",
    "receiverBase": "method",
    "receiverCallee": "execute"
  },
  {
    "callback": "function (done) {\n    method.execute(server, [\n        1,\n        2,\n        3,\n        4\n    ], function (err, sum) {\n        if (err)\n            throw err;\n        sum.should.eql(1 + 2 + 3 + 4);\n        done();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (err, sum) {\n    if (err)\n        throw err;\n    sum.should.eql(1 + 2 + 3 + 4);\n    done();\n}",
    "receiverBase": "method",
    "receiverCallee": "execute"
  },
  {
    "callback": "function () {\n    method = new Method(add, {\n        collect: true,\n        params: [\n            'a',\n            'b',\n            'c'\n        ]\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function (done) {\n    method.execute(server, { a: 1 }, function (err, sum) {\n        if (err)\n            throw err;\n        sum.should.eql(1);\n        done();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (err, sum) {\n    if (err)\n        throw err;\n    sum.should.eql(1);\n    done();\n}",
    "receiverBase": "method",
    "receiverCallee": "execute"
  },
  {
    "callback": "function (done) {\n    method.execute(server, [\n        1,\n        2,\n        3\n    ], function (err, sum) {\n        if (err)\n            throw err;\n        sum.should.eql(0);\n        done();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (err, sum) {\n    if (err)\n        throw err;\n    sum.should.eql(0);\n    done();\n}",
    "receiverBase": "method",
    "receiverCallee": "execute"
  },
  {
    "callback": "function () {\n    method = new Method(add, {\n        collect: true,\n        params: {\n            a: 0,\n            b: 0,\n            c: 0\n        }\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function (done) {\n    method.execute(server, { a: 5 }, function (err, sum) {\n        if (err)\n            throw err;\n        sum.should.eql(5);\n        done();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (err, sum) {\n    if (err)\n        throw err;\n    sum.should.eql(5);\n    done();\n}",
    "receiverBase": "method",
    "receiverCallee": "execute"
  },
  {
    "callback": "function (done) {\n    method.execute(server, [\n        1,\n        2,\n        3\n    ], function (err, sum) {\n        if (err)\n            throw err;\n        sum.should.eql(0);\n        done();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (err, sum) {\n    if (err)\n        throw err;\n    sum.should.eql(0);\n    done();\n}",
    "receiverBase": "method",
    "receiverCallee": "execute"
  },
  {
    "callback": "function (sum, value) {\n    return sum + value;\n}",
    "receiverBase": "args",
    "receiverCallee": "reduce"
  },
  {
    "callback": "function (done) {\n    var fn = function (args, callback) {\n        args.should.be.instanceof(Array);\n        callback();\n    };\n    method = new Method(fn, { collect: true });\n    method.execute(server, [\n        1,\n        2,\n        3\n    ], done);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (done) {\n    var fn = function (args, callback) {\n        args.should.not.be.instanceof(Array);\n        args.should.be.instanceof(Object);\n        callback();\n    };\n    method = new Method(fn, { collect: true });\n    method.execute(server, {\n        a: 1,\n        b: 2,\n        c: 3\n    }, done);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    method = new Method(add, { collect: false });\n}",
    "receiverBase": "",
    "receiverCallee": "beforeEach"
  },
  {
    "callback": "function (done) {\n    method.execute(server, [\n        1,\n        2\n    ], function (err, sum) {\n        if (err)\n            throw err;\n        sum.should.eql(1 + 2);\n        done();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (err, sum) {\n    if (err)\n        throw err;\n    sum.should.eql(1 + 2);\n    done();\n}",
    "receiverBase": "method",
    "receiverCallee": "execute"
  },
  {
    "callback": "function (done) {\n    method.execute(server, {\n        a: 1,\n        b: 2\n    }, function (err, sum) {\n        if (err)\n            throw err;\n        sum.should.eql(1 + 2);\n        done();\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (err, sum) {\n    if (err)\n        throw err;\n    sum.should.eql(1 + 2);\n    done();\n}",
    "receiverBase": "method",
    "receiverCallee": "execute"
  },
  {
    "callback": "function () {\n    var line = '<img src=\"hello world.png\" />';\n    var pre = '<img src=';\n    expect(testMockedTooltipDetection(mockedImageModal, line, pre)).to.be(false);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var line = '<img src=\"hello world.png\" />';\n    var pre = '<img src=\"';\n    expect(testMockedTooltipDetection(mockedImageModal, line, pre)).to.be(true);\n    var line = '<img src=\\'hello world.png\\' />';\n    var pre = '<img src=\\'';\n    expect(testMockedTooltipDetection(mockedImageModal, line, pre)).to.be(true);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var line = '<img src=\"hello world.png\" />';\n    var pre = '<img src=\"hello ';\n    expect(testMockedTooltipDetection(mockedImageModal, line, pre)).to.be(true);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var line = '<img src=\"hello world.png\" />';\n    var pre = '<img src=\"hello world.png';\n    expect(testMockedTooltipDetection(mockedImageModal, line, pre)).to.be(true);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var line = '<img src = \"hello world.png\" />';\n    var pre = '<img src = \"hello ';\n    expect(testMockedTooltipDetection(mockedImageModal, line, pre)).to.be(true);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var line = '<img src=\"hello world.png\" />';\n    var pre = '<img src=\"hello world.png\"';\n    expect(testMockedTooltipDetection(mockedImageModal, line, pre)).to.be(false);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var line = '<img style=\"yellow\" src=\"hello world.png\" />';\n    var pre = '<img style=\"yellow\" src=\"hello world.';\n    expect(testMockedTooltipDetection(mockedImageModal, line, pre)).to.be(true);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var line = '<a src=\"hello world.png\" />';\n    var pre = '<a src=\"hello';\n    expect(testMockedTooltipDetection(mockedImageModal, line, pre)).to.be(false);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var line = '<img href=\"hello world.png\" />';\n    var pre = '<img href=\"hello';\n    expect(testMockedTooltipDetection(mockedImageModal, line, pre)).to.be(false);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var line = '<img src=\"hello world.png\" />';\n    var pre = '<img src=\"hello';\n    var updates = ['goodbye-world.png'];\n    var result = '<img src=\"goodbye-world.png\" />';\n    testReplace(mockedImageModal, line, pre, updates, result);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function () {\n    var line = '<img src=\"hello world.png\" />';\n    var pre = '<img src=\"hello';\n    var updates = [\n            'goodbye-world.png',\n            '',\n            'kill everyone',\n            'smiley.jpg'\n        ];\n    var result = '<img src=\"smiley.jpg\" />';\n    testReplace(mockedImageModal, line, pre, updates, result);\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  },
  {
    "callback": "function (err) {\n    var clearText;\n    clearText = this.cleartext;\n    socksSocket.authorized = clearText.authorized;\n    socksSocket.authorizationError = clearText.authorizationError;\n    if (err) {\n        return socksSocket.emit('error', err);\n    }\n    socksSocket.socket = clearText;\n    handleSocksConnectToHost.call(socksSocket);\n}",
    "receiverBase": "",
    "receiverCallee": "starttls"
  },
  {
    "callback": "function (err) {\n    socksSocket.emit('error', err);\n}",
    "receiverBase": "cleartext",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    describe('serial requests', function () {\n        visitLinks('series', 'test', EN, 'Hello', DE, 'Hallo');\n    });\n    describe('parallel requests', function () {\n        visitLinks('parallel', 'test', EN, 'Hello', DE, 'Hallo');\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "describe"
  },
  {
    "callback": "function () {\n    visitLinks('series', 'test', EN, 'Hello', DE, 'Hallo');\n}",
    "receiverBase": "",
    "receiverCallee": "describe"
  },
  {
    "callback": "function () {\n    visitLinks('parallel', 'test', EN, 'Hello', DE, 'Hallo');\n}",
    "receiverBase": "",
    "receiverCallee": "describe"
  },
  {
    "callback": "function () {\n    window.scrollTo(0, c.$table.position().top);\n}",
    "receiverBase": "$table",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    me._run(count);\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    me.run(count);\n}",
    "receiverBase": "Test",
    "receiverCallee": "calibrate"
  },
  {
    "callback": "function (floop, env) {\n    Utils.recur(function () {\n        Utils.repeat(c + 1, max, floop, fend, env);\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "floop"
  },
  {
    "callback": "function () {\n    Utils.repeat(c + 1, max, floop, fend, env);\n}",
    "receiverBase": "Utils",
    "receiverCallee": "recur"
  },
  {
    "callback": "function (c, floop, env) {\n    if (env['_stack_counter'] % 40 == 39) {\n        env['_stack_counter'] = env['_stack_counter'] + 1;\n        setTimeout(function () {\n            Utilsmeanwhile(c, floop, fend, env);\n        }, 0);\n    } else {\n        env['_stack_counter'] = env['_stack_counter'] + 1;\n        Utilsmeanwhile(c, floop, fend, env);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "floop"
  },
  {
    "callback": "function () {\n    Utilsmeanwhile(c, floop, fend, env);\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (k, env) {\n    var floop = arguments.callee;\n    fs[env._i](function () {\n        k(floop, env);\n    });\n}",
    "receiverBase": "Utils",
    "receiverCallee": "repeat"
  },
  {
    "callback": "function () {\n    k(floop, env);\n}",
    "receiverBase": "",
    "receiverCallee": "fs"
  },
  {
    "callback": "function () {\n    callback();\n}",
    "receiverBase": "Utils",
    "receiverCallee": "repeat"
  },
  {
    "callback": "function (a, b) {\n    return _compare(a['@id'], b['@id']);\n}",
    "receiverBase": "rval",
    "receiverCallee": "sort"
  },
  {
    "callback": "function (e) {\n    return !_isNamedBlankNode(e);\n}",
    "receiverBase": "objsA",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (e) {\n    return !_isNamedBlankNode(e);\n}",
    "receiverBase": "objsB",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (e) {\n    return e.constructor === Object && '@id' in e && e['@id'] === flattened['@id'];\n}",
    "receiverBase": "parent",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (a, b) {\n    return self.deepCompareBlankNodes(a, b);\n}",
    "receiverBase": "bnodes",
    "receiverCallee": "sort"
  },
  {
    "callback": "function (a, b) {\n    return _compare(mapping[a], mapping[b]);\n}",
    "receiverBase": "keys",
    "receiverCallee": "sort"
  },
  {
    "callback": "function (a, b) {\n    return self.compareEdges(a, b);\n}",
    "receiverBase": "all",
    "receiverCallee": "sort"
  },
  {
    "callback": "function (edge) {\n    return _isBlankNodeIri(edge.s);\n}",
    "receiverBase": "all",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (a, b) {\n    return self.compareEdges(a, b);\n}",
    "receiverBase": "all",
    "receiverCallee": "sort"
  },
  {
    "callback": "function (edge) {\n    return _isBlankNodeIri(edge.s);\n}",
    "receiverBase": "all",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (e) {\n    return e.indexOf('@') !== 0;\n}",
    "receiverBase": "keys",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (err, data) {\n    if (err)\n        throw err;\n    var data = data.toString('utf8');\n    that.tryToParse(parser, graph, data, callback);\n}",
    "receiverBase": "fs",
    "receiverCallee": "readFile"
  },
  {
    "callback": "function (p, q) {\n    return {\n        token: 'query',\n        kind: 'query',\n        prologue: p,\n        units: [q]\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (b, pfx) {\n    return {\n        token: 'prologue',\n        base: b,\n        prefixes: pfx\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (i) {\n    registerDefaultPrefix(i);\n    base = {};\n    base.token = 'base';\n    base.value = i;\n    return base;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (p, l) {\n    registerPrefix(p, l);\n    prefix = {};\n    prefix.token = 'prefix';\n    prefix.prefix = p;\n    prefix.local = l;\n    return prefix;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (sts) {\n    return sts;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (d) {\n    return d;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (ts) {\n    return ts;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (i) {\n    registerDefaultPrefix(i);\n    base = {};\n    base.token = 'base';\n    base.value = i;\n    return base;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (p, l) {\n    registerPrefix(p, l);\n    prefix = {};\n    prefix.token = 'prefix';\n    prefix.prefix = p;\n    prefix.local = l;\n    return prefix;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (gs) {\n    return gs;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (s) {\n    return {\n        graph: s,\n        kind: 'default',\n        token: 'graphClause'\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (s) {\n    return {\n        graph: s,\n        kind: 'named',\n        token: 'graphCluase'\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (g) {\n    return g;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (gc, oc, lo) {\n    var acum = {};\n    if (lo != null) {\n        if (lo.limit != null) {\n            acum.limit = lo.limit;\n        }\n        if (lo.offset != null) {\n            acum.offset = lo.offset;\n        }\n    }\n    if (gc != null) {\n        acum.group = gc;\n    }\n    acum.order = oc;\n    return acum;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (conds) {\n    return conds;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (b) {\n    return b;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (f) {\n    return f;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (e, alias) {\n    if (alias.length != 0) {\n        return {\n            token: 'aliased_expression',\n            expression: e,\n            alias: alias[2]\n        };\n    } else {\n        return e;\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (v) {\n    return v;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (os) {\n    return os;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (direction, e) {\n    return {\n        direction: direction.toUpperCase(),\n        expression: e\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (e) {\n    if (e.token === 'var') {\n        e = {\n            token: 'expression',\n            expressionType: 'atomic',\n            primaryexpression: 'var',\n            value: e\n        };\n    }\n    return {\n        direction: 'ASC',\n        expression: e\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (cls) {\n    var acum = {};\n    for (var i = 0; i < cls.length; i++) {\n        var cl = cls[i];\n        if (cl.limit != null) {\n            acum['limit'] = cl.limit;\n        } else if (cl.offset != null) {\n            acum['offset'] = cl.offset;\n        }\n    }\n    return acum;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (i) {\n    return { limit: parseInt(i.value) };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (i) {\n    return { offset: parseInt(i.value) };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (p, u, us) {\n    var query = {};\n    query.token = 'query';\n    query.kind = 'update';\n    query.prologue = p;\n    var units = [u];\n    if (us.length != null && us[3] != null && us[3].units != null) {\n        units = units.concat(us[3].units);\n    }\n    query.units = units;\n    return query;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (sg, dg) {\n    var query = {};\n    query.kind = 'load';\n    query.token = 'executableunit';\n    query.sourceGraph = sg;\n    query.destinyGraph = dg[2];\n    return query;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (ref) {\n    var query = {};\n    query.kind = 'clear';\n    query.token = 'executableunit';\n    query.destinyGraph = ref;\n    return query;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (ref) {\n    var query = {};\n    query.kind = 'drop';\n    query.token = 'executableunit';\n    query.destinyGraph = ref;\n    return query;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (ref) {\n    var query = {};\n    query.kind = 'create';\n    query.token = 'executableunit';\n    query.destinyGraph = ref;\n    return query;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (qs) {\n    var query = {};\n    query.kind = 'insertdata';\n    query.token = 'executableunit';\n    query.quads = qs;\n    return query;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (qs) {\n    var query = {};\n    query.kind = 'deletedata';\n    query.token = 'executableunit';\n    query.quads = qs;\n    return query;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (q) {\n    return q;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (q) {\n    return q;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (g) {\n    if (g.length != null) {\n        return {\n            kind: 'named',\n            uri: g[2]\n        };\n    } else {\n        return {\n            kind: 'default',\n            uri: g\n        };\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (i) {\n    return i;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (g) {\n    return g;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    return 'default';\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    return 'named';\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    return 'all';\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (qs) {\n    return qs.quadsContext;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (qs) {\n    return qs.quadsContext;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (g, ts) {\n    var quads = [];\n    for (var i = 0; i < ts.triplesContext.length; i++) {\n        var triple = ts.triplesContext[i];\n        triple.graph = g;\n        quads.push(triple);\n    }\n    return {\n        token: 'quadsnottriples',\n        quadsContext: quads\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (b, bs) {\n    var triples = b.triplesContext;\n    var toTest = null;\n    if (typeof bs === 'object') {\n        if (bs.length != null) {\n            if (bs[3].triplesContext != null) {\n                triples = triples.concat(bs[3].triplesContext);\n            }\n        }\n    }\n    return {\n        token: 'triplestemplate',\n        triplesContext: triples\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (p) {\n    return p;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (p) {\n    return p;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (b, bs) {\n    var triples = b.triplesContext;\n    var toTest = null;\n    if (typeof bs === 'object') {\n        if (bs.length != null) {\n            if (bs[2].triplesContext != null) {\n                triples = triples.concat(bs[2].triplesContext);\n            }\n        }\n    }\n    return {\n        token: 'triplespattern',\n        triplesContext: triples\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (v) {\n    return {\n        token: 'optionalgraphpattern',\n        value: v\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (g, gg) {\n    for (var i = 0; i < gg.patterns.length; i++) {\n        var quads = [];\n        var ts = gg.patterns[i];\n        for (var j = 0; j < ts.triplesContext.length; j++) {\n            var triple = ts.triplesContext[j];\n            triple.graph = g;\n        }\n    }\n    gg.token = 'groupgraphpattern';\n    return gg;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (v, ts) {\n    return {\n        token: 'servicegraphpattern',\n        status: 'todo',\n        value: [\n            v,\n            ts\n        ]\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (ts) {\n    return {\n        token: 'minusgraphpattern',\n        status: 'todo',\n        value: ts\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (c) {\n    return {\n        token: 'filter',\n        value: c\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (i, args) {\n    var fcall = {};\n    fcall.token = 'expression';\n    fcall.expressionType = 'irireforfunction';\n    fcall.iriref = i;\n    fcall.args = args.value;\n    return fcall;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    var args = {};\n    args.token = 'args';\n    args.value = [];\n    return args;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (d, e, es) {\n    cleanEx = [];\n    for (var i = 0; i < es.length; i++) {\n        cleanEx.push(es[i][1]);\n    }\n    var args = {};\n    args.token = 'args';\n    args.value = [e].concat(cleanEx);\n    if (d != null && d.toUpperCase() === 'DISTINCT') {\n        args.distinct = true;\n    } else {\n        args.distinct = false;\n    }\n    return args;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    var args = {};\n    args.token = 'args';\n    args.value = [];\n    return args;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (e, es) {\n    cleanEx = [];\n    for (var i = 0; i < es.length; i++) {\n        cleanEx.push(es[i][1]);\n    }\n    var args = {};\n    args.token = 'args';\n    args.value = [e].concat(cleanEx);\n    return args;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (ts) {\n    return ts;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (b, bs) {\n    var triples = b.triplesContext;\n    var toTest = null;\n    if (typeof bs === 'object') {\n        if (bs.length != null) {\n            if (bs[3].triplesContext != null) {\n                triples = triples.concat(bs[3].triplesContext);\n            }\n        }\n    }\n    return {\n        token: 'triplestemplate',\n        triplesContext: triples\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (obj, objs) {\n    var toReturn = [];\n    toReturn.push(obj);\n    for (var i = 0; i < objs.length; i++) {\n        for (var j = 0; j < objs[i].length; j++) {\n            if (typeof objs[i][j] == 'object' && objs[i][j].token != null) {\n                toReturn.push(objs[i][j]);\n            }\n        }\n    }\n    return toReturn;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    return {\n        token: 'uri',\n        prefix: null,\n        suffix: null,\n        value: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type'\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (p) {\n    var path = {};\n    path.token = 'path';\n    path.kind = 'element';\n    path.value = p;\n    return p;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (first, rest) {\n    if (rest == null || rest.length === 0) {\n        return first;\n    } else {\n        var acum = [];\n        for (var i = 0; i < rest.length; i++)\n            acum.push(rest[1]);\n        var path = {};\n        path.token = 'path';\n        path.kind = 'alternative';\n        path.value = acum;\n        return path;\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (first, rest) {\n    if (rest == null || rest.length === 0) {\n        return first;\n    } else {\n        var acum = [first];\n        for (var i = 0; i < rest.length; i++)\n            acum.push(rest[i][1]);\n        var path = {};\n        path.token = 'path';\n        path.kind = 'sequence';\n        path.value = acum;\n        return path;\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (p, mod) {\n    if (p.token && p.token != 'path' && mod == '') {\n        return p;\n    } else if (p.token && p.token != path && mod != '') {\n        var path = {};\n        path.token = 'path';\n        path.kind = 'element';\n        path.value = p;\n        path.modifier = mod;\n        return path;\n    } else {\n        p.modifier = mod;\n        return p;\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (elt) {\n    var path = {};\n    path.token = 'path';\n    path.kind = 'inversePath';\n    path.value = elt;\n    return path;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    return {\n        token: 'uri',\n        prefix: null,\n        suffix: null,\n        value: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type'\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (p) {\n    return p;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (gn) {\n    return gn;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (gn) {\n    return gn[1];\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (v) {\n    var term = {};\n    term.token = 'var';\n    term.value = v;\n    return term;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (v, vs) {\n    if (vs.length === 0) {\n        return v;\n    }\n    var exp = {};\n    exp.token = 'expression';\n    exp.expressionType = 'conditionalor';\n    var ops = [v];\n    for (var i = 0; i < vs.length; i++) {\n        ops.push(vs[i][3]);\n    }\n    exp.operands = ops;\n    return exp;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (v, vs) {\n    if (vs.length === 0) {\n        return v;\n    }\n    var exp = {};\n    exp.token = 'expression';\n    exp.expressionType = 'conditionaland';\n    var ops = [v];\n    for (var i = 0; i < vs.length; i++) {\n        ops.push(vs[i][3]);\n    }\n    exp.operands = ops;\n    return exp;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (op1, op2) {\n    if (op2.length === 0) {\n        return op1;\n    } else {\n        var exp = {};\n        exp.expressionType = 'relationalexpression';\n        exp.operator = op2[0][1];\n        exp.op1 = op1;\n        exp.op2 = op2[0][3];\n        exp.token = 'expression';\n        return exp;\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (exp, exps) {\n    if (exps.length === 0) {\n        return exp;\n    }\n    var ex = {};\n    ex.token = 'expression';\n    ex.expressionType = 'multiplicativeexpression';\n    ex.factor = exp;\n    ex.factors = [];\n    for (var i = 0; i < exps.length; i++) {\n        var factor = exps[i];\n        var fact = {};\n        fact.operator = factor[1];\n        fact.expression = factor[3];\n        ex.factors.push(fact);\n    }\n    return ex;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (e) {\n    var ex = {};\n    ex.token = 'expression';\n    ex.expressionType = 'unaryexpression';\n    ex.unaryexpression = '!';\n    ex.expression = e;\n    return ex;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (v) {\n    var ex = {};\n    ex.token = 'expression';\n    ex.expressionType = 'unaryexpression';\n    ex.unaryexpression = '+';\n    ex.expression = v;\n    return ex;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (v) {\n    var ex = {};\n    ex.token = 'expression';\n    ex.expressionType = 'unaryexpression';\n    ex.unaryexpression = '-';\n    ex.expression = v;\n    return ex;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (v) {\n    var ex = {};\n    ex.token = 'expression';\n    ex.expressionType = 'atomic';\n    ex.primaryexpression = 'rdfliteral';\n    ex.value = v;\n    return ex;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (v) {\n    var ex = {};\n    ex.token = 'expression';\n    ex.expressionType = 'atomic';\n    ex.primaryexpression = 'numericliteral';\n    ex.value = v;\n    return ex;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (v) {\n    var ex = {};\n    ex.token = 'expression';\n    ex.expressionType = 'atomic';\n    ex.primaryexpression = 'booleanliteral';\n    ex.value = v;\n    return ex;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (v) {\n    var ex = {};\n    ex.token = 'expression';\n    ex.expressionType = 'atomic';\n    ex.primaryexpression = 'var';\n    ex.value = v;\n    return ex;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (e) {\n    return e;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (e) {\n    var ex = {};\n    ex.token = 'expression';\n    ex.expressionType = 'builtincall';\n    ex.builtincall = 'str';\n    ex.args = [e];\n    return ex;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (e) {\n    var ex = {};\n    ex.token = 'expression';\n    ex.expressionType = 'builtincall';\n    ex.builtincall = 'lang';\n    ex.args = [e];\n    return ex;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (e1, e2) {\n    var ex = {};\n    ex.token = 'expression';\n    ex.expressionType = 'builtincall';\n    ex.builtincall = 'langmatches';\n    ex.args = [\n        e1,\n        e2\n    ];\n    return ex;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (e) {\n    var ex = {};\n    ex.token = 'expression';\n    ex.expressionType = 'builtincall';\n    ex.builtincall = 'datatype';\n    ex.args = [e];\n    return ex;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (v) {\n    var ex = {};\n    ex.token = 'expression';\n    ex.expressionType = 'builtincall';\n    ex.builtincall = 'bound';\n    ex.args = [v];\n    return ex;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (e) {\n    var ex = {};\n    ex.token = 'expression';\n    ex.expressionType = 'builtincall';\n    ex.builtincall = 'iri';\n    ex.args = [e];\n    return ex;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (e) {\n    var ex = {};\n    ex.token = 'expression';\n    ex.expressionType = 'builtincall';\n    ex.builtincall = 'uri';\n    ex.args = [e];\n    return ex;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (arg) {\n    var ex = {};\n    ex.token = 'expression';\n    ex.expressionType = 'builtincall';\n    ex.builtincall = 'bnode';\n    if (arg.length === 5) {\n        ex.args = [arg[2]];\n    } else {\n        ex.args = null;\n    }\n    return ex;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (args) {\n    var ex = {};\n    ex.token = 'expression';\n    ex.expressionType = 'builtincall';\n    ex.builtincall = 'coalesce';\n    ex.args = args;\n    return ex;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (test, trueCond, falseCond) {\n    var ex = {};\n    ex.token = 'expression';\n    ex.expressionType = 'builtincall';\n    ex.builtincall = 'if';\n    ex.args = [\n        test,\n        trueCond,\n        falseCond\n    ];\n    return ex;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (arg) {\n    var ex = {};\n    ex.token = 'expression';\n    ex.expressionType = 'builtincall';\n    ex.builtincall = 'isliteral';\n    ex.args = [arg];\n    return ex;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (arg) {\n    var ex = {};\n    ex.token = 'expression';\n    ex.expressionType = 'builtincall';\n    ex.builtincall = 'isblank';\n    ex.args = [arg];\n    return ex;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (e1, e2) {\n    var ex = {};\n    ex.token = 'expression';\n    ex.expressionType = 'builtincall';\n    ex.builtincall = 'sameterm';\n    ex.args = [\n        e1,\n        e2\n    ];\n    return ex;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (arg) {\n    var ex = {};\n    ex.token = 'expression';\n    ex.expressionType = 'builtincall';\n    ex.builtincall = 'isuri';\n    ex.args = [arg];\n    return ex;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (e1, e2, eo) {\n    var regex = {};\n    regex.token = 'expression';\n    regex.expressionType = 'regex';\n    regex.text = e1;\n    regex.pattern = e2;\n    regex.flags = eo[2];\n    return regex;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (ggp) {\n    var ex = {};\n    ex.token = 'expression';\n    ex.expressionType = 'builtincall';\n    ex.builtincall = 'exists';\n    ex.args = [ggp];\n    return ex;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (ggp) {\n    var ex = {};\n    ex.token = 'expression';\n    ex.expressionType = 'builtincall';\n    ex.builtincall = 'notexists';\n    ex.args = [ggp];\n    return ex;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (d, e) {\n    exp = {};\n    exp.token = 'expression';\n    exp.expressionType = 'aggregate';\n    exp.aggregateType = 'count';\n    exp.distinct = d != '' ? 'DISTINCT' : d;\n    exp.expression = e;\n    return exp;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (d, e) {\n    exp = {};\n    exp.token = 'expression';\n    exp.expressionType = 'aggregate';\n    exp.aggregateType = 'sum';\n    exp.distinct = d != '' ? 'DISTINCT' : d;\n    exp.expression = e;\n    return exp;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (d, e) {\n    exp = {};\n    exp.token = 'expression';\n    exp.expressionType = 'aggregate';\n    exp.aggregateType = 'min';\n    exp.distinct = d != '' ? 'DISTINCT' : d;\n    exp.expression = e;\n    return exp;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (d, e) {\n    exp = {};\n    exp.token = 'expression';\n    exp.expressionType = 'aggregate';\n    exp.aggregateType = 'max';\n    exp.distinct = d != '' ? 'DISTINCT' : d;\n    exp.expression = e;\n    return exp;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (d, e) {\n    exp = {};\n    exp.token = 'expression';\n    exp.expressionType = 'aggregate';\n    exp.aggregateType = 'avg';\n    exp.distinct = d != '' ? 'DISTINCT' : d;\n    exp.expression = e;\n    return exp;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (i, args) {\n    var fcall = {};\n    fcall.token = 'expression';\n    fcall.expressionType = 'irireforfunction';\n    fcall.iriref = i;\n    fcall.args = args.value;\n    return fcall;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    var lit = {};\n    lit.token = 'literal';\n    lit.lang = null;\n    lit.type = 'http://www.w3.org/2001/XMLSchema#boolean';\n    lit.value = true;\n    return lit;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    var lit = {};\n    lit.token = 'literal';\n    lit.lang = null;\n    lit.type = 'http://www.w3.org/2001/XMLSchema#boolean';\n    lit.value = false;\n    return lit;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (s) {\n    return {\n        token: 'string',\n        value: s\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (s) {\n    return {\n        token: 'string',\n        value: s\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (s) {\n    return {\n        token: 'string',\n        value: s\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (s) {\n    return {\n        token: 'string',\n        value: s\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (iri) {\n    return {\n        token: 'uri',\n        prefix: null,\n        suffix: null,\n        value: iri\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (p) {\n    return p;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (p) {\n    return {\n        token: 'uri',\n        prefix: p[0],\n        suffix: p[1],\n        value: null\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (p) {\n    return {\n        token: 'uri',\n        prefix: p,\n        suffix: '',\n        value: null\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (l) {\n    return {\n        token: 'blank',\n        value: l\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    GlobalBlankNodeCounter++;\n    return {\n        token: 'blank',\n        value: '_:' + GlobalBlankNodeCounter\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (iri_ref) {\n    return iri_ref.join('');\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (p) {\n    return p;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (p, s) {\n    return [\n        p,\n        s\n    ];\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (l) {\n    return l;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (v) {\n    return v;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (v) {\n    return v;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (a, b) {\n    if (b.length === 0) {\n        return ('@' + a.join('')).toLowerCase();\n    } else {\n        return ('@' + a.join('') + '-' + b[0][1].join('')).toLowerCase();\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (d) {\n    var lit = {};\n    lit.token = 'literal';\n    lit.lang = null;\n    lit.type = 'http://www.w3.org/2001/XMLSchema#integer';\n    lit.value = flattenString(d);\n    return lit;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (a, b, c) {\n    var lit = {};\n    lit.token = 'literal';\n    lit.lang = null;\n    lit.type = 'http://www.w3.org/2001/XMLSchema#decimal';\n    lit.value = flattenString([\n        a,\n        b,\n        c\n    ]);\n    return lit;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (a, b) {\n    var lit = {};\n    lit.token = 'literal';\n    lit.lang = null;\n    lit.type = 'http://www.w3.org/2001/XMLSchema#decimal';\n    lit.value = flattenString([\n        a,\n        b\n    ]);\n    return lit;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (a, b, c, e) {\n    var lit = {};\n    lit.token = 'literal';\n    lit.lang = null;\n    lit.type = 'http://www.w3.org/2001/XMLSchema#double';\n    lit.value = flattenString([\n        a,\n        b,\n        c,\n        e\n    ]);\n    return lit;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (a, b, c) {\n    var lit = {};\n    lit.token = 'literal';\n    lit.lang = null;\n    lit.type = 'http://www.w3.org/2001/XMLSchema#double';\n    lit.value = flattenString([\n        a,\n        b,\n        c\n    ]);\n    return lit;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (a, b) {\n    var lit = {};\n    lit.token = 'literal';\n    lit.lang = null;\n    lit.type = 'http://www.w3.org/2001/XMLSchema#double';\n    lit.value = flattenString([\n        a,\n        b\n    ]);\n    return lit;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (d) {\n    d.value = '+' + d.value;\n    return d;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (d) {\n    d.value = '+' + d.value;\n    return d;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (d) {\n    d.value = '+' + d.value;\n    return d;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (d) {\n    d.value = '-' + d.value;\n    return d;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (d) {\n    d.value = '-' + d.value;\n    return d;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (d) {\n    d.value = '-' + d.value;\n    return d;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (a, b, c) {\n    return flattenString([\n        a,\n        b,\n        c\n    ]);\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (content) {\n    return flattenString(content);\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (content) {\n    return flattenString(content);\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (content) {\n    return flattenString(content);\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (content) {\n    return flattenString(content);\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    return {\n        token: 'triplesnodecollection',\n        triplesContext: [],\n        chainSubject: [{\n                token: 'uri',\n                value: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#nil'\n            }]\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (init, rpart) {\n    return init + rpart.join('');\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (base, rest) {\n    if (rest[rest.length - 1] == '.') {\n        throw new Error('Wrong PN_PREFIX, cannot finish with \\'.\\'');\n    } else {\n        return base + rest.join('');\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (base, rest) {\n    return base + rest.join('');\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (triple) {\n    n3 = n3 + triple.toString();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (a, b) {\n    return that.compareFilteredBindings(a, b, order, outEnv);\n}",
    "receiverBase": "acum",
    "receiverCallee": "sort"
  },
  {
    "callback": "function (success, result) {\n    if (that.lexicon.updateAfterWrite)\n        that.lexicon.updateAfterWrite();\n    if (success) {\n        that.callbacksBackend.endGraphModification(function () {\n            callback(success, result);\n        });\n    } else {\n        that.callbacksBackend.cancelGraphModification();\n        callback(success, result);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "executeUpdate"
  },
  {
    "callback": "function () {\n    callback(success, result);\n}",
    "receiverBase": "callbacksBackend",
    "receiverCallee": "endGraphModification"
  },
  {
    "callback": "function (success, result) {\n    if (success) {\n        if (typeof result === 'object' && result.denorm === true) {\n            callback(true, result['bindings']);\n        } else {\n            var result = that.denormalizeBindingsList(result, queryEnv);\n            if (result != null) {\n                callback(true, result);\n            } else {\n                callback(false, result);\n            }\n        }\n    } else {\n        callback(false, result);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "executeSelect"
  },
  {
    "callback": "function (success, result) {\n    if (success) {\n        if (success) {\n            if (result.length > 0) {\n                callback(true, true);\n            } else {\n                callback(true, false);\n            }\n        } else {\n            callback(false, result);\n        }\n    } else {\n        callback(false, result);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "executeSelect"
  },
  {
    "callback": "function (success, result) {\n    if (success == false) {\n        console.log('Error loading graph');\n        console.log(result);\n        callback(false, 'error batch loading quads');\n    } else {\n        var result = that.batchLoad(result);\n        callback(result != null, result || 'error batch loading quads');\n    }\n}",
    "receiverBase": "rdfLoader",
    "receiverCallee": "load"
  },
  {
    "callback": "function () {\n    exitFn();\n}",
    "receiverBase": "callbacksBackend",
    "receiverCallee": "endGraphModification"
  },
  {
    "callback": "function (success, result) {\n    if (success) {\n        var result = that.denormalizeBindingsList(result, queryEnv);\n        if (result != null) {\n            bindings = result;\n        } else {\n            querySuccess = false;\n        }\n        return k();\n    } else {\n        querySuccess = false;\n        return k();\n    }\n}",
    "receiverBase": "that",
    "receiverCallee": "executeSelect"
  },
  {
    "callback": "function () {\n    callback(querySuccess);\n}",
    "receiverBase": "",
    "receiverCallee": "seq"
  },
  {
    "callback": "function (k, env) {\n    var graph = graphs[env._i];\n    var floop = arguments.callee;\n    if (!foundErrorDeleting) {\n        that.execute('DELETE { GRAPH <' + graph + '> { ?s ?p ?o } } WHERE { GRAPH <' + graph + '> { ?s ?p ?o } }', function (success, results) {\n            foundErrorDeleting = !success;\n            k(floop, env);\n        });\n    } else {\n        k(floop, env);\n    }\n}",
    "receiverBase": "Utils",
    "receiverCallee": "repeat"
  },
  {
    "callback": "function (success, results) {\n    foundErrorDeleting = !success;\n    k(floop, env);\n}",
    "receiverBase": "that",
    "receiverCallee": "execute"
  },
  {
    "callback": "function (env) {\n    callback(!foundErrorDeleting);\n}",
    "receiverBase": "Utils",
    "receiverCallee": "repeat"
  },
  {
    "callback": "function (success, result) {\n    if (success) {\n        that.execute('CLEAR NAMED', callback);\n    } else {\n        callback(false, result);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "execute"
  },
  {
    "callback": "function () {\n    that.sendNotification(Callbacks['added'], tmp[Callbacks['added']], function () {\n        that.sendEmptyNotification(Callbacks['eventsFlushed'], null, function () {\n            that.dispatchQueries(function () {\n                callback(true);\n            });\n        });\n    });\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "sendNotification"
  },
  {
    "callback": "function () {\n    that.sendEmptyNotification(Callbacks['eventsFlushed'], null, function () {\n        that.dispatchQueries(function () {\n            callback(true);\n        });\n    });\n}",
    "receiverBase": "that",
    "receiverCallee": "sendNotification"
  },
  {
    "callback": "function () {\n    that.dispatchQueries(function () {\n        callback(true);\n    });\n}",
    "receiverBase": "that",
    "receiverCallee": "sendEmptyNotification"
  },
  {
    "callback": "function () {\n    callback(true);\n}",
    "receiverBase": "that",
    "receiverCallee": "dispatchQueries"
  },
  {
    "callback": "function () {\n    callback(node);\n    if (doneCallback)\n        doneCallback(true);\n}",
    "receiverBase": "that",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (success, results) {\n    if (success) {\n        callback(results);\n    } else {\n        console.log('ERROR in query callback ' + results);\n    }\n}",
    "receiverBase": "engine",
    "receiverCallee": "execute"
  },
  {
    "callback": "function () {\n    that.engine.execute(query, function (success, results) {\n        if (success) {\n            queryCallback(results);\n        } else {\n            console.log('ERROR executing query callback ' + results);\n        }\n        k(floop, env);\n    });\n}",
    "receiverBase": "Utils",
    "receiverCallee": "recur"
  },
  {
    "callback": "function (success, results) {\n    if (success) {\n        queryCallback(results);\n    } else {\n        console.log('ERROR executing query callback ' + results);\n    }\n    k(floop, env);\n}",
    "receiverBase": "engine",
    "receiverCallee": "execute"
  },
  {
    "callback": "function (env) {\n    callback();\n}",
    "receiverBase": "Utils",
    "receiverCallee": "repeat"
  },
  {
    "callback": "function (success, results) {\n    that.connection.postMessage({\n        'fn': 'workerRequestResponse',\n        'results': [\n            success,\n            results\n        ],\n        'callback': workerCallback\n    });\n}",
    "receiverBase": "event",
    "receiverCallee": "concat"
  },
  {
    "callback": "function (connection) {\n    callback(false, connection);\n}",
    "receiverBase": "Store",
    "receiverCallee": "create"
  },
  {
    "callback": "function (connection) {\n    callback(false, connection);\n}",
    "receiverBase": "Store",
    "receiverCallee": "create"
  },
  {
    "callback": "function () {\n    if (params['overwrite'] === true) {\n        that.engine.clean(function () {\n            callback(that);\n        });\n    } else {\n        callback(that);\n    }\n}",
    "receiverBase": "engine",
    "receiverCallee": "readConfiguration"
  },
  {
    "callback": "function () {\n    callback(that);\n}",
    "receiverBase": "engine",
    "receiverCallee": "clean"
  },
  {
    "callback": "function () {\n}",
    "receiverBase": "callbacksBackend",
    "receiverCallee": "observeNode"
  },
  {
    "callback": "function () {\n}",
    "receiverBase": "callbacksBackend",
    "receiverCallee": "observeNode"
  },
  {
    "callback": "function () {\n}",
    "receiverBase": "callbacksBackend",
    "receiverCallee": "observeQuery"
  },
  {
    "callback": "function () {\n}",
    "receiverBase": "callbacksBackend",
    "receiverCallee": "subscribe"
  },
  {
    "callback": "function (triple) {\n    query = query + that._nodeToQuery(triple.subject) + that._nodeToQuery(triple.predicate) + that._nodeToQuery(triple.object) + '.';\n}",
    "receiverBase": "triples",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (triple) {\n    query = query + that._nodeToQuery(triple.subject) + that._nodeToQuery(triple.predicate) + that._nodeToQuery(triple.object) + '.';\n}",
    "receiverBase": "triples",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (success, quads) {\n    if (success) {\n        that.engine.batchLoad(quads, callback);\n    } else {\n        callback(success, quads);\n    }\n}",
    "receiverBase": "rdfLoader",
    "receiverCallee": "loadFromFile"
  },
  {
    "callback": "function (success, quads) {\n    if (success) {\n        that.engine.batchLoad(quads, callback);\n    } else {\n        callback(success, quads);\n    }\n}",
    "receiverBase": "rdfLoader",
    "receiverCallee": "tryToParse"
  },
  {
    "callback": "function (graphs) {\n    var acum = [];\n    for (var i = 0; i < graphs.length; i++) {\n        var graph = graphs[i];\n        var uri = new RDFJSInterface.NamedNode(graph);\n        acum.push(uri);\n    }\n    return callback(true, acum);\n}",
    "receiverBase": "engine",
    "receiverCallee": "registeredGraphs"
  },
  {
    "callback": "function (results) {\n    callback.apply(callback, results);\n}",
    "receiverBase": "RDFStoreWorker",
    "receiverCallee": "registerCallback"
  },
  {
    "callback": "function (result) {\n    RDFStoreWorker.store = result;\n    postMessage({\n        'callback': cb,\n        'result': 'created',\n        'success': true\n    });\n}",
    "receiverBase": "args",
    "receiverCallee": "push"
  },
  {
    "callback": "function (success, result) {\n    if (msg.callback != null) {\n        postMessage({\n            'callback': msg.callback,\n            'result': result,\n            'success': success\n        });\n    }\n}",
    "receiverBase": "args",
    "receiverCallee": "push"
  },
  {
    "callback": "function (success, result) {\n    if (msg.callback != null) {\n        postMessage({\n            'callback': msg.callback,\n            'result': result,\n            'success': success\n        });\n    }\n}",
    "receiverBase": "args",
    "receiverCallee": "push"
  },
  {
    "callback": "function (success, result) {\n    if (msg.callback && msg.callback[1] != null) {\n        postMessage({\n            'callback': msg.callback[1],\n            'result': result,\n            'success': success\n        });\n    }\n}",
    "receiverBase": "args",
    "receiverCallee": "push"
  },
  {
    "callback": "function (elem, i) {\n    return callback.call(elem, i, elem);\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "map"
  },
  {
    "callback": "function (i, name) {\n    class2type['[object ' + name + ']'] = name.toLowerCase();\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (_, flag) {\n    object[flag] = true;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function add(args) {\n    jQuery.each(args, function (_, arg) {\n        var type = jQuery.type(arg);\n        if (type === 'function') {\n            if (!options.unique || !self.has(arg)) {\n                list.push(arg);\n            }\n        } else if (arg && arg.length && type !== 'string') {\n            add(arg);\n        }\n    });\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (_, arg) {\n    var type = jQuery.type(arg);\n    if (type === 'function') {\n        if (!options.unique || !self.has(arg)) {\n            list.push(arg);\n        }\n    } else if (arg && arg.length && type !== 'string') {\n        add(arg);\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (_, arg) {\n    var index;\n    while ((index = jQuery.inArray(arg, list, index)) > -1) {\n        list.splice(index, 1);\n        if (firing) {\n            if (index <= firingLength) {\n                firingLength--;\n            }\n            if (index <= firingIndex) {\n                firingIndex--;\n            }\n        }\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, tuple) {\n    var action = tuple[0], fn = jQuery.isFunction(fns[i]) && fns[i];\n    deferred[tuple[1]](function () {\n        var returned = fn && fn.apply(this, arguments);\n        if (returned && jQuery.isFunction(returned.promise)) {\n            returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);\n        } else {\n            newDefer[action + 'With'](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);\n        }\n    });\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var returned = fn && fn.apply(this, arguments);\n    if (returned && jQuery.isFunction(returned.promise)) {\n        returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);\n    } else {\n        newDefer[action + 'With'](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "deferred"
  },
  {
    "callback": "function (i, tuple) {\n    var list = tuple[2], stateString = tuple[3];\n    promise[tuple[1]] = list.add;\n    if (stateString) {\n        list.add(function () {\n            state = stateString;\n        }, tuples[i ^ 1][2].disable, tuples[2][2].lock);\n    }\n    deferred[tuple[0]] = function () {\n        deferred[tuple[0] + 'With'](this === deferred ? promise : this, arguments);\n        return this;\n    };\n    deferred[tuple[0] + 'With'] = list.fireWith;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    state = stateString;\n}",
    "receiverBase": "list",
    "receiverCallee": "add"
  },
  {
    "callback": "function () {\n    support.boxSizing = div.offsetWidth === 4;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "swap"
  },
  {
    "callback": "function () {\n    data_user.set(this, key);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var data = data_user.get(this, camelKey);\n    data_user.set(this, camelKey, value);\n    if (key.indexOf('-') !== -1 && data !== undefined) {\n        data_user.set(this, key, value);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    data_user.remove(this, key);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    data_priv.remove(elem, [\n        type + 'queue',\n        key\n    ]);\n}",
    "receiverBase": "Callbacks",
    "receiverCallee": "add"
  },
  {
    "callback": "function () {\n    var queue = jQuery.queue(this, type, data);\n    jQuery._queueHooks(this, type);\n    if (type === 'fx' && queue[0] !== 'inprogress') {\n        jQuery.dequeue(this, type);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.dequeue(this, type);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (next, hooks) {\n    var timeout = setTimeout(next, time);\n    hooks.stop = function () {\n        clearTimeout(timeout);\n    };\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "queue"
  },
  {
    "callback": "function () {\n    jQuery.removeAttr(this, name);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    delete this[jQuery.propFix[name] || name];\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (j) {\n    jQuery(this).addClass(value.call(this, j, this.className));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (j) {\n    jQuery(this).removeClass(value.call(this, j, this.className));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i) {\n    jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (value) {\n    return value == null ? '' : value + '';\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "map"
  },
  {
    "callback": "function (i, name) {\n    var getter = jQuery.expr.attrHandle[name] || jQuery.find.attr;\n    jQuery.expr.attrHandle[name] = function (elem, name, isXML) {\n        var fn = jQuery.expr.attrHandle[name], ret = isXML ? undefined : (jQuery.expr.attrHandle[name] = undefined) != getter(elem, name, isXML) ? name.toLowerCase() : null;\n        jQuery.expr.attrHandle[name] = fn;\n        return ret;\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.propFix[this.toLowerCase()] = this;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.valHooks[this] = {\n        set: function (elem, value) {\n            if (jQuery.isArray(value)) {\n                return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;\n            }\n        }\n    };\n    if (!jQuery.support.checkOn) {\n        jQuery.valHooks[this].get = function (elem) {\n            return elem.getAttribute('value') === null ? 'on' : elem.value;\n        };\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.event.add(this, types, fn, data, selector);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.event.remove(this, types, fn, selector);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    jQuery.event.trigger(type, data, this);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    for (i = 0; i < len; i++) {\n        if (jQuery.contains(self[i], this)) {\n            return true;\n        }\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "filter"
  },
  {
    "callback": "function () {\n    var i = 0;\n    for (; i < l; i++) {\n        if (jQuery.contains(this, targets[i])) {\n            return true;\n        }\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (elem) {\n    return elem.nodeType === 1;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function (elem, i) {\n    return !!qualifier.call(elem, i, elem) !== not;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function (elem) {\n    return elem === qualifier !== not;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function (elem) {\n    return core_indexOf.call(qualifier, elem) >= 0 !== not;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function (value) {\n    return value === undefined ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "access"
  },
  {
    "callback": "function (elem) {\n    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n        var target = manipulationTarget(this, elem);\n        target.appendChild(elem);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function (elem) {\n    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n        var target = manipulationTarget(this, elem);\n        target.insertBefore(elem, target.firstChild);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function (elem) {\n    if (this.parentNode) {\n        this.parentNode.insertBefore(elem, this);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function (elem) {\n    if (this.parentNode) {\n        this.parentNode.insertBefore(elem, this.nextSibling);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function () {\n    return jQuery.clone(this, dataAndEvents, deepDataAndEvents);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "map"
  },
  {
    "callback": "function (elem) {\n    return [\n        elem.nextSibling,\n        elem.parentNode\n    ];\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "map"
  },
  {
    "callback": "function (elem) {\n    var next = args[i++], parent = args[i++];\n    if (parent) {\n        if (next && next.parentNode !== parent) {\n            next = this.nextSibling;\n        }\n        jQuery(this).remove();\n        parent.insertBefore(elem, next);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "domManip"
  },
  {
    "callback": "function (index) {\n    var self = set.eq(index);\n    if (isFunction) {\n        args[0] = value.call(this, index, self.html());\n    }\n    self.domManip(args, callback, allowIntersection);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (name, original) {\n    jQuery.fn[name] = function (selector) {\n        var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;\n        for (; i <= last; i++) {\n            elems = i === last ? this : this.clone(true);\n            jQuery(insert[i])[original](elems);\n            core_push.apply(ret, elems.get());\n        }\n        return this.pushStack(ret);\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i) {\n    jQuery(this).wrapAll(html.call(this, i));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var elem = this;\n    while (elem.firstElementChild) {\n        elem = elem.firstElementChild;\n    }\n    return elem;\n}",
    "receiverBase": "wrap",
    "receiverCallee": "map"
  },
  {
    "callback": "function (i) {\n    jQuery(this).wrapInner(html.call(this, i));\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var self = jQuery(this), contents = self.contents();\n    if (contents.length) {\n        contents.wrapAll(html);\n    } else {\n        self.append(html);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i) {\n    jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    if (!jQuery.nodeName(this, 'body')) {\n        jQuery(this).replaceWith(this.childNodes);\n    }\n}",
    "receiverBase": "parent",
    "receiverCallee": "each"
  },
  {
    "callback": "function (elem, name, value) {\n    var styles, len, map = {}, i = 0;\n    if (jQuery.isArray(name)) {\n        styles = getStyles(elem);\n        len = name.length;\n        for (; i < len; i++) {\n            map[name[i]] = jQuery.css(elem, name[i], false, styles);\n        }\n        return map;\n    }\n    return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "access"
  },
  {
    "callback": "function () {\n    if (bool ? state : isHidden(this)) {\n        jQuery(this).show();\n    } else {\n        jQuery(this).hide();\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    return getWidthOrHeight(elem, name, extra);\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "swap"
  },
  {
    "callback": "function (i, prop) {\n    jQuery.cssHooks[prop] = {\n        get: function (elem, computed) {\n            if (computed) {\n                computed = curCSS(elem, prop);\n                return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + 'px' : computed;\n            }\n        }\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var elements = jQuery.prop(this, 'elements');\n    return elements ? jQuery.makeArray(elements) : this;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    var type = this.type;\n    return this.name && !jQuery(this).is(':disabled') && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !manipulation_rcheckableType.test(type));\n}",
    "receiverBase": "map",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (i, elem) {\n    var val = jQuery(this).val();\n    return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {\n        return {\n            name: elem.name,\n            value: val.replace(rCRLF, '\\r\\n')\n        };\n    }) : {\n        name: elem.name,\n        value: val.replace(rCRLF, '\\r\\n')\n    };\n}",
    "receiverBase": "filter",
    "receiverCallee": "map"
  },
  {
    "callback": "function (val) {\n    return {\n        name: elem.name,\n        value: val.replace(rCRLF, '\\r\\n')\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    add(this.name, this.value);\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, v) {\n    if (traditional || rbracket.test(prefix)) {\n        add(prefix, v);\n    } else {\n        buildParams(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, traditional, add);\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (i, name) {\n    jQuery.fn[name] = function (data, fn) {\n        return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    fxNow = undefined;\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function () {\n    delete tick.elem;\n}",
    "receiverBase": "Deferred",
    "receiverCallee": "always"
  },
  {
    "callback": "function () {\n    anim.always(function () {\n        hooks.unqueued--;\n        if (!jQuery.queue(elem, 'fx').length) {\n            hooks.empty.fire();\n        }\n    });\n}",
    "receiverBase": "anim",
    "receiverCallee": "always"
  },
  {
    "callback": "function () {\n    hooks.unqueued--;\n    if (!jQuery.queue(elem, 'fx').length) {\n        hooks.empty.fire();\n    }\n}",
    "receiverBase": "anim",
    "receiverCallee": "always"
  },
  {
    "callback": "function () {\n    style.overflow = opts.overflow[0];\n    style.overflowX = opts.overflow[1];\n    style.overflowY = opts.overflow[2];\n}",
    "receiverBase": "anim",
    "receiverCallee": "always"
  },
  {
    "callback": "function () {\n    jQuery(elem).hide();\n}",
    "receiverBase": "anim",
    "receiverCallee": "done"
  },
  {
    "callback": "function () {\n    var prop;\n    data_priv.remove(elem, 'fxshow');\n    for (prop in orig) {\n        jQuery.style(elem, prop, orig[prop]);\n    }\n}",
    "receiverBase": "anim",
    "receiverCallee": "done"
  },
  {
    "callback": "function (i, name) {\n    var cssFn = jQuery.fn[name];\n    jQuery.fn[name] = function (speed, easing, callback) {\n        return speed == null || typeof speed === 'boolean' ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (name, props) {\n    jQuery.fn[name] = function (speed, easing, callback) {\n        return this.animate(props, speed, easing, callback);\n    };\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "each"
  },
  {
    "callback": "function (fn) {\n    return elem === fn.elem;\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "grep"
  },
  {
    "callback": "function (i) {\n    jQuery.offset.setOffset(this, options, i);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    var offsetParent = this.offsetParent || docElem;\n    while (offsetParent && (!jQuery.nodeName(offsetParent, 'html') && jQuery.css(offsetParent, 'position') === 'static')) {\n        offsetParent = offsetParent.offsetParent;\n    }\n    return offsetParent || docElem;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "map"
  },
  {
    "callback": "function (elem, method, val) {\n    var win = getWindow(elem);\n    if (val === undefined) {\n        return win ? win[prop] : elem[method];\n    }\n    if (win) {\n        win.scrollTo(!top ? val : window.pageXOffset, top ? val : window.pageYOffset);\n    } else {\n        elem[method] = val;\n    }\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "access"
  },
  {
    "callback": "function (elem, type, value) {\n    var doc;\n    if (jQuery.isWindow(elem)) {\n        return elem.document.documentElement['client' + name];\n    }\n    if (elem.nodeType === 9) {\n        doc = elem.documentElement;\n        return Math.max(elem.body['scroll' + name], doc['scroll' + name], elem.body['offset' + name], doc['offset' + name], doc['client' + name]);\n    }\n    return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra);\n}",
    "receiverBase": "jQuery",
    "receiverCallee": "access"
  },
  {
    "callback": "function () {\n    return jQuery;\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function () {\n    app.set('views', __dirname + '/views');\n    app.set('view engine', 'ejs');\n    app.use(express.bodyParser());\n    app.use(express.methodOverride());\n    app.use(app.router);\n    app.use(express.static(__dirname + '/public'));\n}",
    "receiverBase": "app",
    "receiverCallee": "configure"
  },
  {
    "callback": "function () {\n    app.use(express.errorHandler({\n        dumpExceptions: true,\n        showStack: true\n    }));\n}",
    "receiverBase": "app",
    "receiverCallee": "configure"
  },
  {
    "callback": "function () {\n    app.use(express.errorHandler());\n}",
    "receiverBase": "app",
    "receiverCallee": "configure"
  },
  {
    "callback": "function (client) {\n    client.on('message', function (data) {\n        client.broadcast(data);\n    });\n}",
    "receiverBase": "socket",
    "receiverCallee": "on"
  },
  {
    "callback": "function (data) {\n    client.broadcast(data);\n}",
    "receiverBase": "client",
    "receiverCallee": "on"
  },
  {
    "callback": "function (req, res) {\n    console.log(req);\n    res.render('index', { title: 'SocketSketch' });\n}",
    "receiverBase": "app",
    "receiverCallee": "get"
  }
]