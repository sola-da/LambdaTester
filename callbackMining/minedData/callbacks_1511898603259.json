[
  {
    "callback": "function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory(require, exports, module);\n    } else {\n        root.Tether = factory();\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    var id;\n    id = 0;\n    return function () {\n        return id++;\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    return zeroPosCache[id] = void 0;\n}",
    "receiverBase": "",
    "receiverCallee": "defer"
  },
  {
    "callback": "function () {\n    var el, key, _i, _len, _ref1;\n    el = document.createElement('div');\n    _ref1 = [\n        'transform',\n        'webkitTransform',\n        'OTransform',\n        'MozTransform',\n        'msTransform'\n    ];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n        key = _ref1[_i];\n        if (el.style[key] !== void 0) {\n            return key;\n        }\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    if (_this._addAttachClasses == null) {\n        return;\n    }\n    updateClasses(_this.element, _this._addAttachClasses, all);\n    updateClasses(_this.target, _this._addAttachClasses, all);\n    return _this._addAttachClasses = void 0;\n}",
    "receiverBase": "",
    "receiverCallee": "defer"
  },
  {
    "callback": "function () {\n    return getBounds(_this.element);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "cache"
  },
  {
    "callback": "function () {\n    return _this.getTargetBounds();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "cache"
  },
  {
    "callback": "function () {\n    return getOffsetParent(_this.target);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "cache"
  },
  {
    "callback": "function () {\n    return getBounds(offsetParent);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "cache"
  },
  {
    "callback": "function () {\n    return getOffsetParent(_this.target);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "cache"
  },
  {
    "callback": "function () {\n    _this.element.parentNode.removeChild(_this.element);\n    return offsetParent.appendChild(_this.element);\n}",
    "receiverBase": "",
    "receiverCallee": "defer"
  },
  {
    "callback": "function () {\n    return extend(_this.element.style, writeCSS);\n}",
    "receiverBase": "",
    "receiverCallee": "defer"
  },
  {
    "callback": "function () {\n    return getBounds(_this.element);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "cache"
  },
  {
    "callback": "function () {\n    return _this.getTargetBounds();\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "cache"
  },
  {
    "callback": "function () {\n    var _len4, _m, _ref7, _results;\n    _ref7 = pin.split(',');\n    _results = [];\n    for (_m = 0, _len4 = _ref7.length; _m < _len4; _m++) {\n        p = _ref7[_m];\n        _results.push(p.trim());\n    }\n    return _results;\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    updateClasses(_this.target, addClasses, allClasses);\n    return updateClasses(_this.element, addClasses, allClasses);\n}",
    "receiverBase": "",
    "receiverCallee": "defer"
  },
  {
    "callback": "function () {\n    return getBounds(_this.element);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "cache"
  },
  {
    "callback": "function () {\n    updateClasses(_this.target, addClasses, allClasses);\n    return updateClasses(_this.element, addClasses, allClasses);\n}",
    "receiverBase": "",
    "receiverCallee": "defer"
  },
  {
    "callback": "function () {\n    return document.body.removeEventListener(event, handler);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    return _this.scrollTo();\n}",
    "receiverBase": "",
    "receiverCallee": "setTimeout"
  },
  {
    "callback": "function (e) {\n    e.preventDefault();\n    return _this.cancel();\n}",
    "receiverBase": "link",
    "receiverCallee": "addEventListener"
  },
  {
    "callback": "function () {\n    var _ref2, _results;\n    _ref2 = cfg.events;\n    _results = [];\n    for (event in _ref2) {\n        handler = _ref2[event];\n        _results.push(el.removeEventListener(event, handler));\n    }\n    return _results;\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "on"
  },
  {
    "callback": "function (opts) {\n    if (opts == null) {\n        opts = {};\n    }\n    opts.tour = _this;\n    return Shepherd.trigger(event, opts);\n}",
    "receiverBase": "_this",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    if (typeof promise !== 'function')\n        promise.resolve.apply(null, arguments);\n    else\n        promise.apply(null, arguments);\n}",
    "receiverBase": "sender",
    "receiverCallee": "then"
  },
  {
    "callback": "function (key) {\n    if (attrs[key] === undefined) {\n        if (!errors[key])\n            errors[key] = [];\n        errors[key].push('must not be null');\n        valid = false;\n    }\n}",
    "receiverBase": "utils",
    "receiverCallee": "each"
  },
  {
    "callback": "function (value) {\n    showWeeks = !!value;\n    updateShowWeekNumbers();\n}",
    "receiverBase": "$parent",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function (value) {\n    datepickerCtrl.minDate = value ? new Date(value) : null;\n    refill();\n}",
    "receiverBase": "$parent",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function (value) {\n    datepickerCtrl.maxDate = value ? new Date(value) : null;\n    refill();\n}",
    "receiverBase": "$parent",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function (obj) {\n    obj.disabled = datepickerCtrl.isDisabled(obj.date, mode);\n}",
    "receiverBase": "angular",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (value) {\n    dateFormat = value || datepickerPopupConfig.dateFormat;\n    ngModel.$render();\n}",
    "receiverBase": "attrs",
    "receiverCallee": "$observe"
  },
  {
    "callback": "function () {\n    scope.$destroy();\n}",
    "receiverBase": "originalScope",
    "receiverCallee": "$on"
  },
  {
    "callback": "function (text) {\n    scope.currentText = angular.isDefined(text) ? text : datepickerPopupConfig.currentText;\n}",
    "receiverBase": "attrs",
    "receiverCallee": "$observe"
  },
  {
    "callback": "function (text) {\n    scope.toggleWeeksText = angular.isDefined(text) ? text : datepickerPopupConfig.toggleWeeksText;\n}",
    "receiverBase": "attrs",
    "receiverCallee": "$observe"
  },
  {
    "callback": "function (text) {\n    scope.clearText = angular.isDefined(text) ? text : datepickerPopupConfig.clearText;\n}",
    "receiverBase": "attrs",
    "receiverCallee": "$observe"
  },
  {
    "callback": "function (text) {\n    scope.closeText = angular.isDefined(text) ? text : datepickerPopupConfig.closeText;\n}",
    "receiverBase": "attrs",
    "receiverCallee": "$observe"
  },
  {
    "callback": "function updateOpen(value) {\n    scope.isOpen = !!value;\n}",
    "receiverBase": "originalScope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function () {\n    setOpen(false);\n}",
    "receiverBase": "scope",
    "receiverCallee": "$apply"
  },
  {
    "callback": "function () {\n    setOpen(true);\n}",
    "receiverBase": "scope",
    "receiverCallee": "$apply"
  },
  {
    "callback": "function () {\n    scope.$apply(function () {\n        updateCalendar();\n    });\n}",
    "receiverBase": "element",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    updateCalendar();\n}",
    "receiverBase": "scope",
    "receiverCallee": "$apply"
  },
  {
    "callback": "function (value) {\n    scope[scopeProperty] = value;\n}",
    "receiverBase": "originalScope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function () {\n    return {\n        restrict: 'EA',\n        replace: true,\n        transclude: true,\n        templateUrl: 'template/datepicker/popup.html',\n        link: function (scope, element, attrs) {\n            element.bind('click', function (event) {\n                event.preventDefault();\n                event.stopPropagation();\n            });\n        }\n    };\n}",
    "receiverBase": "directive",
    "receiverCallee": "directive"
  },
  {
    "callback": "function (event) {\n    event.preventDefault();\n    event.stopPropagation();\n}",
    "receiverBase": "element",
    "receiverCallee": "bind"
  },
  {
    "callback": "function () {\n    return function (scope, element, attr) {\n        element.addClass('ng-binding').data('$binding', attr.bindHtmlUnsafe);\n        scope.$watch(attr.bindHtmlUnsafe, function bindHtmlUnsafeWatchAction(value) {\n            element.html(value || '');\n        });\n    };\n}",
    "receiverBase": "module",
    "receiverCallee": "directive"
  },
  {
    "callback": "function bindHtmlUnsafeWatchAction(value) {\n    element.html(value || '');\n}",
    "receiverBase": "scope",
    "receiverCallee": "$watch"
  },
  {
    "callback": "function (letter, pos) {\n    return (pos ? separator : '') + letter.toLowerCase();\n}",
    "receiverBase": "name",
    "receiverCallee": "replace"
  },
  {
    "callback": "function () {\n    hide();\n}",
    "receiverBase": "scope",
    "receiverCallee": "$apply"
  },
  {
    "callback": "function () {\n    tooltip.remove();\n}",
    "receiverBase": "",
    "receiverCallee": "$timeout"
  },
  {
    "callback": "function (val) {\n    if (val) {\n        scope.tt_content = val;\n    } else {\n        if (scope.tt_isOpen) {\n            hide();\n        }\n    }\n}",
    "receiverBase": "attrs",
    "receiverCallee": "$observe"
  },
  {
    "callback": "function (val) {\n    scope.tt_title = val;\n}",
    "receiverBase": "attrs",
    "receiverCallee": "$observe"
  },
  {
    "callback": "function (val) {\n    scope.tt_placement = angular.isDefined(val) ? val : options.placement;\n}",
    "receiverBase": "attrs",
    "receiverCallee": "$observe"
  },
  {
    "callback": "function (val) {\n    scope.tt_animation = angular.isDefined(val) ? !!val : options.animation;\n}",
    "receiverBase": "attrs",
    "receiverCallee": "$observe"
  },
  {
    "callback": "function (val) {\n    var delay = parseInt(val, 10);\n    scope.tt_popupDelay = !isNaN(delay) ? delay : options.popupDelay;\n}",
    "receiverBase": "attrs",
    "receiverCallee": "$observe"
  },
  {
    "callback": "function (val) {\n    if (hasRegisteredTriggers) {\n        element.unbind(triggers.show, showTooltipBind);\n        element.unbind(triggers.hide, hideTooltipBind);\n    }\n    triggers = getTriggers(val);\n    if (triggers.show === triggers.hide) {\n        element.bind(triggers.show, toggleTooltipBind);\n    } else {\n        element.bind(triggers.show, showTooltipBind);\n        element.bind(triggers.hide, hideTooltipBind);\n    }\n    hasRegisteredTriggers = true;\n}",
    "receiverBase": "attrs",
    "receiverCallee": "$observe"
  },
  {
    "callback": "function (val) {\n    appendToBody = angular.isDefined(val) ? $parse(val)(scope) : appendToBody;\n}",
    "receiverBase": "attrs",
    "receiverCallee": "$observe"
  },
  {
    "callback": "function closeTooltipOnLocationChangeSuccess() {\n    if (scope.tt_isOpen) {\n        hide();\n    }\n}",
    "receiverBase": "scope",
    "receiverCallee": "$on"
  },
  {
    "callback": "function onDestroyTooltip() {\n    $timeout.cancel(popupTimeout);\n    tooltip.remove();\n    tooltip.unbind();\n    tooltip = null;\n    $body = null;\n}",
    "receiverBase": "scope",
    "receiverCallee": "$on"
  },
  {
    "callback": "function () {\n    return {\n        restrict: 'E',\n        replace: true,\n        scope: {\n            content: '@',\n            placement: '@',\n            animation: '&',\n            isOpen: '&'\n        },\n        templateUrl: 'template/tooltip/tooltip-popup.html'\n    };\n}",
    "receiverBase": "provider",
    "receiverCallee": "directive"
  },
  {
    "callback": "function () {\n    return {\n        restrict: 'E',\n        replace: true,\n        scope: {\n            content: '@',\n            placement: '@',\n            animation: '&',\n            isOpen: '&'\n        },\n        templateUrl: 'template/tooltip/tooltip-html-unsafe-popup.html'\n    };\n}",
    "receiverBase": "directive",
    "receiverCallee": "directive"
  },
  {
    "callback": "function (e) {\n    var n = t[o][1][e];\n    return s(n ? n : e);\n}",
    "receiverBase": "t",
    "receiverCallee": "call"
  },
  {
    "callback": "function () {\n    if (document.body) {\n        if (document.getElementById(id)) {\n            document.body.replaceChild(elem, document.getElementById(id));\n        } else {\n            document.body.insertBefore(elem, document.body.firstChild);\n        }\n        clearInterval(timer);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "setInterval"
  },
  {
    "callback": "function (style) {\n    return function (e, cssAST) {\n        if (e) {\n            return error(e, 'inline');\n        }\n        var css = cssAST.toCSS(options);\n        style.type = 'text/css';\n        if (style.styleSheet) {\n            style.styleSheet.cssText = css;\n        } else {\n            style.innerHTML = css;\n        }\n    };\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (e, root) {\n    if (e) {\n        return callback(e, null, null, sheet);\n    }\n    try {\n        callback(e, root, data, sheet, webInfo, path);\n    } catch (e) {\n        callback(e, null, null, sheet);\n    }\n}",
    "receiverCallee": "parse"
  },
  {
    "callback": "function () {\n    if (less.watchMode) {\n        loadStyleSheets(function (e, root, _, sheet, env) {\n            if (e) {\n                error(e, sheet.href);\n            } else if (root) {\n                var styles = root.toCSS(less);\n                styles = postProcessCSS(styles);\n                createCSS(styles, sheet, env.lastModified);\n            }\n        });\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "setInterval"
  },
  {
    "callback": "function (e, root, _, sheet, env) {\n    if (e) {\n        error(e, sheet.href);\n    } else if (root) {\n        var styles = root.toCSS(less);\n        styles = postProcessCSS(styles);\n        createCSS(styles, sheet, env.lastModified);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "loadStyleSheets"
  },
  {
    "callback": "function doXHRCallback(data, lastModified) {\n    fileCache[href] = data;\n    callback(null, data, href, { lastModified: lastModified });\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "doXHR"
  },
  {
    "callback": "function doXHRError(status, url) {\n    callback({\n        type: 'File',\n        message: '\\'' + url + '\\' wasn\\'t found (' + status + ')'\n    }, null, href);\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "doXHR"
  },
  {
    "callback": "function (c) {\n    return scaled(c, 255);\n}",
    "receiverCallee": "map"
  },
  {
    "callback": "function (num) {\n    return num.toFixed(fraction);\n}",
    "receiverBase": "",
    "receiverCallee": "_math"
  },
  {
    "callback": "function (a) {\n    return a.toCSS(this.env);\n}",
    "receiverBase": "order",
    "receiverCallee": "map"
  },
  {
    "callback": "function (token) {\n    var value = token.match(/s/i) ? args[i].value : args[i].toCSS();\n    return token.match(/[A-Z]$/) ? encodeURIComponent(value) : value;\n}",
    "receiverBase": "result",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (e, root) {\n    fileParsedFunc(e, root, resolvedFilename);\n}",
    "receiverCallee": "parse"
  },
  {
    "callback": "function fail(msg, index) {\n    throw new LessError(parser, {\n        index: index,\n        type: 'Parse',\n        message: msg,\n        filename: env.currentFileInfo.filename\n    }, env);\n}",
    "receiverBase": "",
    "receiverCallee": "chunker"
  },
  {
    "callback": "function (k) {\n    var value = variables[k];\n    if (!(value instanceof tree.Value)) {\n        if (!(value instanceof tree.Expression)) {\n            value = new tree.Expression([value]);\n        }\n        value = new tree.Value([value]);\n    }\n    return new tree.Rule('@' + k, value, false, null, 0);\n}",
    "receiverBase": "keys",
    "receiverCallee": "map"
  },
  {
    "callback": "function (a) {\n    return a.eval(env);\n}",
    "receiverBase": "args",
    "receiverCallee": "map"
  },
  {
    "callback": "function (c) {\n    return parseInt(c, 16);\n}",
    "receiverBase": "match",
    "receiverCallee": "map"
  },
  {
    "callback": "function (c) {\n    return parseInt(c + c, 16);\n}",
    "receiverBase": "split",
    "receiverCallee": "map"
  },
  {
    "callback": "function (c) {\n    c = clamp(Math.round(c), 255);\n    return (c < 16 ? '0' : '') + c.toString(16);\n}",
    "receiverBase": "v",
    "receiverCallee": "map"
  },
  {
    "callback": "function (c) {\n    return clamp(Math.round(c), 255);\n}",
    "receiverBase": "rgb",
    "receiverCallee": "map"
  },
  {
    "callback": "function (a) {\n    if (a == '\\\\') {\n        a = '/';\n    }\n    return '\\\\' + a;\n}",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (e) {\n    return e.eval(env);\n}",
    "receiverBase": "value",
    "receiverCallee": "map"
  },
  {
    "callback": "function (v) {\n    return !(v instanceof Comment);\n}",
    "receiverBase": "value",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (_, name) {\n    return that.jsify(new Variable('@' + name, that.index).eval(env));\n}",
    "receiverBase": "expression",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (v) {\n    return v.toCSS();\n}",
    "receiverBase": "value",
    "receiverCallee": "map"
  },
  {
    "callback": "function (path) {\n    path = path.map(function (fragment) {\n        return fragment.toCSS ? fragment : new Anonymous(fragment);\n    });\n    for (i = path.length - 1; i > 0; i--) {\n        path.splice(i, 0, new Anonymous('and'));\n    }\n    return new Expression(path);\n}",
    "receiverBase": "permute",
    "receiverCallee": "map"
  },
  {
    "callback": "function (fragment) {\n    return fragment.toCSS ? fragment : new Anonymous(fragment);\n}",
    "receiverBase": "path",
    "receiverCallee": "map"
  },
  {
    "callback": "function (a) {\n    return {\n        name: a.name,\n        value: a.value.eval(env)\n    };\n}",
    "receiverBase": "arguments",
    "receiverCallee": "map"
  },
  {
    "callback": "function (a) {\n    var argValue = '';\n    if (a.name) {\n        argValue += a.name + ':';\n    }\n    if (a.value.toCSS) {\n        argValue += a.value.toCSS();\n    } else {\n        argValue += '???';\n    }\n    return argValue;\n}",
    "receiverBase": "args",
    "receiverCallee": "map"
  },
  {
    "callback": "function (count, p) {\n    if (!p.name || p.name && !p.value) {\n        return count + 1;\n    } else {\n        return count;\n    }\n}",
    "receiverBase": "params",
    "receiverCallee": "reduce"
  },
  {
    "callback": "function (_, exp) {\n    return String(that.evaluateJavaScript(exp, env));\n}",
    "receiverBase": "value",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (_, name) {\n    var v = new Variable('@' + name, that.index, that.currentFileInfo).eval(env, true);\n    return v instanceof Quoted ? v.value : v.toCSS();\n}",
    "receiverBase": "replace",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (r) {\n    if (r instanceof Rule && r.variable) {\n        return !ruleset.variable(r.name);\n    }\n    return true;\n}",
    "receiverBase": "eval",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (r) {\n    if (r instanceof Rule && r.variable) {\n        return false;\n    }\n    return true;\n}",
    "receiverBase": "rules",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (r) {\n    if (r.makeImportant) {\n        return r.makeImportant();\n    } else {\n        return r;\n    }\n}",
    "receiverBase": "rules",
    "receiverCallee": "map"
  },
  {
    "callback": "function (hash, r) {\n    if (r instanceof Rule && r.variable === true) {\n        hash[r.name] = r;\n    }\n    return hash;\n}",
    "receiverBase": "rules",
    "receiverCallee": "reduce"
  },
  {
    "callback": "function (rule) {\n    if (rule !== self) {\n        for (var j = 0; j < rule.selectors.length; j++) {\n            match = selector.match(rule.selectors[j]);\n            if (match) {\n                if (selector.elements.length > match) {\n                    Array.prototype.push.apply(rules, rule.find(new Selector(selector.elements.slice(match)), self));\n                } else {\n                    rules.push(rule);\n                }\n                break;\n            }\n        }\n    }\n}",
    "receiverBase": "rulesets",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (e) {\n    return e.eval(env);\n}",
    "receiverBase": "elements",
    "receiverCallee": "map"
  },
  {
    "callback": "function (extend) {\n    return extend.eval(env);\n}",
    "receiverBase": "extendList",
    "receiverCallee": "map"
  },
  {
    "callback": "function (match) {\n    return '\\\\' + match;\n}",
    "receiverBase": "rootpath",
    "receiverCallee": "replace"
  },
  {
    "callback": "function (v) {\n    return v.eval(env);\n}",
    "receiverBase": "value",
    "receiverCallee": "map"
  },
  {
    "callback": "function (frame) {\n    var v = frame.variable(name);\n    if (v) {\n        return v.value.eval(env);\n    }\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "find"
  },
  {
    "callback": "function (allSelectorsExtend) {\n    return allSelectorsExtend.clone();\n}",
    "receiverBase": "extendList",
    "receiverCallee": "map"
  },
  {
    "callback": "function (selfSelector) {\n    selectorsToAdd.push(extendVisitor.extendSelector(matches, selectorPath, selfSelector));\n}",
    "receiverBase": "selfSelectors",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (selector) {\n    return selector.getIsOutput();\n}",
    "receiverBase": "selectors",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (p) {\n    var i;\n    if (p[0].elements[0].combinator.value === ' ') {\n        p[0].elements[0].combinator = new tree.Combinator('');\n    }\n    for (i = 0; i < p.length; i++) {\n        if (p[i].getIsReferenced() && p[i].getIsOutput()) {\n            return true;\n        }\n    }\n    return false;\n}",
    "receiverBase": "paths",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (p) {\n    return p.value;\n}",
    "receiverBase": "values",
    "receiverCallee": "map"
  },
  {
    "callback": "function (p) {\n    return p;\n}",
    "receiverBase": "values",
    "receiverCallee": "map"
  },
  {
    "callback": "function (p) {\n    if (p.merge === '+') {\n        if (lastSpacedGroup.length > 0) {\n            spacedGroups.push(toExpression(lastSpacedGroup));\n        }\n        lastSpacedGroup = [];\n    }\n    lastSpacedGroup.push(p);\n}",
    "receiverBase": "parts",
    "receiverCallee": "map"
  },
  {
    "callback": "function (subModelTypeName, typeValue) {\n    var subModelType = this.getObjectByName(subModelTypeName);\n    if (modelType === subModelType) {\n        subModelDef.superModelType._subModels[typeValue] = modelType;\n        modelType._superModel = subModelDef.superModelType;\n        modelType._subModelTypeValue = typeValue;\n        modelType._subModelTypeAttribute = subModelDef.superModelType.prototype.subModelTypeAttribute;\n        return true;\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "find"
  },
  {
    "callback": "function (rel) {\n    return _.all(relation || [], function (val, key) {\n        return val === rel[key];\n    });\n}",
    "receiverBase": "_",
    "receiverCallee": "any"
  },
  {
    "callback": "function (val, key) {\n    return val === rel[key];\n}",
    "receiverBase": "_",
    "receiverCallee": "all"
  },
  {
    "callback": "function (subModel) {\n    addRelation(subModel, relation);\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (model) {\n    if (!(model instanceof relation.model)) {\n        return;\n    }\n    new relation.type(model, relation);\n}",
    "receiverBase": "coll",
    "receiverCallee": "each"
  },
  {
    "callback": "function (c) {\n    return c.model === rootModel;\n}",
    "receiverBase": "_",
    "receiverCallee": "detect"
  },
  {
    "callback": "function (scope) {\n    type = _.reduce(parts || [], function (memo, val) {\n        return memo ? memo[val] : undefined;\n    }, scope);\n    if (type && type !== scope) {\n        return true;\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "find"
  },
  {
    "callback": "function (memo, val) {\n    return memo ? memo[val] : undefined;\n}",
    "receiverBase": "_",
    "receiverCallee": "reduce"
  },
  {
    "callback": "function () {\n    dit.tryAddRelated(model, options);\n}",
    "receiverBase": "model",
    "receiverCallee": "queue"
  },
  {
    "callback": "function (rel) {\n    var hasReverseRelation = this.reverseRelation.key && rel.reverseRelation.key;\n    return rel.relatedModel === rm && rel.key === k && (!hasReverseRelation || this.reverseRelation.key === rel.reverseRelation.key);\n}",
    "receiverBase": "_",
    "receiverCallee": "any"
  },
  {
    "callback": "function (related) {\n    _.each(related.getRelations() || [], function (relation) {\n        if (this._isReverseRelation(relation)) {\n            reverseRelations.push(relation);\n        }\n    }, this);\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (relation) {\n    if (this._isReverseRelation(relation)) {\n        reverseRelations.push(relation);\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (relation) {\n    relation.removeRelated(this.instance);\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (relation) {\n    relation.addRelated(this.instance);\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (relation) {\n    relation.removeRelated(this.instance, options);\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (relation) {\n    relation.addRelated(this.instance, options);\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    dit.instance.trigger('update:' + dit.key, dit.instance, dit.related, options);\n}",
    "receiverBase": "eventQueue",
    "receiverCallee": "add"
  },
  {
    "callback": "function (item) {\n    var model = null;\n    if (item instanceof this.relatedModel) {\n        model = item;\n    } else if (item || item === 0) {\n        model = this.relatedModel.findOrCreate(item, { create: this.options.createModels });\n    }\n    if (model && !this.related.getByCid(model) && !this.related.get(model)) {\n        models.push(model);\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (attributes) {\n    newIds[attributes.id] = true;\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (model) {\n    if (!options.keepNewModels || !model.isNew()) {\n        oldIds[model.id] = true;\n        coll.remove(model, { silent: model.id in newIds });\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (attributes) {\n    var model = this.relatedModel.findOrCreate(attributes, { create: this.options.createModels });\n    if (model) {\n        coll.add(model, { silent: attributes.id in oldIds });\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    !options.silentChange && dit.instance.trigger('update:' + dit.key, dit.instance, dit.related, options);\n}",
    "receiverBase": "eventQueue",
    "receiverCallee": "add"
  },
  {
    "callback": "function (item) {\n    var id = Backbone.Relational.store.resolveIdForItem(this.relatedModel, item);\n    return !_.isNull(id) && id === model.id;\n}",
    "receiverBase": "_",
    "receiverCallee": "any"
  },
  {
    "callback": "function (relation) {\n    relation.addRelated(this.instance, options);\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    !options.silentChange && dit.instance.trigger('add:' + dit.key, model, dit.related, options);\n}",
    "receiverBase": "eventQueue",
    "receiverCallee": "add"
  },
  {
    "callback": "function (relation) {\n    relation.removeRelated(this.instance, options);\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    !options.silentChange && dit.instance.trigger('remove:' + dit.key, model, dit.related, options);\n}",
    "receiverBase": "eventQueue",
    "receiverCallee": "add"
  },
  {
    "callback": "function () {\n    !options.silentChange && dit.instance.trigger('reset:' + dit.key, dit.related, options);\n}",
    "receiverBase": "eventQueue",
    "receiverCallee": "add"
  },
  {
    "callback": "function () {\n    if (dit.related && !dit.related.getByCid(model) && !dit.related.get(model)) {\n        dit.related.add(model, options);\n    }\n}",
    "receiverBase": "model",
    "receiverCallee": "queue"
  },
  {
    "callback": "function () {\n    processQueue(dit);\n}",
    "receiverBase": "_",
    "receiverCallee": "defer"
  },
  {
    "callback": "function () {\n    Backbone.Model.prototype.trigger.apply(dit, args);\n}",
    "receiverBase": "eventQueue",
    "receiverCallee": "add"
  },
  {
    "callback": "function (rel) {\n    var type = !_.isString(rel.type) ? rel.type : Backbone[rel.type] || Backbone.Relational.store.getObjectByName(rel.type);\n    if (type && type.prototype instanceof Backbone.Relation) {\n        new type(this, rel);\n    } else {\n        Backbone.Relational.showWarnings && typeof console !== 'undefined' && console.warn('Relation=%o; missing or invalid type!', rel);\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (rel) {\n    var val = this.attributes[rel.keySource] || this.attributes[rel.key];\n    if (rel.related !== val) {\n        this.trigger('relational:change:' + rel.key, this, val, options || {});\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (rel) {\n    if (rel.key === key) {\n        return true;\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "detect"
  },
  {
    "callback": "function (item) {\n    var id = Backbone.Relational.store.resolveIdForItem(rel.relatedModel, item);\n    return !_.isNull(id) && (update || !Backbone.Relational.store.find(rel.relatedModel, id));\n}",
    "receiverBase": "_",
    "receiverCallee": "select"
  },
  {
    "callback": "function (item) {\n    var model;\n    if (_.isObject(item)) {\n        model = rel.relatedModel.findOrCreate(item);\n    } else {\n        var attrs = {};\n        attrs[rel.relatedModel.prototype.idAttribute] = item;\n        model = rel.relatedModel.findOrCreate(attrs);\n    }\n    return model;\n}",
    "receiverBase": "_",
    "receiverCallee": "map"
  },
  {
    "callback": "function (model) {\n    model.trigger('destroy', model, model.collection, options);\n    options.error && options.error.apply(model, args);\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (model) {\n    var opts = _.defaults({\n            error: function () {\n                model.trigger('destroy', model, model.collection, options);\n                options.error && options.error.apply(model, arguments);\n            }\n        }, options);\n    return model.fetch(opts);\n}",
    "receiverBase": "_",
    "receiverCallee": "map"
  },
  {
    "callback": "function () {\n    Backbone.Model.prototype.change.apply(dit, args);\n}",
    "receiverBase": "eventQueue",
    "receiverCallee": "add"
  },
  {
    "callback": "function (rel) {\n    delete attributes[rel.key];\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (model) {\n    var curJson = {};\n    _.each(rel.options.includeInJSON, function (key) {\n        curJson[key] = model.get(key);\n    });\n    valueSub.push(curJson);\n}",
    "receiverBase": "value",
    "receiverCallee": "each"
  },
  {
    "callback": "function (key) {\n    curJson[key] = model.get(key);\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (key) {\n    valueSub[key] = value.get(key);\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (rel) {\n    return rel.model && rel.model !== this;\n}",
    "receiverBase": "_",
    "receiverCallee": "any"
  },
  {
    "callback": "function (subModelTypeName) {\n    var subModelType = Backbone.Relational.store.getObjectByName(subModelTypeName);\n    subModelType && subModelType.initializeModelHierarchy();\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (model) {\n    if (!(model instanceof Backbone.Model)) {\n        model = Backbone.Collection.prototype._prepareModel.call(this, model, options);\n    }\n    if (model instanceof Backbone.Model && !this.get(model) && !this.getByCid(model)) {\n        modelsToAdd.push(model);\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (model) {\n    this.trigger('relational:add', model, this, options);\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function (model) {\n    model = this.getByCid(model) || this.get(model);\n    if (model instanceof Backbone.Model) {\n        remove.call(this, model, options);\n        this.trigger('relational:remove', model, this, options);\n    }\n}",
    "receiverBase": "_",
    "receiverCallee": "each"
  },
  {
    "callback": "function () {\n    trigger.apply(dit, args);\n}",
    "receiverBase": "eventQueue",
    "receiverCallee": "add"
  },
  {
    "callback": "function () {\n    main.shutdown();\n}",
    "receiverBase": "start",
    "receiverCallee": "on"
  },
  {
    "callback": "function (err, stats) {\n    if (err) {\n        got_error = true;\n    } else {\n        console.dir(stats);\n        assert.ok(stats.mtime instanceof Date);\n        success_count++;\n    }\n    assert(this === global);\n}",
    "receiverBase": "fs",
    "receiverCallee": "stat"
  },
  {
    "callback": "function (err, stats) {\n    if (err) {\n        got_error = true;\n    } else {\n        console.dir(stats);\n        assert.ok(stats.mtime instanceof Date);\n        success_count++;\n    }\n    assert(this === global);\n}",
    "receiverBase": "fs",
    "receiverCallee": "lstat"
  },
  {
    "callback": "function (err, fd) {\n    assert.ok(!err);\n    assert.ok(fd);\n    fs.fstat(fd, function (err, stats) {\n        if (err) {\n            got_error = true;\n        } else {\n            console.dir(stats);\n            assert.ok(stats.mtime instanceof Date);\n            success_count++;\n            fs.close(fd);\n        }\n        assert(this === global);\n    });\n    assert(this === global);\n}",
    "receiverBase": "fs",
    "receiverCallee": "open"
  },
  {
    "callback": "function (err, stats) {\n    if (err) {\n        got_error = true;\n    } else {\n        console.dir(stats);\n        assert.ok(stats.mtime instanceof Date);\n        success_count++;\n        fs.close(fd);\n    }\n    assert(this === global);\n}",
    "receiverBase": "fs",
    "receiverCallee": "fstat"
  },
  {
    "callback": "function (err, fd) {\n    var stats;\n    try {\n        stats = fs.fstatSync(fd);\n    } catch (err) {\n        got_error = true;\n    }\n    if (stats) {\n        console.dir(stats);\n        assert.ok(stats.mtime instanceof Date);\n        success_count++;\n    }\n    fs.close(fd);\n}",
    "receiverBase": "fs",
    "receiverCallee": "open"
  },
  {
    "callback": "function () {\n    assert.equal(5, success_count);\n    assert.equal(false, got_error);\n}",
    "receiverBase": "process",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    var sync = new Sync(stubSync());\n    var attributes = {\n            'some': 'column',\n            'another': 'column'\n        };\n    expect(sync.prefixFields(attributes)).to.eql({\n        'testtable.some': 'column',\n        'testtable.another': 'column'\n    });\n}",
    "receiverBase": "",
    "receiverCallee": "it"
  }
]