[
  {
    "callback": "function (d) {\n    d <<= 1;\n    return [\n        d,\n        d + 1\n    ];\n}",
    "receiverBase": "selectAll",
    "receiverCallee": "data"
  },
  {
    "callback": "function (d, i) {\n    return d & 1;\n}",
    "receiverBase": "append",
    "receiverCallee": "classed"
  },
  {
    "callback": "function (d, i) {\n    return i === 0;\n}",
    "receiverBase": "span",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (d, i) {\n    return d & 1;\n}",
    "receiverBase": "span",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (d, i) {\n    return d & 1;\n}",
    "receiverBase": "span",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (d, i) {\n    return d & 1;\n}",
    "receiverBase": "span",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (d, i) {\n    return d & 1;\n}",
    "receiverBase": "span",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (d, i) {\n    return d & 1;\n}",
    "receiverBase": "span",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (d, i) {\n    indexes.push(i);\n}",
    "receiverBase": "filter",
    "receiverCallee": "each"
  },
  {
    "callback": "function (d, i) {\n    return d & 1;\n}",
    "receiverBase": "span",
    "receiverCallee": "filter"
  },
  {
    "callback": "function () {\n    return 1;\n}",
    "receiverBase": "span",
    "receiverCallee": "filter"
  },
  {
    "callback": "function () {\n    return 1;\n}",
    "receiverBase": "t1",
    "receiverCallee": "filter"
  },
  {
    "callback": "function () {\n    return 1;\n}",
    "receiverBase": "t1",
    "receiverCallee": "filter"
  },
  {
    "callback": "function () {\n    return 1;\n}",
    "receiverBase": "t1",
    "receiverCallee": "filter"
  },
  {
    "callback": "function (require, deep) {\n    var unit = {\n            title: 'deepjs/lib/selectors',\n            stopOnError: false,\n            setup: function () {\n            },\n            tests: {}\n        };\n    return unit;\n}",
    "receiverBase": "",
    "receiverCallee": "define"
  },
  {
    "callback": "function (element) {\n    return element[method].apply(element, args);\n}",
    "receiverBase": "parentContext",
    "receiverCallee": "map"
  },
  {
    "callback": "function (elements) {\n    return Array.prototype.concat.apply([], elements);\n}",
    "receiverBase": "all",
    "receiverCallee": "then"
  },
  {
    "callback": "function (newContext) {\n    setContext(newContext);\n    return newContext;\n}",
    "receiverBase": "promise",
    "receiverCallee": "then"
  },
  {
    "callback": "function (returnValue) {\n    self._context = parent ? parent.context : TOP_CONTEXT;\n    return returnValue;\n}",
    "receiverCallee": "then"
  },
  {
    "callback": "function (error) {\n    self._context = parent ? parent.context : TOP_CONTEXT;\n    throw error;\n}",
    "receiverCallee": "then"
  },
  {
    "callback": "function (error) {\n    error.stack = error.stack + self.stack.replace(/^[^\\n]+/, '');\n    throw error;\n}",
    "receiverBase": "then",
    "receiverCallee": "catch"
  },
  {
    "callback": "function (element) {\n    return fn.apply(session, [element].concat(args));\n}",
    "receiverBase": "parentContext",
    "receiverCallee": "map"
  },
  {
    "callback": "function (newContext) {\n    setContext(newContext);\n    return newContext;\n}",
    "receiverBase": "promise",
    "receiverCallee": "then"
  },
  {
    "callback": "function (element) {\n    return element[key].apply(element, args);\n}",
    "receiverBase": "parentContext",
    "receiverCallee": "map"
  },
  {
    "callback": "function (newContext) {\n    setContext(newContext);\n    return newContext;\n}",
    "receiverBase": "promise",
    "receiverCallee": "then"
  },
  {
    "callback": "function () {\n    var key;\n    for (key in Session.prototype) {\n        Command.addSessionMethod(Command.prototype, key, Session.prototype[key]);\n    }\n    for (key in Element.prototype) {\n        Command.addElementMethod(Command.prototype, key);\n    }\n}",
    "receiverBase": ""
  },
  {
    "callback": "function (mod) {\n    if (typeof exports == 'object' && typeof module == 'object')\n        mod(require('../../lib/codemirror'));\n    else if (typeof define == 'function' && define.amd)\n        define(['../../lib/codemirror'], mod);\n    else\n        mod(CodeMirror);\n}",
    "receiverBase": ""
  },
  {
    "callback": "function () {\n    [\n        'app',\n        'lib',\n        'tests',\n        'data',\n        'answers'\n    ].forEach(function (dir) {\n        site.use('/' + dir, staticDir(opts.baseDir + dir));\n    });\n    site.use(express.bodyParser());\n}",
    "receiverBase": "site",
    "receiverCallee": "configure"
  },
  {
    "callback": "function (dir) {\n    site.use('/' + dir, staticDir(opts.baseDir + dir));\n}",
    "receiverCallee": "forEach"
  },
  {
    "callback": "function (req, res) {\n    fs.createReadStream(opts.baseDir + 'tests/runner.html').pipe(res);\n}",
    "receiverBase": "site",
    "receiverCallee": "get"
  },
  {
    "callback": "function (err, f) {\n    console.log(f.replace('{{port}}', opts.port));\n    console.log('\\n\\nServing at http://localhost:' + opts.port);\n}",
    "receiverBase": "fs",
    "receiverCallee": "readFile"
  },
  {
    "callback": "function () {\n    app.use(express.static(app.root + '/public', { maxAge: 86400000 }));\n    app.set('jsDirectory', '/javascripts/');\n    app.set('cssDirectory', '/stylesheets/');\n    app.set('cssEngine', '{{ CSSENGINE }}');\n    compound.loadConfigs(__dirname);\n    app.use(express.urlencoded());\n    app.use(express.json());\n    app.use(express.cookieParser('secret'));\n    app.use(express.session({ secret: 'secret' }));\n    app.use(express.methodOverride());\n    app.use(app.router);\n}",
    "receiverBase": "app",
    "receiverCallee": "configure"
  },
  {
    "callback": "function () {\n    $rootElement.removeClass('has-modal');\n}",
    "receiverBase": "elem",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    $rootElement.removeClass('has-modal');\n}",
    "receiverBase": "scope",
    "receiverCallee": "$on"
  },
  {
    "callback": "function () {\n    $rootElement.removeClass('has-modal-overlay');\n}",
    "receiverBase": "elem",
    "receiverCallee": "on"
  },
  {
    "callback": "function () {\n    $rootElement.removeClass('has-modal-overlay');\n}",
    "receiverBase": "scope",
    "receiverCallee": "$on"
  },
  {
    "callback": "function () {\n    for (var i = 0; i < self.platforms.length; i++) {\n        document.body.classList.add('platform-' + self.platforms[i]);\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "requestAnimationFrame"
  },
  {
    "callback": "function () {\n    if (oldGrade) {\n        document.body.classList.remove('grade-' + oldGrade);\n    }\n    document.body.classList.add('grade-' + grade);\n}",
    "receiverBase": "",
    "receiverCallee": "requestAnimationFrame"
  },
  {
    "callback": "function () {\n    navigator.app && navigator.app.exitApp && navigator.app.exitApp();\n}",
    "receiverBase": "self",
    "receiverCallee": "ready"
  },
  {
    "callback": "function () {\n    requestAnimationFrame(function () {\n        if (self._showStatusBar) {\n            window.StatusBar && window.StatusBar.show();\n            document.body.classList.remove('status-bar-hide');\n        } else {\n            window.StatusBar && window.StatusBar.hide();\n            document.body.classList.add('status-bar-hide');\n        }\n    });\n}",
    "receiverBase": "self",
    "receiverCallee": "ready"
  },
  {
    "callback": "function () {\n    if (self._showStatusBar) {\n        window.StatusBar && window.StatusBar.show();\n        document.body.classList.remove('status-bar-hide');\n    } else {\n        window.StatusBar && window.StatusBar.hide();\n        document.body.classList.add('status-bar-hide');\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "requestAnimationFrame"
  },
  {
    "callback": "function () {\n    requestAnimationFrame(function () {\n        if (self.isFullScreen) {\n            document.body.classList.add('fullscreen');\n        } else {\n            document.body.classList.remove('fullscreen');\n        }\n    });\n    self.showStatusBar(showStatusBar === true);\n}",
    "receiverBase": "DomUtil",
    "receiverCallee": "ready"
  },
  {
    "callback": "function () {\n    if (self.isFullScreen) {\n        document.body.classList.add('fullscreen');\n    } else {\n        document.body.classList.remove('fullscreen');\n    }\n}",
    "receiverBase": "",
    "receiverCallee": "requestAnimationFrame"
  },
  {
    "callback": "function () {\n    document.body.classList.add('platform-ready');\n}",
    "receiverBase": "",
    "receiverCallee": "requestAnimationFrame"
  },
  {
    "callback": "function cb_tearDown() {\n    server.close(function cb_close() {\n        helper.unloadAgent(agent);\n    });\n}",
    "receiverBase": "LIT:this",
    "receiverCallee": "tearDown"
  },
  {
    "callback": "function cb_close() {\n    helper.unloadAgent(agent);\n}",
    "receiverBase": "server",
    "receiverCallee": "close"
  },
  {
    "callback": "function (req, res, next) {\n    t.ok(agent.getTransaction(), 'transaction is available');\n    res.send({ status: 'ok' });\n    next();\n}",
    "receiverBase": "server",
    "receiverCallee": "get"
  },
  {
    "callback": "function () {\n    request.get('http://localhost:8089/test/31337', { json: true }, function (error, res, body) {\n        t.equal(res.statusCode, 200, 'nothing exploded');\n        t.deepEqual(body, { status: 'ok' }, 'got expected respose');\n    });\n}",
    "receiverBase": "server",
    "receiverCallee": "listen"
  },
  {
    "callback": "function (error, res, body) {\n    t.equal(res.statusCode, 200, 'nothing exploded');\n    t.deepEqual(body, { status: 'ok' }, 'got expected respose');\n}",
    "receiverBase": "request",
    "receiverCallee": "get"
  }
]